&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12 GUI
&ANALYZE-RESUME
/* Connected Databases
          platte           PROGRESS
*/
&Scoped-define WINDOW-NAME wn-ship_details
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS wn-ship_details
/*------------------------------------------------------------------------

  File: explship.w

  Description: Display the shipment detail records

  Author: John Mordeson

  Created: 08/15/94 -  8:23 am

  Modified:
            moved to modifications procedure.
 ------------------------------------------------------------------------------*/
/*******************************************************************************/
/**           (C) Copyright DMSi. 1994 -- AllF Rights Reserved                 **/
/*******************************************************************************/
/*----------------------------------------------------------------------*/
/*          This .W file was created with the Progress UIB.             */
/*----------------------------------------------------------------------*/

/*===== REFACTOR COMMENTS BEGIN=====*/
/*Refactor checklist*

Valid values for status:  Y means refactor needed, N means no refactor needed, blank means not reviewed

Potential Refactor Activity                                    Status   Date   Version By  Comment
------------------------------------------------               ------ -------- ------- --- ------------------------------------
Update to current UI standards
Apply UI customization to window
Change hard-coded messages to use standard message handling
Update to current code standards
Verify procedures are called persistently when appropriate
Move business logic to procedure programs
Evaluate procedures for code that can be reused
Verify transaction scopes
Verify record scopes
Verify variable scopes
Verify correct Qty Conversion procedure is used
Replace itemtype.i with invitemtype.i
Remove unused procedure parameters & procedures
*Refactor checklist*/


/*===== REFACTOR COMMENTS END=====*/

{agilglobal.i}
  
{tttrantodispatch.i}
{ic/wmssendpott.i}
{ic/wmssendrmtt.i}
{common/ttonholdtbr.i}

/* Parameters Definitions ---                                           */

DEFINE INPUT PARAMETER ip-shiphead_rec   AS RECID     NO-UNDO.
DEFINE INPUT PARAMETER ip-calling_module AS HANDLE    NO-UNDO.
DEFINE INPUT PARAMETER ip-context        AS CHARACTER NO-UNDO.

DEFINE VARIABLE goSecurityManager        AS sys.SecurityManager   NO-UNDO.
DEFINE VARIABLE goSODetailPresenter      AS so.SODetailPresenter  NO-UNDO.

DEFINE VARIABLE g-called_by              AS HANDLE    NO-UNDO.
DEFINE VARIABLE g-calling_module         AS HANDLE    NO-UNDO.

DEFINE VARIABLE glShippedADFOverride     AS LOGICAL   NO-UNDO INIT NO.
DEFINE VARIABLE glSOHeaderADFOverride    AS LOGICAL   NO-UNDO INIT NO.
DEFINE VARIABLE glSOHeaderUpdateADF      AS LOGICAL   NO-UNDO INIT NO.
DEFINE VARIABLE gdOrigADF                AS DECIMAL   NO-UNDO.
DEFINE VARIABLE glOrigHold               AS LOGICAL   NO-UNDO INIT FALSE.
DEFINE VARIABLE glCheckAlreadyCommitted  AS LOGICAL   NO-UNDO.

DEFINE VARIABLE l-error-message          AS CHARACTER NO-UNDO.

DEFINE VARIABLE gdtOrigShipDate          AS DATE      NO-UNDO.
DEFINE VARIABLE gdtOrigExpDate           AS DATE      NO-UNDO.
DEFINE VARIABLE gcOrigStatus             AS CHARACTER NO-UNDO.
DEFINE VARIABLE g-orig-route             AS CHARACTER NO-UNDO.
DEFINE VARIABLE gcPrevRoute              AS CHARACTER NO-UNDO.
DEFINE VARIABLE g-orig-stop              AS INTEGER   NO-UNDO.
DEFINE VARIABLE gcOrigDriver             AS CHARACTER NO-UNDO.
DEFINE VARIABLE gcPriorDriver            AS CHARACTER NO-UNDO.
DEFINE VARIABLE gcOrigProNumber          AS CHARACTER NO-UNDO.
DEFINE VARIABLE l-delete                 AS LOGICAL   INIT NO NO-UNDO .
DEFINE VARIABLE l-prev-ptr               LIKE item.item_ptr INIT ? NO-UNDO.
DEFINE VARIABLE l-need                   AS LOGICAL INIT NO NO-UNDO.
DEFINE VARIABLE l-comitree-called        AS LOGICAL INIT NO NO-UNDO.
DEFINE VARIABLE gcAutoPoType             AS CHARACTER NO-UNDO INIT "".
DEFINE VARIABLE l-orig-adf               AS DECIMAL   NO-UNDO.
DEFINE VARIABLE g-cost_toggle            AS INTEGER   NO-UNDO.

/* use these variables for calls to getadf.p */
DEFINE VARIABLE l-total-adf            AS DECIMAL   NO-UNDO.
DEFINE VARIABLE l-header-adf           AS DECIMAL   NO-UNDO.
DEFINE VARIABLE l-adf-already-invoiced AS DECIMAL   NO-UNDO.
DEFINE VARIABLE l-discountable         AS DECIMAL   NO-UNDO.
DEFINE VARIABLE g-total-count          AS DECIMAL   NO-UNDO.
DEFINE VARIABLE g-shipment-count       AS DECIMAL   NO-UNDO.

DEFINE VARIABLE g-qty_change_made      AS LOGICAL   NO-UNDO INIT FALSE.
DEFINE VARIABLE g-ship-sysid           AS CHARACTER NO-UNDO INIT "".
DEFINE VARIABLE g-so-sysid             AS CHARACTER NO-UNDO INIT "".

/* cust_shipto globals */
DEFINE VARIABLE giShiptoSeq            AS INTEGER   NO-UNDO INIT ?.

DEFINE VARIABLE gdDetailTallyQty       AS DECIMAL   NO-UNDO INIT ?.
DEFINE VARIABLE g-detail_qty           AS DECIMAL   NO-UNDO INIT ?.
DEFINE VARIABLE grCurrentRECID         AS RECID     NO-UNDO.
DEFINE VARIABLE g-context              AS CHARACTER NO-UNDO.
DEFINE VARIABLE g-row                  AS INTEGER   NO-UNDO.
DEFINE VARIABLE gcCurrentShipmentRecID AS RECID     NO-UNDO.

DEFINE VARIABLE glTransferOrder          AS LOGICAL     NO-UNDO.
DEFINE VARIABLE glByPassEntryTrigger     AS LOGICAL     NO-UNDO INIT YES.
DEFINE VARIABLE glByPassEntryTrigger2    AS LOGICAL     NO-UNDO INIT NO.
DEFINE VARIABLE g-shipto_recid           AS RECID       NO-UNDO.

DEFINE VARIABLE goMsgWindowCaller     AS common.MsgWindowCaller                 NO-UNDO.

DEFINE VARIABLE l-order-proc     AS   HANDLE                        NO-UNDO.

/* Inventory item parameter variables */
DEFINE VARIABLE g-first_run        AS LOGICAL                       NO-UNDO.
DEFINE VARIABLE glFirstSoheader    AS LOGICAL                       NO-UNDO INIT YES.

DEFINE VARIABLE ghUsodetalHdl           AS HANDLE                        NO-UNDO.
DEFINE VARIABLE ghLinentryProc          AS HANDLE                        NO-UNDO.

DEFINE VARIABLE gcSOSysid               AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE giSOID                  AS INTEGER                       NO-UNDO INIT 0.
DEFINE VARIABLE giShipNum               AS INTEGER                       NO-UNDO INIT 0.
DEFINE VARIABLE glAffectInv             AS LOGICAL                       NO-UNDO INIT FALSE.
DEFINE VARIABLE glCustomerAcceptsBO     AS LOGICAL                       NO-UNDO.
DEFINE VARIABLE gcSaleTypeSysid         AS CHARACTER                     NO-UNDO.
DEFINE VARIABLE gcSaleType              AS CHARACTER                     NO-UNDO.
DEFINE VARIABLE gcShipVia               AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE glPricedPick            AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE gdtExpectDate           AS DATE                          NO-UNDO INIT ?.
DEFINE VARIABLE glExpectDateOverride    AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE giPriceLevel            AS INTEGER                       NO-UNDO INIT 0.
DEFINE VARIABLE gcHeaderPriceMethod     AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE gdHeaderExtraPrice      AS DECIMAL                       NO-UNDO INIT 0.
DEFINE VARIABLE gcHeaderDiscountMethod  AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE gdHeaderDisc1Extra      AS DECIMAL                       NO-UNDO INIT 0.
DEFINE VARIABLE gdHeaderDisc2Extra      AS DECIMAL                       NO-UNDO INIT 0.
DEFINE VARIABLE gdHeaderDisc3Extra      AS DECIMAL                       NO-UNDO INIT 0.
DEFINE VARIABLE gdHeaderGmTarget        AS DECIMAL                       NO-UNDO INIT 0.
DEFINE VARIABLE glPassThru              AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE glCustPiecePriceFlag    AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE glTaxable               AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE gcTaxCode               AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE giCurrentYear           AS INTEGER                       NO-UNDO.
DEFINE VARIABLE giCurrentPeriod         AS INTEGER                       NO-UNDO.
DEFINE VARIABLE gcPickProcess2Use       AS CHARACTER                     NO-UNDO.
DEFINE VARIABLE gcSelectedBranch        AS CHARACTER                     NO-UNDO.
DEFINE VARIABLE glContractBilling       AS LOGICAL                       NO-UNDO INIT NO.
DEFINE VARIABLE glUsingCurrency         AS LOGICAL                       NO-UNDO INIT FALSE.
DEFINE VARIABLE gcCurrency              AS CHARACTER                     NO-UNDO INIT "".
DEFINE VARIABLE glHoldAllowed           AS LOGICAL                       NO-UNDO INIT TRUE.
DEFINE VARIABLE gcCountry               AS CHARACTER                     NO-UNDO INIT "".

/* Tally Calc variables */
DEFINE VARIABLE gcTallyMsg         LIKE messages.messages           NO-UNDO.
DEFINE VARIABLE g-tally_qty        LIKE po_detail.qty_ordered       NO-UNDO.
DEFINE VARIABLE g-orig_tallymsg    AS   CHARACTER                   NO-UNDO.
DEFINE VARIABLE glForceAutoHndl    AS   LOGICAL                     NO-UNDO INIT NO.

DEFINE VARIABLE glNeedRestart            AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE glEnabled                AS   LOGICAL        NO-UNDO INIT FALSE.
DEFINE VARIABLE lCustomerSpecified       AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE lDoLater                 AS   LOGICAL        NO-UNDO.

DEFINE VARIABLE glCrCheckShipments       AS   LOGICAL        NO-UNDO INIT FALSE.
DEFINE VARIABLE glCrChanged              AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE gdOrigOrderTotal         AS   DECIMAL        NO-UNDO.
DEFINE VARIABLE gdOrigShipmentTotal      AS   DECIMAL        NO-UNDO.

DEFINE VARIABLE glSkipShutdown           AS   LOGICAL        NO-UNDO INIT NO.
DEFINE VARIABLE glPrintOnHold            AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE gcUpdateTaxFields        AS   CHARACTER      NO-UNDO.

DEFINE VARIABLE giBillToSeq              AS   INTEGER        NO-UNDO.
DEFINE VARIABLE gcDefaultGroup           AS   CHARACTER      NO-UNDO INIT "".
DEFINE VARIABLE glUseGroupAsDefault      AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE gcDefaultShipGroup       AS   CHARACTER      NO-UNDO INIT "".
DEFINE VARIABLE glUseShipGroupAsDefault  AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE glDoNotCloseFromAP       AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE gcCurrentUser            AS   CHARACTER      NO-UNDO.
DEFINE VARIABLE glMoveDetail             AS   LOGICAL        NO-UNDO.

DEFINE VARIABLE glAllowReviewStatusHdr   AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE glAllowReviewStatusDtl   AS   LOGICAL        NO-UNDO.
DEFINE VARIABLE glUseConsignForCust      AS   LOGICAL        NO-UNDO INIT NO.

DEFINE VARIABLE gcCurrentDriverOnHeader  AS   CHARACTER      NO-UNDO INIT "".
DEFINE VARIABLE gcDummy                  AS   CHARACTER      NO-UNDO INIT "".

/* line update mode */
DEFINE VARIABLE grLineUpdateRECID         AS RECID            NO-UNDO.
DEFINE VARIABLE grOrigLineUpdateRECID     AS RECID            NO-UNDO.
DEFINE VARIABLE giLineUpdateRow           AS INTEGER          NO-UNDO.

DEFINE VARIABLE glAllowPCRefUOM           AS LOGICAL          NO-UNDO.
DEFINE VARIABLE glAllowUnitUOM            AS LOGICAL          NO-UNDO.
DEFINE VARIABLE glLineUpdateMode          AS LOGICAL          NO-UNDO.
DEFINE VARIABLE glSaveLineUpdateChanges   AS LOGICAL          NO-UNDO.
DEFINE VARIABLE giLineUpdateSequence      AS INTEGER          NO-UNDO.
DEFINE VARIABLE gcNextSaveStep            AS CHARACTER        NO-UNDO.

DEFINE VARIABLE giOrigLineUpdateItemPtr   AS DECIMAL          NO-UNDO.
DEFINE VARIABLE gdOrigLineUpdateQty       AS DECIMAL          NO-UNDO.
DEFINE VARIABLE gcOrigLineUpdateUOM       AS CHARACTER        NO-UNDO.
DEFINE VARIABLE gcOrigLineUpdateDimension AS CHARACTER        NO-UNDO.
DEFINE VARIABLE gdOrigLineUpdatePrice     AS DECIMAL          NO-UNDO.
DEFINE VARIABLE gcOrigLineUpdatePriceUOM  AS CHARACTER        NO-UNDO.
DEFINE VARIABLE gdOrigLineUpdateExtPrice  AS DECIMAL          NO-UNDO.

DEFINE NEW GLOBAL SHARED VARIABLE ghPayments         AS HANDLE NO-UNDO.

DEFINE BUFFER bfSOHeader        FOR so_header.

/* Local Variable Definitions ---                                       */
{allwdefs.i}

DEFINE SUB-MENU menu-file
  MENU-ITEM hndl-save   LABEL "&Save Header" ACCELERATOR "CTRL-S"
  RULE
  MENU-ITEM hndl-add    LABEL "&Add Item"    ACCELERATOR "CTRL-A"
  MENU-ITEM hndl-update LABEL "&Update Item"
  MENU-ITEM hndl-delete LABEL "&Delete Item" ACCELERATOR "CTRL-D"
  RULE
  MENU-ITEM hndl-x      LABEL "&Close".

{menu.i}

DEFINE  MENU menu-main MENUBAR
    SUB-MENU menu-file LABEL "&File"
    SUB-MENU menu-edit LABEL "&Edit"
    SUB-MENU menu-opt LABEL "&Options".

/*Include file that holds variable/temp-table definitions and common procedures used here and sishipdetailupd.p*/
{so/explshipi.i}

DEFINE BUFFER     blttship_details_line_update FOR temp-ship-details.

DEFINE TEMP-TABLE temp-trans_message NO-UNDO LIKE trans_message.
DEFINE TEMP-TABLE ttMessages         NO-UNDO LIKE messages.

/* temporary table of zero balance tally records */
DEFINE TEMP-TABLE zerotally NO-UNDO
   FIELD t-Line-Cnt       AS   INTEGER
   FIELD t-item_ptr       LIKE item_tally.item_ptr
   FIELD t-item_ptr_sysid LIKE item_tally.item_ptr_sysid
   INDEX zerotally-IDX IS PRIMARY t-Line-Cnt ASC.

{so/tempinvoiced.i}

DEFINE TEMP-TABLE ttPotentialInvItemQty NO-UNDO
  FIELD cItemSysid   AS CHARACTER
  FIELD iItemPtr     AS INTEGER
  FIELD iLocPtr      AS INTEGER
  FIELD cLocPtrSysid AS CHARACTER
  FIELD cLot         AS CHARACTER
  FIELD cTag         AS CHARACTER
  FIELD cContent     AS CHARACTER
  FIELD dThickness   AS DECIMAL
  FIELD dWidth       AS DECIMAL
  FIELD dLength      AS DECIMAL
  FIELD iPieceCount  AS INTEGER
  FIELD dQty         AS DECIMAL

  INDEX pk_ttPotentialInvItemQty
        cItemSysid
        iItemPtr
        iLocPtr
        cLocPtrSysid
        cLot
        cTag
        cContent
        dThickness
        dWidth
        dLength
        iPieceCount.



DEFINE BUFFER bl-shipments_header FOR shipments_header.

/*
   Temporary table consisting of item tally records.  The qty field will
   represent the qty on-stock less the qty committed.  The children-qty
   field represents the qty available from all the children of a level.
   The commit-threshold represents the maximum amount of inventory
   eligible for commit at a level.
*/
{shipinfoptt.i}
{ttgetaltqty2.i}

DEFINE TEMP-TABLE ttOrigBomReserved      NO-UNDO LIKE item_reserved.
DEFINE TEMP-TABLE ttorig_item_reserved   NO-UNDO LIKE item_reserved.
DEFINE TEMP-TABLE ttorig_suggested_tally NO-UNDO LIKE suggested_tally.

DEFINE TEMP-TABLE ttRemoveFromHold NO-UNDO
  FIELD dThickness AS DECIMAL
  FIELD dWidth     AS DECIMAL
  FIELD dLength    AS DECIMAL
  FIELD iPieceCnt  AS INTEGER
  FIELD dStockQty  AS DECIMAL

  INDEX xIndex dThickness dWidth dLength iPieceCnt.

{custinfodef.i}

ASSIGN
  glCustInfoBuildTempTable = YES.

/* Temp table definitions and internal functions for keeping
   track of the different lengths received for lumber items. */
{ttLengthsRecvd.i}


{caldefs.i}

{so/salesordparamtt.i}
{so/salesorddstt.i}
{ttMiscFields.i}
{ttcutfilewindow.i}
{ttminqty.i}
{common/errormsgtt.i}
{common/errormsgproc.i}
{common/ttpassthru.i}
{cpy2shiptott.i}

{ttcancelseq.i}


{so/trandetailds.i}
/*Common include file for printing Delv Ticket/Pick Ticket or Report*/
{printticket.i}
/*{ttdmprinter.i} */
{reprintdlvtkt.i}

DEFINE TEMP-TABLE ttUserPref         NO-UNDO LIKE user_preferences.

{p_checkordercosts.i}
{tmppolst.i}
{common/qtyuomdefs.i}

{ttstagedhdr.i}
DEFINE TEMP-TABLE ttCopyStagedHeader NO-UNDO LIKE ttStagedHeader.

DEFINE TEMP-TABLE temp-ship-reserve NO-UNDO
    FIELD sequence AS INTEGER
    FIELD qty AS DECIMAL INIT 0.

{ttpicktrn.i}
{ttpickdtl.i}

{updstagingstat.i}
{common/specifytagi.i}

{common/traninfods.i}

DEFINE TEMP-TABLE ttItemInfoSingle NO-UNDO LIKE ttItemInfo.
DEFINE DATASET dsItemInfoSingle FOR ttItemInfoSingle.

DEFINE TEMP-TABLE ttTranInfoSingle NO-UNDO LIKE ttTranInfo.
DEFINE DATASET dsTranInfoSingle FOR ttTranInfoSingle.

DEFINE TEMP-TABLE ttorigitem_reserved   NO-UNDO LIKE ttitem_reserved.
DEFINE TEMP-TABLE ttorigsuggested_tally NO-UNDO LIKE ttsuggested_tally.

{ttsostqty.i}

{p_isparent.i}

{ic\wmsuse.i}

{sys/timetrackertt.i}

DEFINE TEMP-TABLE ttOrig_item_reservedDummy   NO-UNDO LIKE ttitem_reserved.
DEFINE TEMP-TABLE ttOrig_suggested_tallyDummy NO-UNDO LIKE ttsuggested_tally.
DEFINE TEMP-TABLE ttOrig_item_boDummy         NO-UNDO LIKE ttitem_bo.
DEFINE TEMP-TABLE ttOrig_HWTallyDummy         NO-UNDO LIKE ttHWTally.

DEFINE DATASET dsOrigDetailTallyDummy
  FOR ttOrig_item_reservedDummy, ttOrig_suggested_tallyDummy, ttOrig_item_boDummy, ttOrig_HWTallyDummy.

{so/f_priceinfomgr.i}

&GLOBAL-DEFINE ShipmentStatusClassExclude TRUE
{so/shipstatus.i}

{df/customwindowsize.i}
{common/ttautomessagedim.i}

{sys/parammobileappdstt.i}

DEFINE TEMP-TABLE ttshipments_detail_adj        NO-UNDO LIKE shipments_detail_adj
  FIELD tran_seq AS INTEGER
  FIELD adj_qty  AS DECIMAL.

DEFINE TEMP-TABLE ttemptyshipments_detail_adj   NO-UNDO LIKE ttshipments_detail_adj.
DEFINE TEMP-TABLE ttprocessshipments_detail_adj NO-UNDO LIKE ttshipments_detail_adj
  FIELD iRow AS INTEGER.

DEFINE TEMP-TABLE ttTrackSelected NO-UNDO
  FIELD sequence            AS INTEGER
  FIELD row_number          AS INTEGER
  FIELD sel_number          AS INTEGER
  INDEX pk_ttTraackSelected IS PRIMARY
        sequence.

DEFINE VARIABLE gcPodAdjustmentGUID AS CHARACTER NO-UNDO.

{sys/paramsystmds.i}
{f_strdefmt.i}
{paramsott.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE WINDOW
&Scoped-define DB-AWARE no

/* Name of designated FRAME-NAME and/or first browse and/or first query */
&Scoped-define FRAME-NAME frExplship
&Scoped-define BROWSE-NAME br-shipdetails

/* Internal Tables (found by Frame, Query & Browse Queries)             */
&Scoped-define INTERNAL-TABLES temp-ship-details BL-shipments_header

/* Definitions for BROWSE br-shipdetails                                */
&Scoped-define FIELDS-IN-QUERY-br-shipdetails temp-ship-details.dDisplayQty temp-ship-details.cDisplayUOM temp-ship-details.need-spec temp-ship-details.item temp-ship-details.size temp-ship-details.description temp-ship-details.sequence temp-ship-details.haz-msg temp-ship-details.review_status temp-ship-details.pod_qty_adjustments temp-ship-details.disp_price temp-ship-details.disp_price-uom temp-ship-details.discount temp-ship-details.ext_price (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.dispgm, "->>9.99") ELSE "") (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.disp_cost, "-ZZZZZZ9.9999") ELSE "") (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.dispcostdesig, "X(2)") ELSE " ") temp-ship-details.oth_chg_no_gm temp-ship-details.oth_chg_gm temp-ship-details.oth_cost_no_gm temp-ship-details.oth_cost_gm temp-ship-details.linked_po temp-ship-details.group_id temp-ship-details.group_header temp-ship-details.cWoId
&Scoped-define ENABLED-FIELDS-IN-QUERY-br-shipdetails temp-ship-details.dDisplayQty temp-ship-details.disp_price temp-ship-details.disp_price-uom temp-ship-details.ext_price
&Scoped-define ENABLED-TABLES-IN-QUERY-br-shipdetails temp-ship-details
&Scoped-define FIRST-ENABLED-TABLE-IN-QUERY-br-shipdetails temp-ship-details
&Scoped-define SELF-NAME br-shipdetails
&Scoped-define QUERY-STRING-br-shipdetails FOR EACH temp-ship-details
&Scoped-define OPEN-QUERY-br-shipdetails OPEN QUERY {&SELF-NAME} FOR EACH temp-ship-details.
&Scoped-define TABLES-IN-QUERY-br-shipdetails temp-ship-details
&Scoped-define FIRST-TABLE-IN-QUERY-br-shipdetails temp-ship-details


/* Definitions for FRAME frExplship                                     */
&Scoped-define OPEN-BROWSERS-IN-QUERY-frExplship ~
    ~{&OPEN-QUERY-br-shipdetails}
&Scoped-define QUERY-STRING-frExplship FOR EACH BL-shipments_header ~
      WHERE RECID(bl-shipments_header) = ip-shiphead_rec NO-LOCK
&Scoped-define OPEN-QUERY-frExplship OPEN QUERY frExplship FOR EACH BL-shipments_header ~
      WHERE RECID(bl-shipments_header) = ip-shiphead_rec NO-LOCK.
&Scoped-define TABLES-IN-QUERY-frExplship BL-shipments_header
&Scoped-define FIRST-TABLE-IN-QUERY-frExplship BL-shipments_header


/* Standard List Definitions                                            */
&Scoped-Define ENABLED-OBJECTS btSave btShipDtlInfo btDisplayOrder ~
fiCurrencyLbl btDispatch btHdrMsgs btCancelStaging btCustInfo ~
fiStagingstatus fi-ship_date btCalendarDt fiExpDate btCalendarExpDt ~
fi-route btRoute tbHold fi-stop fiDriver btDriverLoc fi-adf fiProNumber ~
tbDispAllocChgCost btAdd bt-update_detail bt-delete btViewOthChgCst ~
fistagingstatuslbl btSelectLoc btSpecifyTags btViewMsgs btSerNumEnt ~
btSelectAll btUnitData btPodAccept btPodReject cbDisplayUOM fi-asterisk ~
br-shipdetails fiInvoiceDate btCalendarInvDt cbInvoicePeriod cbInvoiceYear ~
btDefault cbStatus tbPrintDelvTick btUpdateStatus bt-prev bt-next ~
fiStatusLabel fiInvoiceDateLabel fiProNumberLbl RECT-82 RECT-54
&Scoped-Define DISPLAYED-OBJECTS fiCurrencyLbl fiStagingstatus fi-ship_date ~
fiExpDate fiCredStat fi-route tbHold fi-stop fi-cust_id fiReviewStatus ~
fiDriver fiEstimatedProfit fi-adf fiProNumber tbDispAllocChgCost ~
fistagingstatuslbl cbDisplayUOM fi-asterisk fiInvoiceDate cbInvoicePeriod ~
cbInvoiceYear cbStatus tbPrintDelvTick fi-shipto fiCurrency fi-order_date ~
fiStatusText fi-adf-message fiInvPeriodText fiStatusLabel ~
fiInvoiceDateLabel fiReviewStatusLbl fiProNumberLbl

/* Custom List Definitions                                              */
/* List-1,List-2,List-3,List-4,List-5,List-6                            */

/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME

/* ************************  Function Prototypes ********************** */




&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD CancelLineUpdateChanges wn-ship_details
FUNCTION CancelLineUpdateChanges RETURNS LOGICAL 
  (  ) FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD PricingIsEditableForDetail wn-ship_details
FUNCTION PricingIsEditableForDetail RETURNS LOGICAL 
  (  ) FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION-FORWARD UnsavedLineUpdateChanges wn-ship_details
FUNCTION UnsavedLineUpdateChanges RETURNS LOGICAL 
  ( INPUT ipcSOIDSysid    AS CHARACTER,
    INPUT ipiSOID         AS INTEGER,
    INPUT ipiSequence     AS INTEGER,
    INPUT ipiShipmentNum  AS INTEGER ) FORWARD.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

/* ***********************  Control Definitions  ********************** */

/* Define the widget handle for the window                              */
DEFINE VAR wn-ship_details AS WIDGET-HANDLE NO-UNDO.

/* Definitions of the field level widgets                               */
DEFINE BUTTON bt-delete
     IMAGE-UP FILE "images/delete.ico":U
     IMAGE-INSENSITIVE FILE "images/delete_g.ico":U
     LABEL "Delete"
     SIZE 4.8 BY 1.1 TOOLTIP "Delete item (Ctrl+D)".

DEFINE BUTTON bt-next
     IMAGE-UP FILE "images/next.ico":U
     LABEL "":L
     SIZE 4.8 BY 1.1.

DEFINE BUTTON bt-prev
     IMAGE-UP FILE "images/prev.ico":U
     LABEL "":L
     SIZE 4.8 BY 1.1.

DEFINE BUTTON bt-tallycalc
     IMAGE-UP FILE "IMAGES/cal_btn_grid.ico":U NO-FOCUS
     LABEL "Button 3"
     SIZE 4.2 BY .81.

DEFINE BUTTON bt-update_detail
     IMAGE-UP FILE "images/edititem.ico":U
     IMAGE-INSENSITIVE FILE "images/edititem_g.ico":U
     LABEL "Update"
     SIZE 4.8 BY 1.1 TOOLTIP "Update item".

DEFINE BUTTON btAdd
     IMAGE-UP FILE "images/plussign_inset.ico":U
     IMAGE-INSENSITIVE FILE "images/plussign_inset_g.ico":U
     LABEL "Add"
     SIZE 4.8 BY 1.1 TOOLTIP "Add item (Ctrl+A)".

DEFINE BUTTON btCalendarDt
     IMAGE-UP FILE "images/cbdown.ico":U
     LABEL "Btn 4":L
     SIZE 3.8 BY 1.

DEFINE BUTTON btCalendarExpDt
     IMAGE-UP FILE "images/cbdown.ico":U
     LABEL "Btn 4":L
     SIZE 3.8 BY 1.

DEFINE BUTTON btCalendarInvDt
     IMAGE-UP FILE "images/cbdown.ico":U
     LABEL "Btn 4":L
     SIZE 4 BY 1.

DEFINE BUTTON btCancelStaging
     IMAGE-UP FILE "images\delete":U
     IMAGE-INSENSITIVE FILE "images\delete_g":U
     LABEL "&Cancel Staging":L
     SIZE 4.8 BY 1.1 TOOLTIP "Delete shipment".

DEFINE BUTTON btCustInfo
     IMAGE-UP FILE "images/cust_infot.ico":U
     IMAGE-INSENSITIVE FILE "images/cust_infotgr.ico":U
     LABEL "View Customer Info"
     SIZE 4.8 BY 1.1 TOOLTIP "View Customer Information".

DEFINE BUTTON btDefault
     LABEL "Defau&lt"
     SIZE 12 BY 1.

DEFINE BUTTON btDispatch
     IMAGE-UP FILE "images/dspch":U
     IMAGE-INSENSITIVE FILE "images/dspch_g":U
     LABEL "":L
     SIZE 4.8 BY 1.1 TOOLTIP "Maintain dispatch records".

DEFINE BUTTON btDisplayOrder
     IMAGE-UP FILE "images/view_so.ico":U
     IMAGE-INSENSITIVE FILE "images/view_so_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Display order".

DEFINE BUTTON btDriverLoc
     IMAGE-UP FILE "images/locate.ico":U
     IMAGE-INSENSITIVE FILE "images/locate_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1.

DEFINE BUTTON btHdrMsgs
     IMAGE-UP FILE "images\msg_y":U
     IMAGE-INSENSITIVE FILE "images\msg_g":U
     LABEL "Message":L
     SIZE 4.8 BY 1.1 TOOLTIP "Create message".

DEFINE BUTTON btnImages
     IMAGE-UP FILE "images\pod_photos":U
     IMAGE-INSENSITIVE FILE "images\pod_photos_g":U
     LABEL "&View Images":L
     SIZE 4.8 BY 1.1 TOOLTIP "View POD images for shipment".

DEFINE BUTTON btPodAccept
     LABEL "&Accept POD Changes"
     SIZE 23.4 BY 1.1.

DEFINE BUTTON btPodReject
     LABEL "&Reject POD Changes"
     SIZE 23.4 BY 1.1.

DEFINE BUTTON btRoute
     IMAGE-UP FILE "images/locate.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1.

DEFINE BUTTON btSave
     IMAGE-UP FILE "images/save.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Save header (Ctrl+S)".

DEFINE BUTTON btSelectAll
     IMAGE-UP FILE "images/select_all.ico":U
     IMAGE-INSENSITIVE FILE "images/select_all_g.ico":U
     LABEL "Select all (Ctrl+L)"
     SIZE 4.8 BY 1.1 TOOLTIP "Select all (Ctrl+L)".

DEFINE BUTTON btSelectLoc
     IMAGE-UP FILE "images/specify_location.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Select location".

DEFINE BUTTON btSerNumEnt
     IMAGE-UP FILE "images/sn_entry.ico":U
     IMAGE-INSENSITIVE FILE "images/sn_entry_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Serial number entry".

DEFINE BUTTON btShipDtlInfo
     IMAGE-UP FILE "images/stage_info.ico":U
     IMAGE-INSENSITIVE FILE "images/stage_info_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "View shipment information details".

DEFINE BUTTON btSpecifyTags
     IMAGE-UP FILE "images/specify_tags.ico":U
     IMAGE-INSENSITIVE FILE "images/specify_tags_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Specify tags to commit".

DEFINE BUTTON btUnitData
     IMAGE-UP FILE "images/unit_data.ico":U
     IMAGE-INSENSITIVE FILE "images/unit_data_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Display unit data".

DEFINE BUTTON btUpdateStatus
     LABEL "&Update Status":L
     SIZE 16 BY 1.14.

DEFINE BUTTON btViewMsgs
     IMAGE-UP FILE "images/msg_n.ico":U
     IMAGE-INSENSITIVE FILE "images/msg_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "View messages".

DEFINE BUTTON btViewOthChgCst
     IMAGE-UP FILE "images/view_order_chg.ico":U
     IMAGE-INSENSITIVE FILE "images/view_order_chg_g.ico":U
     LABEL ""
     SIZE 4.8 BY 1.1 TOOLTIP "Override/view other charge/cost".

DEFINE VARIABLE cbDisplayUOM AS CHARACTER FORMAT "X(256)":U INITIAL "Picking UOM"
     VIEW-AS COMBO-BOX INNER-LINES 5
     LIST-ITEMS "Delivery UOM","Invoice UOM","Order UOM","Picking UOM"
     DROP-DOWN-LIST
     SIZE 33 BY 1 NO-UNDO.

DEFINE VARIABLE cbInvoicePeriod AS CHARACTER FORMAT "X(20)":U
     VIEW-AS COMBO-BOX INNER-LINES 12
     LIST-ITEMS "1 - January","2 - February","3 - March","4 - April","5 - May","6 - June","7 - July","8 - August","9 - September","10 - October","11 - November","12 - December"
     DROP-DOWN-LIST
     SIZE 22 BY 1 NO-UNDO.

DEFINE VARIABLE cbInvoiceYear AS CHARACTER FORMAT "X(8)":U INITIAL "0"
     VIEW-AS COMBO-BOX INNER-LINES 5
     DROP-DOWN-LIST
     SIZE 15 BY 1 NO-UNDO.

DEFINE VARIABLE cbStatus AS CHARACTER FORMAT "X(256)":U
     VIEW-AS COMBO-BOX INNER-LINES 5
     LIST-ITEMS "Item 1"
     DROP-DOWN-LIST
     SIZE 16 BY 1 NO-UNDO.

DEFINE VARIABLE fi-address AS CHARACTER FORMAT "X(31)":U
     VIEW-AS FILL-IN
     SIZE 53 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-address_2 AS CHARACTER FORMAT "X(31)":U
     VIEW-AS FILL-IN
     SIZE 53 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-adf AS DECIMAL FORMAT "-ZZZ,ZZZ,ZZZ,ZZ9.99":U INITIAL 0
     VIEW-AS FILL-IN NATIVE
     SIZE 28 BY 1
     BGCOLOR 15 FGCOLOR 0 FONT 14 NO-UNDO.

DEFINE VARIABLE fi-adf-message AS CHARACTER FORMAT "X(50)":U INITIAL "* ADF overridden on the sales order"
      VIEW-AS TEXT
     SIZE 48.4 BY .62
     FONT 17 NO-UNDO.

DEFINE VARIABLE fi-asterisk AS CHARACTER FORMAT "X(1)":U
      VIEW-AS TEXT
     SIZE 1 BY .95 NO-UNDO.

DEFINE VARIABLE fi-city AS CHARACTER FORMAT "X(21)":U
     VIEW-AS FILL-IN
     SIZE 30 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-cust AS CHARACTER FORMAT "X(31)":U
     VIEW-AS FILL-IN
     SIZE 53 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-cust_id AS CHARACTER FORMAT "X(12)":U
     VIEW-AS FILL-IN
     SIZE 19 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-order_date AS CHARACTER FORMAT "X(8)":U
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-route AS CHARACTER FORMAT "X(256)":U
     VIEW-AS FILL-IN NATIVE
     SIZE 28 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-shipto AS CHARACTER FORMAT "X(5)":U
     VIEW-AS FILL-IN
     SIZE 8.4 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-ship_date AS DATE FORMAT "99/99/99":U
     VIEW-AS FILL-IN NATIVE
     SIZE 29 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-ship_num AS INTEGER FORMAT ">>>>>>9":U INITIAL 0
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-soid AS INTEGER FORMAT "{&gcPartialTranID}":U INITIAL 0
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-state AS CHARACTER FORMAT "X(3)":U
     VIEW-AS FILL-IN
     SIZE 5 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-stop AS INTEGER FORMAT ">>>>>9":U INITIAL 0
     VIEW-AS FILL-IN NATIVE
     SIZE 33 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fi-zip AS CHARACTER FORMAT "X(11)":U
     VIEW-AS FILL-IN
     SIZE 16 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fiCredStat AS CHARACTER FORMAT "X(12)":U
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fiCurrency AS CHARACTER FORMAT "X(256)":U
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15  NO-UNDO.

DEFINE VARIABLE fiCurrencyLbl AS CHARACTER FORMAT "X(256)":U INITIAL "Currency"
      VIEW-AS TEXT
     SIZE 11.6 BY 1 NO-UNDO.

DEFINE VARIABLE fiDriver AS CHARACTER FORMAT "x(12)"
     VIEW-AS FILL-IN
     SIZE 28 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fiEstimatedProfit AS DECIMAL FORMAT "-ZZZ,ZZZ,ZZZ,ZZ9.99":U INITIAL 0
     VIEW-AS FILL-IN
     SIZE 28 BY 1
     BGCOLOR 15 FONT 14 NO-UNDO.

DEFINE VARIABLE fiExpDate AS DATE FORMAT "99/99/99":U
     VIEW-AS FILL-IN NATIVE
     SIZE 29 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fiInvoiceDate AS DATE FORMAT "99/99/99":U
     VIEW-AS FILL-IN
     SIZE 23.6 BY 1 NO-UNDO.

DEFINE VARIABLE fiInvoiceDateLabel AS CHARACTER FORMAT "X(256)":U INITIAL "Date"
      VIEW-AS TEXT
     SIZE 6 BY 1 NO-UNDO.

DEFINE VARIABLE fiInvPeriodText AS CHARACTER FORMAT "X(256)":U INITIAL "Invoice period"
      VIEW-AS TEXT
     SIZE 14 BY .62 NO-UNDO.

DEFINE VARIABLE fiProNumber AS CHARACTER FORMAT "X(30)":U
     VIEW-AS FILL-IN
     SIZE 33 BY 1
     BGCOLOR 15  NO-UNDO.

DEFINE VARIABLE fiProNumberLbl AS CHARACTER FORMAT "X(256)":U INITIAL "Pro #"
      VIEW-AS TEXT
     SIZE 16.2 BY 1 NO-UNDO.

DEFINE VARIABLE fiReviewStatus AS CHARACTER FORMAT "X(16)":U
     VIEW-AS FILL-IN
     SIZE 28 BY 1
     BGCOLOR 15 FGCOLOR 0  NO-UNDO.

DEFINE VARIABLE fiReviewStatusLbl AS CHARACTER FORMAT "X(16)":U INITIAL "Review status"
      VIEW-AS TEXT
     SIZE 15.8 BY 1 NO-UNDO.

DEFINE VARIABLE fiStagingstatus AS CHARACTER FORMAT "X(256)":U
      VIEW-AS TEXT
     SIZE 33 BY 1
     BGCOLOR 15  NO-UNDO.

DEFINE VARIABLE fistagingstatuslbl AS CHARACTER FORMAT "X(256)":U INITIAL "Staging status"
      VIEW-AS TEXT
     SIZE 14 BY 1 NO-UNDO.

DEFINE VARIABLE fiStatusLabel AS CHARACTER FORMAT "X(256)":U INITIAL "Status"
      VIEW-AS TEXT
     SIZE 10 BY 1 NO-UNDO.

DEFINE VARIABLE fiStatusText AS CHARACTER FORMAT "X(256)":U INITIAL "Change shipment status to"
      VIEW-AS TEXT
     SIZE 26 BY .62 NO-UNDO.

DEFINE RECTANGLE RECT-54
     EDGE-PIXELS 2 GRAPHIC-EDGE  NO-FILL
     SIZE 44 BY .1.

DEFINE RECTANGLE RECT-82
     EDGE-PIXELS 2 GRAPHIC-EDGE  NO-FILL
     SIZE 35 BY .1.

DEFINE VARIABLE tbDispAllocChgCost AS LOGICAL INITIAL YES
     LABEL "Display allocated charges && costs"
     VIEW-AS TOGGLE-BOX
     SIZE 35.8 BY 1 NO-UNDO.

DEFINE VARIABLE tbHold AS LOGICAL INITIAL NO
     LABEL "Hold from invoicing"
     VIEW-AS TOGGLE-BOX
     SIZE 23.6 BY 1 NO-UNDO.

DEFINE VARIABLE tbPrintDelvTick AS LOGICAL INITIAL NO
     LABEL "Print delivery ticket"
     VIEW-AS TOGGLE-BOX
     SIZE 21.8 BY 1 NO-UNDO.

/* Query definitions                                                    */
&ANALYZE-SUSPEND
DEFINE QUERY br-shipdetails FOR
      temp-ship-details SCROLLING.

DEFINE QUERY frExplship FOR
      BL-shipments_header SCROLLING.
&ANALYZE-RESUME

/* Browse definitions                                                   */
DEFINE BROWSE br-shipdetails
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _DISPLAY-FIELDS br-shipdetails wn-ship_details _FREEFORM
  QUERY br-shipdetails DISPLAY
      temp-ship-details.dDisplayQty         LABEL "Quantity"         FORMAT "->>>>>>>>>>9.9999" COLUMN-BGCOLOR 14
      temp-ship-details.cDisplayUOM         LABEL "UOM"              FORMAT "X(4)"
      temp-ship-details.need-spec           LABEL "Specify commit"   FORMAT "Yes/No"
      temp-ship-details.item                LABEL "Item"             FORMAT "X(16)"
      temp-ship-details.size                LABEL "Size"             FORMAT "X(22)" WIDTH 30.8
      temp-ship-details.description         LABEL "Description"      FORMAT "X(40)"
      temp-ship-details.sequence            LABEL "Sequence"         FORMAT "->>>>>9"
      temp-ship-details.haz-msg             LABEL "Msg"              FORMAT "X(1)"
      temp-ship-details.review_status       LABEL "Review status"    FORMAT "X(35)"
      temp-ship-details.pod_qty_adjustments LABEL "POD adjusted qty" FORMAT "X(200)"
      temp-ship-details.disp_price          LABEL "Price"            FORMAT "->>>,>>9.99"
      temp-ship-details.disp_price-uom      LABEL "Price UOM"        FORMAT "X(4)"  
      temp-ship-details.discount            LABEL "Discount"         FORMAT "X(20)" WIDTH 20
      temp-ship-details.ext_price           LABEL "Ext price"        FORMAT "->>>,>>>,>>>,>>9.99"
      (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.dispgm, "->>9.99")
       ELSE "") LABEL "GM %"   FORMAT "X(7)"
      (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.disp_cost, "-ZZZZZZ9.9999")
       ELSE "") LABEL "Cost"   FORMAT "X(13)"
      (IF g-cost_toggle = 3 THEN STRING(temp-ship-details.dispcostdesig, "X(2)")
       ELSE " ") LABEL "  " FORMAT "X(1)"
      temp-ship-details.oth_chg_no_gm       LABEL "Oth chg no GM"     FORMAT "->>>,>>>,>>9.9999"
      temp-ship-details.oth_chg_gm          LABEL "Oth chg GM"        FORMAT "->>>,>>>,>>9.9999"
      temp-ship-details.oth_cost_no_gm      LABEL "Oth cost no GM"    FORMAT "->>>,>>>,>>9.9999"
      temp-ship-details.oth_cost_gm         LABEL "Oth cost GM"       FORMAT "->>>,>>>,>>9.9999"
      temp-ship-details.linked_po           LABEL "PO ID"             FORMAT "{&gcPartialTranID}"
      temp-ship-details.group_id            LABEL "Group ID"          FORMAT "X(30)"
      temp-ship-details.group_header        COLUMN-LABEL "Group header"      FORMAT "Yes/No"
      temp-ship-details.cWoId               COLUMN-LABEL "WO ID"      FORMAT "X({&giTranLength})"  WIDTH 14

    ENABLE temp-ship-details.dDisplayQty temp-ship-details.disp_price temp-ship-details.disp_price-uom temp-ship-details.ext_price
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME
    WITH SEPARATORS MULTIPLE SIZE 182.4 BY 8.19
         FONT 8 NO-EMPTY-SPACE.


/* ************************  Frame Definitions  *********************** */

DEFINE FRAME frExplship
     btSave AT ROW 1.29 COL 2 WIDGET-ID 104
     btShipDtlInfo AT ROW 1.29 COL 7
     btDisplayOrder AT ROW 1.29 COL 12.2
     fiCurrencyLbl AT ROW 9.38 COL 130.2 NO-LABEL WIDGET-ID 550
     btDispatch AT ROW 1.29 COL 17.4
     btHdrMsgs AT ROW 1.29 COL 22.6
     btnImages AT ROW 1.29 COL 27.8 WIDGET-ID 122
     btCancelStaging AT ROW 1.29 COL 38.2 WIDGET-ID 4
     btCustInfo AT ROW 2.67 COL 50.4
     fiStagingstatus AT ROW 4.91 COL 85.4 COLON-ALIGNED NO-LABEL WIDGET-ID 68 NO-TAB-STOP
     fi-ship_date AT ROW 3.81 COL 149 COLON-ALIGNED NO-LABEL
     btCalendarDt AT ROW 3.81 COL 180.4 HELP
          "Display Calendar"
     fiExpDate AT ROW 4.91 COL 149 COLON-ALIGNED NO-LABEL
     btCalendarExpDt AT ROW 4.91 COL 180.4 HELP
          "Display Calendar"
     fiCredStat AT ROW 6 COL 85.4 COLON-ALIGNED NO-LABEL
     fi-route AT ROW 6 COL 149 COLON-ALIGNED NO-LABEL
     btRoute AT ROW 5.95 COL 179.4
     tbHold AT ROW 7.1 COL 65 WIDGET-ID 42
     fi-stop AT ROW 7.14 COL 149 COLON-ALIGNED NO-LABEL
     fi-cust_id AT ROW 2.71 COL 12.8 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     fiReviewStatus AT ROW 8.24 COL 85.4 COLON-ALIGNED NO-LABEL WIDGET-ID 112
     fiDriver AT ROW 8.24 COL 149 COLON-ALIGNED NO-LABEL WIDGET-ID 546
     btDriverLoc AT ROW 8.19 COL 179.4 WIDGET-ID 544
     fiEstimatedProfit AT ROW 9.33 COL 85.4 COLON-ALIGNED NO-LABEL
     fi-adf AT ROW 10.48 COL 85.4 COLON-ALIGNED NO-LABEL
     fiProNumber AT ROW 10.57 COL 149 COLON-ALIGNED NO-LABEL WIDGET-ID 552
     tbDispAllocChgCost AT ROW 12.29 COL 130.2 WIDGET-ID 36
     btAdd AT ROW 13.29 COL 2 WIDGET-ID 72
     bt-update_detail AT ROW 13.29 COL 7.2 WIDGET-ID 76
     bt-delete AT ROW 13.29 COL 12.4 WIDGET-ID 74
     btViewOthChgCst AT ROW 13.29 COL 17.4
     fistagingstatuslbl AT ROW 4.91 COL 65 NO-LABEL WIDGET-ID 70
     btSelectLoc AT ROW 13.29 COL 22.6
     btSpecifyTags AT ROW 13.29 COL 27.8
     btViewMsgs AT ROW 13.29 COL 33
     btSerNumEnt AT ROW 13.29 COL 38.2 WIDGET-ID 38
     btSelectAll AT ROW 13.29 COL 43.4 WIDGET-ID 120
     btUnitData AT ROW 13.29 COL 48.6 WIDGET-ID 34
     btPodAccept AT ROW 13.29 COL 53.8 WIDGET-ID 116
     btPodReject AT ROW 13.29 COL 77.6 WIDGET-ID 118
     fi-ship_num AT ROW 3.81 COL 85.4 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     cbDisplayUOM AT ROW 13.33 COL 149 COLON-ALIGNED NO-LABEL WIDGET-ID 2
     fi-asterisk AT ROW 10.48 COL 113.8 COLON-ALIGNED NO-LABEL
     br-shipdetails AT ROW 14.57 COL 2
     fiInvoiceDate AT ROW 23.76 COL 90.4 COLON-ALIGNED NO-LABEL WIDGET-ID 26
     btCalendarInvDt AT ROW 23.76 COL 116.4 HELP
          "Display Calendar" WIDGET-ID 20
     cbInvoicePeriod AT ROW 24.95 COL 67 COLON-ALIGNED NO-LABEL WIDGET-ID 22
     cbInvoiceYear AT ROW 24.95 COL 90.4 COLON-ALIGNED NO-LABEL WIDGET-ID 24
     btDefault AT ROW 24.95 COL 108.4 WIDGET-ID 18
     cbStatus AT ROW 23.76 COL 168.4 NO-LABEL WIDGET-ID 14
     tbPrintDelvTick AT ROW 24.95 COL 132.8 WIDGET-ID 16
     fi-soid AT ROW 2.71 COL 85.4 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     btUpdateStatus AT ROW 25.95 COL 168.4 WIDGET-ID 32
     bt-prev AT ROW 25.95 COL 2 WIDGET-ID 8
     bt-next AT ROW 25.95 COL 7 WIDGET-ID 6
     fi-shipto AT ROW 2.71 COL 40 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     fiCurrency AT ROW 9.38 COL 149 COLON-ALIGNED NO-LABEL WIDGET-ID 40 NO-TAB-STOP
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY
         SIDE-LABELS NO-UNDERLINE THREE-D
         AT COL 1 ROW 1
         SIZE 184.4 BY 26.33
         FONT 8.

/* DEFINE FRAME statement is approaching 4K Bytes.  Breaking it up   */
DEFINE FRAME frExplship
     fi-order_date AT ROW 2.71 COL 149 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     fi-cust AT ROW 3.81 COL 2 NO-LABEL NO-TAB-STOP
     fiStatusText AT ROW 23.05 COL 128.2 COLON-ALIGNED NO-LABEL WIDGET-ID 10 NO-TAB-STOP
     fi-address AT ROW 4.91 COL 2 NO-LABEL NO-TAB-STOP
     fi-address_2 AT ROW 6 COL 2 NO-LABEL NO-TAB-STOP
     fi-city AT ROW 7.14 COL 2 NO-LABEL NO-TAB-STOP
     fi-state AT ROW 7.14 COL 31 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     fi-zip AT ROW 7.14 COL 37 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     bt-tallycalc AT ROW 17.91 COL 69.4
     fi-adf-message AT ROW 11.57 COL 65.4 COLON-ALIGNED NO-LABEL NO-TAB-STOP
     fiInvPeriodText AT ROW 23.05 COL 65 NO-LABEL WIDGET-ID 28 NO-TAB-STOP
     fiStatusLabel AT ROW 23.76 COL 132.8 NO-LABEL WIDGET-ID 102 NO-TAB-STOP
     fiInvoiceDateLabel AT ROW 23.76 COL 69.2 NO-LABEL WIDGET-ID 96 NO-TAB-STOP
     fiReviewStatusLbl AT ROW 8.24 COL 65 NO-LABEL WIDGET-ID 114
     fiProNumberLbl AT ROW 10.57 COL 130.2 NO-LABEL WIDGET-ID 554
     "SO ID" VIEW-AS TEXT
          SIZE 13 BY 1 AT ROW 2.71 COL 65 WIDGET-ID 46
     "Driver" VIEW-AS TEXT
          SIZE 14.6 BY 1 AT ROW 8.24 COL 130.2 WIDGET-ID 548
     "Expected delv date" VIEW-AS TEXT
          SIZE 18.6 BY 1 AT ROW 4.91 COL 130.2 WIDGET-ID 60
     "Route ID" VIEW-AS TEXT
          SIZE 9.6 BY 1 AT ROW 6 COL 130.2 WIDGET-ID 62
     "Stop #" VIEW-AS TEXT
          SIZE 8 BY 1 AT ROW 7.14 COL 130.2 WIDGET-ID 64
     "Ship-to" VIEW-AS TEXT
          SIZE 7 BY 1 AT ROW 2.71 COL 34.6 WIDGET-ID 108
     "Shipment #" VIEW-AS TEXT
          SIZE 11.8 BY 1 AT ROW 3.81 COL 65 WIDGET-ID 48
     "Credit status" VIEW-AS TEXT
          SIZE 15.8 BY 1 AT ROW 6 COL 65 WIDGET-ID 50
     "Estimated profit" VIEW-AS TEXT
          SIZE 16.8 BY 1 AT ROW 9.33 COL 65 WIDGET-ID 52
     "ADF" VIEW-AS TEXT
          SIZE 8 BY 1 AT ROW 10.48 COL 65 WIDGET-ID 54
     "Customer ID" VIEW-AS TEXT
          SIZE 12.2 BY 1 AT ROW 2.71 COL 2 WIDGET-ID 106
     "Order date" VIEW-AS TEXT
          SIZE 14 BY 1 AT ROW 2.71 COL 130.2 WIDGET-ID 56
     "Expected ship date" VIEW-AS TEXT
          SIZE 18.6 BY 1 AT ROW 3.81 COL 130.2 WIDGET-ID 58
     "Display UOM" VIEW-AS TEXT
          SIZE 13 BY 1 AT ROW 13.33 COL 130.2 WIDGET-ID 110
     RECT-82 AT ROW 23.33 COL 149.6 WIDGET-ID 12
     RECT-54 AT ROW 23.38 COL 76.4 WIDGET-ID 30
    WITH 1 DOWN NO-BOX KEEP-TAB-ORDER OVERLAY
         SIDE-LABELS NO-UNDERLINE THREE-D
         AT COL 1 ROW 1
         SIZE 184.4 BY 26.33
         FONT 8.


/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: WINDOW
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
IF SESSION:DISPLAY-TYPE = "GUI":U THEN
  CREATE WINDOW wn-ship_details ASSIGN
         HIDDEN             = YES
         TITLE              = "Staging Details"
         HEIGHT             = 26.33
         WIDTH              = 184.4
         MAX-HEIGHT         = 48.48
         MAX-WIDTH          = 384
         VIRTUAL-HEIGHT     = 48.48
         VIRTUAL-WIDTH      = 384
         RESIZE             = YES
         SCROLL-BARS        = NO
         STATUS-AREA        = NO
         BGCOLOR            = ?
         FGCOLOR            = ?
         KEEP-FRAME-Z-ORDER = YES
         THREE-D            = YES
         CONTEXT-HELP-FILE  = "10190":U
         MESSAGE-AREA       = NO
         SENSITIVE          = YES.
ELSE {&WINDOW-NAME} = CURRENT-WINDOW.
/* END WINDOW DEFINITION                                                */
&ANALYZE-RESUME



/* ***********  Runtime Attributes and AppBuilder Settings  *********** */

&ANALYZE-SUSPEND _RUN-TIME-ATTRIBUTES
/* SETTINGS FOR FRAME frExplship
   FRAME-NAME Custom                                                    */
/* BROWSE-TAB br-shipdetails fi-asterisk frExplship */
ASSIGN
       br-shipdetails:NUM-LOCKED-COLUMNS IN FRAME frExplship     = 1
       br-shipdetails:COLUMN-RESIZABLE IN FRAME frExplship       = TRUE.

/* SETTINGS FOR BUTTON bt-tallycalc IN FRAME frExplship
   NO-ENABLE                                                            */
ASSIGN
       bt-tallycalc:HIDDEN IN FRAME frExplship           = TRUE.

/* SETTINGS FOR BUTTON btDispatch IN FRAME frExplship
   NO-DISPLAY                                                           */
/* SETTINGS FOR BUTTON btHdrMsgs IN FRAME frExplship
   NO-DISPLAY                                                           */
/* SETTINGS FOR BUTTON btnImages IN FRAME frExplship
   NO-ENABLE                                                            */
ASSIGN
       btnImages:HIDDEN IN FRAME frExplship           = TRUE.

/* SETTINGS FOR COMBO-BOX cbStatus IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fi-address IN FRAME frExplship
   NO-DISPLAY NO-ENABLE ALIGN-L                                         */
/* SETTINGS FOR FILL-IN fi-address_2 IN FRAME frExplship
   NO-DISPLAY NO-ENABLE ALIGN-L                                         */
/* SETTINGS FOR FILL-IN fi-adf-message IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fi-city IN FRAME frExplship
   NO-DISPLAY NO-ENABLE ALIGN-L                                         */
/* SETTINGS FOR FILL-IN fi-cust IN FRAME frExplship
   NO-DISPLAY NO-ENABLE ALIGN-L                                         */
/* SETTINGS FOR FILL-IN fi-cust_id IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fi-order_date IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fi-shipto IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fi-ship_num IN FRAME frExplship
   NO-DISPLAY NO-ENABLE                                                 */
/* SETTINGS FOR FILL-IN fi-soid IN FRAME frExplship
   NO-DISPLAY NO-ENABLE                                                 */
/* SETTINGS FOR FILL-IN fi-state IN FRAME frExplship
   NO-DISPLAY NO-ENABLE                                                 */
/* SETTINGS FOR FILL-IN fi-zip IN FRAME frExplship
   NO-DISPLAY NO-ENABLE                                                 */
/* SETTINGS FOR FILL-IN fiCredStat IN FRAME frExplship
   NO-ENABLE                                                            */
ASSIGN
       fiCredStat:READ-ONLY IN FRAME frExplship        = TRUE.

/* SETTINGS FOR FILL-IN fiCurrency IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fiCurrencyLbl IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fiEstimatedProfit IN FRAME frExplship
   NO-ENABLE                                                            */
/* SETTINGS FOR FILL-IN fiInvoiceDateLabel IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fiInvPeriodText IN FRAME frExplship
   NO-ENABLE ALIGN-L                                                    */
/* SETTINGS FOR FILL-IN fiProNumberLbl IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fiReviewStatus IN FRAME frExplship
   NO-ENABLE                                                            */
ASSIGN
       fiReviewStatus:READ-ONLY IN FRAME frExplship        = TRUE.

/* SETTINGS FOR FILL-IN fiReviewStatusLbl IN FRAME frExplship
   NO-ENABLE ALIGN-L                                                    */
ASSIGN
       fiReviewStatusLbl:READ-ONLY IN FRAME frExplship        = TRUE.

/* SETTINGS FOR FILL-IN fistagingstatuslbl IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fiStatusLabel IN FRAME frExplship
   ALIGN-L                                                              */
/* SETTINGS FOR FILL-IN fiStatusText IN FRAME frExplship
   NO-ENABLE                                                            */
IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(wn-ship_details)
THEN wn-ship_details:HIDDEN = NO.

/* _RUN-TIME-ATTRIBUTES-END */
&ANALYZE-RESUME


/* Setting information for Queries and Browse Widgets fields            */

&ANALYZE-SUSPEND _QUERY-BLOCK BROWSE br-shipdetails
/* Query rebuild information for BROWSE br-shipdetails
     _START_FREEFORM
OPEN QUERY {&SELF-NAME} FOR EACH temp-ship-details.
     _END_FREEFORM
     _Query            is OPENED
*/  /* BROWSE br-shipdetails */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _QUERY-BLOCK FRAME frExplship
/* Query rebuild information for FRAME frExplship
     _TblList          = "PLATTE.BL-shipments_header"
     _Options          = "NO-LOCK"
     _Where[1]         = "RECID(bl-shipments_header) = ip-shiphead_rec"
     _Query            is OPENED
*/  /* FRAME frExplship */
&ANALYZE-RESUME





/* ************************  Control Triggers  ************************ */

&Scoped-define SELF-NAME wn-ship_details
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL wn-ship_details wn-ship_details
ON LEAVE OF wn-ship_details /* Staging Details */
DO:
  ASSIGN
    glByPassEntryTrigger = NO.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL wn-ship_details wn-ship_details
ON WINDOW-RESIZED OF wn-ship_details /* Staging Details */
DO:
  RUN ResizeWindow.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define BROWSE-NAME br-shipdetails
&Scoped-define SELF-NAME br-shipdetails
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL br-shipdetails wn-ship_details
ON MOUSE-SELECT-CLICK OF br-shipdetails IN FRAME frExplship
DO:
  /* Sets buttons for selected line */
  APPLY "ROW-ENTRY" TO br-shipdetails IN FRAME {&FRAME-NAME}.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL br-shipdetails wn-ship_details
ON MOUSE-SELECT-DBLCLICK OF br-shipdetails IN FRAME frExplship
DO:
  DEFINE VARIABLE rCurrentRowRecid AS RECID NO-UNDO. /* l-rec */
  DEFINE VARIABLE rNextRowid    AS ROWID NO-UNDO.    /* l-next-row */
  DEFINE VARIABLE iCurrentRow   AS INTEGER NO-UNDO INIT 0. /* i-curr-row */
  DEFINE VARIABLE iCount        AS INTEGER NO-UNDO INIT 0. /* l-rec-count */
  DEFINE VARIABLE lLastRow      AS LOGICAL NO-UNDO INIT FALSE. /* l-last */

  DEFINE VARIABLE lcTallyUOMCode       AS   CHARACTER               NO-UNDO.
  DEFINE VARIABLE lcTallyUOMPtrSysid   AS   CHARACTER               NO-UNDO INIT "".
  DEFINE VARIABLE liTallyUOMPtr        AS   INTEGER                 NO-UNDO INIT ?.
  DEFINE VARIABLE lRecChanged          AS   LOGICAL                 NO-UNDO INIT FALSE.
  DEFINE VARIABLE lCancel              AS   LOGICAL                 NO-UNDO INIT FALSE.
  DEFINE VARIABLE cTallyString         AS   CHARACTER               NO-UNDO.
  DEFINE VARIABLE dTallyQty            AS   DECIMAL                 NO-UNDO.
  DEFINE VARIABLE rRowid               AS   ROWID                   NO-UNDO.
  DEFINE VARIABLE dDummy               AS   DECIMAL                 NO-UNDO.
  DEFINE VARIABLE lChangeOK            AS   LOGICAL                 NO-UNDO.

  DEFINE BUFFER   buff-temp-ship       FOR  temp-ship-details.
  DEFINE BUFFER   bl-temp-ship-details FOR  temp-ship-details.


  IF bt-update_detail:VISIBLE   IN FRAME {&FRAME-NAME} = YES AND
     bt-update_detail:SENSITIVE IN FRAME {&FRAME-NAME} = YES AND
     glMoveDetail                                      = NO  THEN
  DO:
    IF g-context = "Display" THEN RETURN NO-APPLY.

    /* set the current row so we can find it again later */
    iCurrentRow = br-shipdetails:FOCUSED-ROW IN FRAME {&FRAME-NAME}.

    /* fetch the associated record for this row */
    IF br-shipdetails:FETCH-SELECTED-ROW(1) IN FRAME {&FRAME-NAME} THEN.

    ASSIGN
      rCurrentRowRecid = temp-ship-details.rec.

    /* see if more than one rec exists */
    FOR EACH buff-temp-ship NO-LOCK:
      iCount = iCount + 1.
      IF iCount > 1 THEN LEAVE.
    END.

    /* if we only have 1 rec, then no need setting next row */
    IF iCount < 2 THEN
      rNextRowid = ?.
    ELSE
    DO:
      /* set up the next row to display here before we process anything */
      FIND buff-temp-ship WHERE
           buff-temp-ship.rec = rCurrentRowRecid
           NO-LOCK NO-ERROR.

      FIND NEXT buff-temp-ship NO-LOCK NO-ERROR.
      /* if we find the next rec, then assign it */
      IF AVAILABLE buff-temp-ship THEN
        rNextRowid = ROWID(buff-temp-ship).
      ELSE
      DO:
        /* but if it wasn't found, it means the rec was for the last row so let's set the last flag to true */
        FIND FIRST buff-temp-ship NO-LOCK NO-ERROR.
        rNextRowid = ROWID(buff-temp-ship).
        lLastRow = TRUE.
      END.
    END.

    IF temp-ship-details.TYPE = "CM" THEN
    DO:
      RUN get_parameters
        (INPUT gcCategoryList[{&ITEM-sys-id}],
         INPUT temp-ship-details.item_ptr ).

      {&WINDOW-NAME}:SENSITIVE = NO.

      RUN sospecifystorage.p
        ( INPUT THIS-PROCEDURE,
          INPUT temp-ship-details.so_id_sysid,
          INPUT temp-ship-details.so_id,
          INPUT temp-ship-details.sequence,
          INPUT temp-ship-details.ship-num,
          INPUT 0,
          INPUT temp-ship-details.item_ptr_sysid,
          INPUT temp-ship-details.item_ptr,
          INPUT temp-ship-details.qty,
          INPUT temp-ship-details.qty,
          INPUT temp-ship-details.uom,
          INPUT temp-ship-details.uom_ptr_sysid,
          INPUT temp-ship-details.uom_ptr,
          INPUT temp-ship-details.tally_uom,
          INPUT temp-ship-details.tally_uom-sysid,
          INPUT temp-ship-details.tally_uom_ptr,
          INPUT g-tagcode,
          INPUT g-lotcode,
          INPUT g-contentcode,
          INPUT temp-ship-details.price,
          INPUT temp-ship-details.supp_rebate,
          INPUT glCustomerAcceptsBO,
          INPUT g-exact_commit,
          INPUT temp-ship-details.item_type,
          INPUT temp-ship-details.item,
          INPUT temp-ship-details.cStockingUom,
          INPUT temp-ship-details.cStockToPCCalc,
          INPUT temp-ship-details.cPieceRef,
          INPUT temp-ship-details.cThicknessUOM,
          INPUT temp-ship-details.cWidthUOM,
          INPUT temp-ship-details.cLengthUOM,
          INPUT temp-ship-details.piece_price_flag,
          INPUT temp-ship-details.price_uom_ptr_sysid,
          INPUT temp-ship-details.price_uom_ptr,
          INPUT temp-ship-details.cost,
          INPUT temp-ship-details.market_cost,
          INPUT temp-ship-details.return_to_stock,
          INPUT temp-ship-details.price_only_cm_flag,
          INPUT temp-ship-details.cm_reason,
          INPUT gcTallyMsg ).

      CURRENT-WINDOW = {&WINDOW-NAME}.
      CURRENT-WINDOW:SENSITIVE = YES.
      APPLY "ENTRY" TO CURRENT-WINDOW.

      ASSIGN
        grSpecifyCmtCurrentRowRecid = rCurrentRowRecid
        grSpecifyCmtNextRowid       = rNextRowid
        glSpecifyCmtLastRow         = lLastRow
        giSpecifyCmtCurrentRow      = iCurrentRow.

      RUN CallSpecifyCommitFinish
        ( INPUT 0,
          INPUT YES ).
    END.
    ELSE
    DO:
      /* Skip item types that do not affect inventory (Sundry) */
      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "DNAI" } THEN
      DO:
        RUN sysinfok.p
          (INPUT "item_type_dnai",
           INPUT "").
        RETURN NO-APPLY.
      END.

      ASSIGN
        glByPassEntryTrigger2 = YES.

      gcPostSpecifyCommitProcess = "CallSpecifyCommitFinish".

      RUN CallSpecifyCommit /*in explshipi.i*/
        ( INPUT  NO,
          INPUT  CURRENT-WINDOW,
          INPUT  g-cust_key,
          INPUT  giShiptoSeq,
          INPUT  gcSaleType,
          INPUT  gdDetailTallyQty,
          INPUT  temp-ship-details.qty,
          INPUT  rCurrentRowRecid,
          INPUT  rNextRowid,
          INPUT  lLastRow,
          INPUT  iCurrentRow ).
    END.

  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL br-shipdetails wn-ship_details
ON ROW-DISPLAY OF br-shipdetails IN FRAME frExplship
DO:
  DEFINE VARIABLE dConvFactor      AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dPCPriceOrCost   AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE cErrorMsg        AS   CHARACTER                NO-UNDO.
  DEFINE VARIABLE lSingleDim       AS   LOGICAL                  NO-UNDO.
  DEFINE VARIABLE cDimension       AS   CHARACTER                NO-UNDO.
  DEFINE VARIABLE lSinglePrice     AS   LOGICAL                  NO-UNDO.
  DEFINE VARIABLE dAvgPrice        AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dAvgSuppRebate   AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dDummy           AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dThickness       AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dWidth           AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dLength          AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dAvgOrigPrice    AS   DECIMAL                  NO-UNDO.
  DEFINE VARIABLE cOrigPriceUom    AS   CHARACTER                NO-UNDO.


  FIND CURRENT temp-ship-details EXCLUSIVE-LOCK.

  ASSIGN
    temp-ship-details.disp_price     = temp-ship-details.price
    temp-ship-details.disp_price-uom = temp-ship-details.price-uom.

  IF temp-ship-details.cost_desig = "A"  AND 
     goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_average_cost") THEN
    ASSIGN
      temp-ship-details.disp_cost      = temp-ship-details.cost
      temp-ship-details.dispgm         = temp-ship-details.gm
      temp-ship-details.dispcostdesig  = temp-ship-details.cost_desig.
  ELSE
  IF temp-ship-details.cost_desig = "M"  AND 
     goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_market_cost") THEN
    ASSIGN
      temp-ship-details.disp_cost      = temp-ship-details.cost
      temp-ship-details.dispgm         = temp-ship-details.gm
      temp-ship-details.dispcostdesig  = temp-ship-details.cost_desig.

  IF temp-ship-details.piece_price_flag = YES AND
     ( {invitemtype.i &cItemType        = temp-ship-details.item_type
                      &cProcessContext  = "PCValidUOM" } ) THEN
  DO:
    RUN get_twl.p ON SERVER g-AppSrvr
      ( INPUT  "All",
        INPUT  temp-ship-details.so_id_sysid,
        INPUT  temp-ship-details.so_id,
        INPUT  temp-ship-details.sequence,
        INPUT  "SO",
        INPUT  "",
        INPUT  "",
        INPUT  ?,
        OUTPUT lSingleDim,
        OUTPUT cDimension,
        OUTPUT lSinglePrice,
        OUTPUT dAvgPrice,
        OUTPUT dAvgSuppRebate,
        OUTPUT dDummy,
        OUTPUT dDummy,
        OUTPUT dAvgOrigPrice,
        OUTPUT cOrigPriceUom ).

    IF cDimension <> ""         AND
       cDimension <> "00X00X00" AND
       cDimension <> "Various"  THEN
    DO:
      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "ZeroThickness"} THEN
        ASSIGN
          dThickness = 0
          dWidth     = DECIMAL(ENTRY(1,cDimension,"X"))
          dLength    = DECIMAL(ENTRY(2,cDimension,"X")).
      ELSE
        ASSIGN
          dThickness = DECIMAL(ENTRY(1,cDimension,"X"))
          dWidth     = DECIMAL(ENTRY(2,cDimension,"X"))
          dLength    = DECIMAL(ENTRY(3,cDimension,"X")).

      /* PC Price Calc: Inputs are a little backwards, but should be. WMB */
      RUN p_convertqty
        ( INPUT        gcCategoryList[{&item_uomconv-sys-id}],
          INPUT        gcCategoryList[{&item_supplier-sys-id}],
          INPUT        temp-ship-details.item_type,
          INPUT        temp-ship-details.item_ptr_sysid,
          INPUT        temp-ship-details.item_ptr,
          INPUT        temp-ship-details.item,
          INPUT        temp-ship-details.cStockingUOM,
          INPUT        temp-ship-details.cPieceRef,
          INPUT        temp-ship-details.cStockToPCCalc,
          INPUT        dThickness,
          INPUT        temp-ship-details.cThicknessUOM,
          INPUT        dWidth,
          INPUT        temp-ship-details.cWidthUOM,
          INPUT        dLength,
          INPUT        temp-ship-details.cLengthUOM,
          INPUT        (temp-ship-details.price / temp-ship-details.price_conv),
          INPUT        temp-ship-details.cPieceRef,
          INPUT        temp-ship-details.cStockingUom,
          INPUT        0,
          INPUT        "",
          INPUT        ?,
          INPUT        "To Stocking",
          INPUT-OUTPUT dConvFactor,
                OUTPUT dPCPriceOrCost,
                OUTPUT cErrorMsg ).

      IF cErrorMsg <> "" THEN
        MESSAGE cErrorMsg VIEW-AS ALERT-BOX WARNING BUTTONS OK.

      ASSIGN
        temp-ship-details.disp_price     = dPCPriceOrCost
        temp-ship-details.disp_price-uom = temp-ship-details.cPieceRef.

      /* PC Price Calc: Inputs are a little backwards, but should be. WMB */
      RUN p_convertqty
        ( INPUT        gcCategoryList[{&item_uomconv-sys-id}],
          INPUT        gcCategoryList[{&item_supplier-sys-id}],
          INPUT        temp-ship-details.item_type,
          INPUT        temp-ship-details.item_ptr_sysid,
          INPUT        temp-ship-details.item_ptr,
          INPUT        temp-ship-details.item,
          INPUT        temp-ship-details.cStockingUOM,
          INPUT        temp-ship-details.cPieceRef,
          INPUT        temp-ship-details.cStockToPCCalc,
          INPUT        dThickness,
          INPUT        temp-ship-details.cThicknessUOM,
          INPUT        dWidth,
          INPUT        temp-ship-details.cWidthUOM,
          INPUT        dLength,
          INPUT        temp-ship-details.cLengthUOM,
          INPUT        (temp-ship-details.disp_cost / temp-ship-details.cost_conv),
          INPUT        temp-ship-details.cPieceRef,
          INPUT        temp-ship-details.cStockingUom,
          INPUT        0,
          INPUT        "",
          INPUT        ?,
          INPUT        "To Stocking",
          INPUT-OUTPUT dConvFactor,
                OUTPUT dPCPriceOrCost,
                OUTPUT cErrorMsg ).

      IF cErrorMsg <> "" THEN
        MESSAGE cErrorMsg VIEW-AS ALERT-BOX WARNING BUTTONS OK.

      temp-ship-details.disp_cost = dPCPriceOrCost.

    END.

  END.

  FIND CURRENT temp-ship-details NO-LOCK.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL br-shipdetails wn-ship_details
ON ROW-ENTRY OF br-shipdetails IN FRAME frExplship
DO:
  
  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} > 0 THEN
  DO:
    IF NUM-RESULTS("br-shipdetails") > 0 THEN
    DO:
      IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} < 2 THEN
      DO:
        IF br-shipdetails:DESELECT-ROWS()      IN FRAME {&FRAME-NAME} THEN.
      END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} < 2 THEN */

      IF br-shipdetails:SELECT-FOCUSED-ROW() IN FRAME {&FRAME-NAME} THEN.
    END. /* IF NUM-RESULTS("br-shipdetails") > 0 THEN */

    IF AVAILABLE temp-ship-details THEN
    DO:
      ASSIGN
        grCurrentRECID   = RECID(temp-ship-details)
        g-detail_qty     = DECIMAL(temp-ship-details.qty)
        gdDetailTallyQty = DECIMAL(temp-ship-details.dDisplayQty).
      
      grLineUpdateRECID = grCurrentRECID. // kem - change on double click
      RUN check_for_tally_calc.

      RUN set_message_bmp
        ( INPUT temp-ship-details.sequence ).
    END.
    ELSE
      RUN set_message_bmp
        ( INPUT 0 ).

  END.
  ELSE
    RUN set_message_bmp
      ( INPUT 0 ).

  RUN LoadLineUpdate.
  
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL br-shipdetails wn-ship_details
ON ROW-LEAVE OF br-shipdetails IN FRAME frExplship
DO:
  bt-tallycalc:VISIBLE = FALSE.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bt-delete
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bt-delete wn-ship_details
ON CHOOSE OF bt-delete IN FRAME frExplship /* Delete */
DO:
  IF ClearContractBillAlloc() THEN.

  RUN ChooseBtDelete.

  IF glContractBilling = YES THEN
  DO:
    IF AllocateContractBill() THEN.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bt-next
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bt-next wn-ship_details
ON CHOOSE OF bt-next IN FRAME frExplship
DO:
  DEFINE VARIABLE lContinue AS LOGICAL     NO-UNDO.

  RUN CheckChanges
    (OUTPUT lContinue).

  IF NOT lContinue THEN
    RETURN NO-APPLY.

  RUN getRecord IN ip-calling_module
    (INPUT "Next",
     INPUT ip-shiphead_rec,
     OUTPUT lContinue).

  IF lContinue = NO THEN
  DO:
    APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
    RETURN NO-APPLY.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bt-prev
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bt-prev wn-ship_details
ON CHOOSE OF bt-prev IN FRAME frExplship
DO:
  DEFINE VARIABLE lContinue AS LOGICAL     NO-UNDO.

  RUN CheckChanges
    (OUTPUT lContinue).

  IF NOT lContinue THEN
    RETURN NO-APPLY.

  RUN getRecord IN ip-calling_module
    (INPUT "Prev",
     INPUT ip-shiphead_rec,
     OUTPUT lContinue).

  IF lContinue = NO THEN
  DO:
    APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
    RETURN NO-APPLY.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bt-tallycalc
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bt-tallycalc wn-ship_details
ON CHOOSE OF bt-tallycalc IN FRAME frExplship /* Button 3 */
DO:
  DEFINE VARIABLE l-copytallymsg      AS  CHARACTER NO-UNDO INIT "" .
  DEFINE VARIABLE l-before_qty        AS  INTEGER   NO-UNDO.
  DEFINE VARIABLE lCancel             AS  LOGICAL   NO-UNDO.
  DEFINE VARIABLE dNewQty             AS  DECIMAL   NO-UNDO.
  DEFINE VARIABLE dNewPrice           AS  DECIMAL   NO-UNDO.
  DEFINE VARIABLE dNewSuppRebate      AS  DECIMAL   NO-UNDO.
  DEFINE VARIABLE dNewMarketCost      AS  DECIMAL   NO-UNDO.
  DEFINE VARIABLE iRow                AS  INTEGER   NO-UNDO INIT 1.
  DEFINE VARIABLE rNextRow            AS  ROWID     NO-UNDO.
  DEFINE VARIABLE lLast               AS  LOGICAL   NO-UNDO.
  DEFINE VARIABLE rTempShipRowID      AS  ROWID     NO-UNDO.
  DEFINE VARIABLE dDummy              AS  DECIMAL   NO-UNDO.
  DEFINE VARIABLE dTallyQty           AS  DECIMAL   NO-UNDO.

  DEFINE BUFFER   bfTempShip          FOR temp-ship-details.
  DEFINE BUFFER   bl-so_detail        FOR so_detail.
  DEFINE BUFFER   bl-shipments_detail FOR shipments_detail.


  IF NOT AVAILABLE temp-ship-details THEN
    FIND FIRST temp-ship-details WHERE
               RECID(temp-ship-details) = grCurrentRECID
               NO-LOCK NO-ERROR.

  IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                    &cProcessContext = "LumberItem"} THEN
  DO:
    IF ClearContractBillAlloc() THEN.

    RUN Callshiptally /*in explshipi.i*/
      (INPUT glTransferOrder,
       INPUT glCustomerAcceptsBO,
       INPUT g-cust_key,
       INPUT giShiptoSeq,
       INPUT gcSaleType,
       INPUT glAffectInv,
       INPUT gcAutoPOType,
       INPUT YES, /*allow UI*/
       INPUT "explship",
       INPUT-OUTPUT gcTallyMsg,
             OUTPUT dNewQty,
             OUTPUT dNewPrice,
             OUTPUT dNewSuppRebate,
             OUTPUT dNewMarketCost,
             OUTPUT lCancel ).

    IF glContractBilling = YES THEN
    DO:
      IF AllocateContractBill() THEN.
    END.

    IF lCancel = FALSE THEN
    DO:
      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "SheetGoodOnly"} THEN
      DO:
        RUN gettlyqty.p ON SERVER g-AppSrvr
          ( INPUT  {getagilprop.i &PropList="'currentBranch'":U},
            INPUT  temp-ship-details.type,
            INPUT  temp-ship-details.so_id_sysid,
            INPUT  temp-ship-details.so_id,
            INPUT  temp-ship-details.sequence,
            INPUT  temp-ship-details.ship-num,
            INPUT  dNewQty,
            INPUT  temp-ship-details.cStockingUom,
            INPUT  temp-ship-details.tally_uom,
            INPUT  "From Stocking",
            OUTPUT dTallyQty,
            OUTPUT dDummy,
            OUTPUT dDummy,
            OUTPUT dDummy ).

        ASSIGN
          temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING(dTallyQty).
      END.
      ELSE
        ASSIGN
          temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING(dNewQty).

      ASSIGN
        temp-ship-details.qty         = dNewQty
        g-detail_qty                  = dNewQty
        gdDetailTallyQty              = DECIMAL(temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails)
        temp-ship-details.dDisplayQty = DECIMAL(temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails)
        temp-ship-details.price       = dNewPrice
        temp-ship-details.supp_rebate = dNewSuppRebate
        temp-ship-details.market_cost = dNewMarketCost
        g-qty_change_made             = TRUE.

      ASSIGN
        rTempShipRowID = ROWID(temp-ship-details).

      /* if we only have 1 rec, then no need setting next row */
      IF NUM-RESULTS("br-shipdetails") < 2 THEN
        rNextRow = ?.
      ELSE
      DO:
        /* set up the next row to display here before we process anything */
        FIND bfTempShip WHERE ROWID(bfTempShip) = rTempShipRowID NO-LOCK NO-ERROR.

        FIND NEXT bfTempShip NO-LOCK NO-ERROR.

        /* if we find the next rec, then assign it */
        IF AVAILABLE bfTempShip THEN
          rNextRow = ROWID(bfTempShip).
        ELSE
          /* but if it wasn't found, it means the rec was for the last row so let's set the last flag to true */
          ASSIGN
            rNextRow = rTempShipRowID
            lLast    = TRUE.
      END.

      {waiton.i}
      RUN modify-temp
        ( INPUT grCurrentRECID,
          INPUT YES ).
      {waitoff.i}

      RUN open-query.

      IF NUM-RESULTS("br-shipdetails") > 0 THEN
      DO:
        IF br-shipdetails:DESELECT-ROWS() THEN.

        FIND bfTempShip WHERE ROWID(bfTempShip) = rNextRow NO-LOCK NO-ERROR.

        IF AVAILABLE bfTempShip THEN
        DO:
          IF lLast = NO THEN
            iRow = iRow + 1.

          br-shipdetails:SET-REPOSITIONED-ROW(iRow, "ALWAYS") IN FRAME {&FRAME-NAME}.
          REPOSITION br-shipdetails TO ROWID rNextRow.
          IF br-shipdetails:SELECT-FOCUSED-ROW() THEN.
        END.

        APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
        APPLY "ROW-ENTRY" TO br-shipdetails.
      END.

      RETURN NO-APPLY.
    END.

  END.
  ELSE
  DO:
    ASSIGN
        l-copytallymsg = gcTallyMsg
        l-before_qty   = g-tally_qty.

    GET CURRENT br-shipdetails NO-LOCK.

    RUN tallycal.w
        (INPUT        temp-ship-details.item_ptr,
         INPUT        temp-ship-details.item_ptr_sysid,
         INPUT        THIS-PROCEDURE,
         INPUT        YES,                    /*save/update/create required */
         INPUT        "SO",                   /*type*/
         INPUT        temp-ship-details.so_id_sysid,   /*tran_id-sys-id*/
         INPUT        temp-ship-details.so_id,         /*tran_id*/
         INPUT        temp-ship-details.sequence,      /*tran_seq*/
         INPUT        temp-ship-details.ship-num,      /*shipment num*/
         INPUT        0,                               /*pick id*/
         INPUT        5,
         INPUT        45,
         INPUT        NO,
         INPUT        NO,
         INPUT        ?,
         INPUT-OUTPUT gcTallyMsg,
         OUTPUT       g-tally_qty).

    IF temp-ship-details.type = "CM" THEN
      ASSIGN
        g-tally_qty = ABS(g-tally_qty) * -1.

    ASSIGN
      glForceAutoHndl = NO.

    /* If quantity didn't change, but tally message did check if SO update is necessary. */
    IF l-copytallymsg <> gcTallyMsg  THEN
    DO:
      ASSIGN
        glForceAutoHndl = YES.

      IF l-before_qty = g-tally_qty THEN
      DO:
        FOR FIRST bl-shipments_detail WHERE
                  RECID(bl-shipments_detail) = temp-ship-details.rec
                  NO-LOCK,
            FIRST bl-so_detail WHERE
                  bl-so_detail.system_id   = temp-ship-details.so_id_sysid AND
                  bl-so_detail.so_id       = temp-ship-details.so_id AND
                  bl-so_detail.sequence    = temp-ship-details.sequence
                  NO-LOCK:

          /* If shipment qty matches detail overall qty apply tally calc message from shipment to detal */
          IF ABS(bl-shipments_detail.qty - (bl-so_detail.qty_ordered * bl-so_detail.disp_qty_conv)) <= giQtyDeleteThreshold THEN
          DO:
            RUN invtallycalc.p
              ( INPUT        NO,
                INPUT        "CREATE",                      /*function    */
                INPUT        YES,                           /*use tally string to save information, only useful on "CREATE"*/
                INPUT        NO,                            /*requires BF quantity as output */
                INPUT        temp-ship-details.so_id_sysid, /*tran_sysid  */
                INPUT        "SO",                          /*tran_type   */
                INPUT        temp-ship-details.so_id,       /*tran_id     */
                INPUT        temp-ship-details.sequence,    /*tran_seq    */
                INPUT        0,                             /*shipment num*/
                INPUT        0,                             /*pick_id     */
                INPUT        0,                             /*thickness   */
                INPUT        0,                             /*width       */
                INPUT        0,                             /*length      */
                INPUT        0,                             /*piece count */
                INPUT        0,                             /*quantity    */
                INPUT-OUTPUT gcTallymsg,                    /*tally string*/
                      OUTPUT dDummy ).                      /*tally quantity*/
          END.
        END.
      END. /* FOR FIRST bl-shipments_detail WHERE */

      IF glAffectInv = NO THEN
      DO:
        FOR FIRST bl-so_detail WHERE
                  bl-so_detail.system_id   = temp-ship-details.so_id_sysid AND
                  bl-so_detail.so_id       = temp-ship-details.so_id AND
                  bl-so_detail.sequence    = temp-ship-details.sequence
                  NO-LOCK,
            FIRST po_detail WHERE
                  po_detail.system_id = bl-so_detail.linked_tran_sysid AND
                  po_detail.po_id     = bl-so_detail.linked_tran_id AND
                  po_detail.sequence  = bl-so_detail.linked_tran_seq
                  NO-LOCK:

          /* If item_on_order qty matches detail overall qty apply tally calc message from PO to detail */
          IF ABS((po_detail.qty_ordered * po_detail.disp_qty_conv) - (bl-so_detail.qty_ordered * bl-so_detail.disp_qty_conv)) <= giQtyDeleteThreshold THEN
          DO:
            RUN invtallycalc.p
              ( INPUT        NO,
                INPUT        "CREATE",                      /*function    */
                INPUT        YES,                           /*use tally string to save information, only useful on "CREATE"*/
                INPUT        NO,                            /*requires BF quantity as output */
                INPUT        bl-so_detail.linked_tran_sysid, /*tran_sysid  */
                INPUT        "PO",                          /*tran_type   */
                INPUT        bl-so_detail.linked_tran_id,   /*tran_id     */
                INPUT        bl-so_detail.linked_tran_seq,  /*tran_seq    */
                INPUT        0,                             /*shipment num*/
                INPUT        0,                             /*pick_id     */
                INPUT        0,                             /*thickness   */
                INPUT        0,                             /*width       */
                INPUT        0,                             /*length      */
                INPUT        0,                             /*piece count */
                INPUT        0,                             /*quantity    */
                INPUT-OUTPUT gcTallymsg,                    /*tally string*/
                      OUTPUT dDummy ).                      /*tally quantity*/
          END.
        END.
      END.
    END. /* IF l-before_qty = g-tally_qty AND */

    /* =? means tally calculator was cancelled =0 could be lines were deleted*/
    IF (g-tally_qty <> ? AND g-tally_qty <> 0) OR
       (g-tally_qty = 0 AND l-copytallymsg <> "") THEN
    DO:
      IF temp-ship-details.qty <> (g-tally_qty / temp-ship-details.disp_qty_conv) THEN
        ASSIGN
          glForceAutoHndl = YES.

      ASSIGN
        temp-ship-details.qty = (g-tally_qty / temp-ship-details.disp_qty_conv)
        temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING((g-tally_qty / temp-ship-details.disp_qty_conv)).
    END.

    APPLY "LEAVE" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.

    IF g-tally_qty = ?  THEN
      ASSIGN g-tally_qty = l-before_qty.
  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME bt-update_detail
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL bt-update_detail wn-ship_details
ON CHOOSE OF bt-update_detail IN FRAME frExplship /* Update */
DO:
  DEFINE VARIABLE l-rec                AS  RECID      NO-UNDO.
  DEFINE VARIABLE l-curr-row           AS  INTEGER    NO-UNDO INIT 1.
  DEFINE VARIABLE cFunction            AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE iPrevPOID            AS  INTEGER    NO-UNDO INIT -1.
  DEFINE VARIABLE cSeqList             AS  CHARACTER  NO-UNDO INIT "".
  DEFINE VARIABLE cSOIDsysid           AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE iSOID                AS  INTEGER    NO-UNDO.
  DEFINE VARIABLE iShipNum             AS  INTEGER    NO-UNDO.
  DEFINE VARIABLE iCtr                 AS  INTEGER    NO-UNDO.
  DEFINE VARIABLE lReturn              AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE lCancel              AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE iNumRows             AS  INTEGER    NO-UNDO.
  DEFINE VARIABLE lBuildShipByPO       AS  LOGICAL    NO-UNDO INIT NO.
  DEFINE VARIABLE cMessage             AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE lDummy               AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE lOKtoContinue        AS  LOGICAL    NO-UNDO.

  DEFINE BUFFER   bl-temp-ship-details FOR temp-ship-details.


  /* Make sure leave trigger fires from widget we just left */
  APPLY "ENTRY":U TO bt-update_detail.

  IF glMoveDetail THEN
  DO:
    IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
    DO:
      RUN sysinfok.p
        ( INPUT "select_rows",
          INPUT "move" ).
      RETURN NO-APPLY.
    END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN */
    ELSE
    DO:
      ASSIGN
        lBuildShipByPO = NO.

      FOR FIRST param_so WHERE
                param_so.system_id = gcCategoryList[{&param_so-sys-id}]
                NO-LOCK:
        ASSIGN
          lBuildShipByPO = param_so.direct_ship_by_po.
      END.

      DO iCtr = 1 TO br-shipdetails:NUM-SELECTED-ROWS:

        ASSIGN
          lReturn = br-shipdetails:FETCH-SELECTED-ROW(iCtr) NO-ERROR.

        IF NOT AVAILABLE temp-ship-details THEN
          NEXT.

        IF temp-ship-details.shipping_rule = "Ship Direct" THEN
        DO:
          IF temp-ship-details.contract_prices_locked = YES THEN
          DO:
            RUN sysinfok.p
              (INPUT "contractpriceslocked3",
               INPUT "Quantity|moved").

            RETURN.
          END.

          FIND FIRST tt-ship-details-original WHERE
                     tt-ship-details-original.rShipDetRecid = temp-ship-details.rec
                     NO-LOCK.

          EMPTY TEMP-TABLE ttTallyChange.

          /* We do not need ttTallyChange here because if the line has been at
             least partially staged, picked, or invoiced we don't allow this change */
          RUN chgreqso.p
            ( INPUT  gscSessionContextId,
              INPUT  "SO",
              INPUT  temp-ship-details.so_id,
              INPUT  temp-ship-details.so_id_sysid,
              INPUT  temp-ship-details.sequence,
              INPUT  "Move Item",
              INPUT  "", /* called from */
              INPUT  0, /* orig tot qty */
              INPUT  0,
              INPUT  ABS((tt-ship-details-original.orig-stock-qty / temp-ship-details.disp_qty_conv)),
              INPUT  temp-ship-details.uom,
              INPUT  temp-ship-details.uom_ptr,
              INPUT  temp-ship-details.uom_ptr_sysid,
              INPUT  "",
              INPUT  0,
              INPUT  0,
              INPUT  NO,
              INPUT  TABLE ttTallyChange,
              OUTPUT cMessage,
              OUTPUT lDummy,
              OUTPUT lOKtoContinue,
              OUTPUT lDummy ).

          IF cMessage <> "" THEN
          DO:
            MESSAGE cMessage
              VIEW-AS ALERT-BOX ERROR BUTTONS OK.
          END. /* IF cMessage <> "" THEN */

          IF lOKtoContinue = NO THEN
          DO:
            ASSIGN
              lReturn = br-shipdetails:FETCH-SELECTED-ROW(br-shipdetails:NUM-SELECTED-ROWS) NO-ERROR.

            RETURN NO-APPLY.
          END. /* IF lOKtoContinue = NO THEN */

        END. /* IF temp-ship-details.shipping_rule = "Ship Direct" THEN */

        ASSIGN
          cSOIDsysid = temp-ship-details.so_id_sysid
          iSOID      = temp-ship-details.so_id
          iShipNum   = temp-ship-details.ship-num
          cSeqList   = cSeqList + STRING(temp-ship-details.sequence) + CHR(3).

        /* If we build shipments by PO then don't allow multiple lines with different PO number */
        IF lBuildShipByPO = YES THEN
        DO:
          IF iPrevPOID = -1 THEN
            ASSIGN
              iPrevPOID = temp-ship-details.linked_po.
          ELSE
            IF iPrevPOID <> temp-ship-details.linked_po THEN
            DO:
              RUN sysinfok.p
                ( INPUT "movemultiposhipmt",
                  INPUT "" ).

              ASSIGN
                lReturn = br-shipdetails:FETCH-SELECTED-ROW(br-shipdetails:NUM-SELECTED-ROWS) NO-ERROR.

              RETURN NO-APPLY.
            END.
        END. /* IF lBuildShipByPO = YES THEN */

      END. /* DO iCtr... */

      ASSIGN
        cSeqList = RIGHT-TRIM(cSeqList,CHR(3))
        iNumRows = 0.

      FOR EACH bl-temp-ship-details NO-LOCK WHILE iNumRows < 2:
        iNumRows = iNumRows + 1.
      END.

      glByPassEntryTrigger2 = YES.

      CURRENT-WINDOW:SENSITIVE = NO.

      RUN moveshipdtl.w
        ( INPUT  lBuildShipByPO,
          INPUT  iPrevPOID,
          INPUT  cSOIDsysid,
          INPUT  iSOID,
          INPUT  iShipNum,
          INPUT  cSeqList,
          INPUT  (IF iNumRows > 1 THEN YES ELSE NO),
          OUTPUT lCancel ).

      CURRENT-WINDOW = {&WINDOW-NAME}.
      CURRENT-WINDOW:SENSITIVE = YES.
      APPLY "ENTRY" TO CURRENT-WINDOW.

      glByPassEntryTrigger2 = NO.

      IF lCancel = YES THEN
        RETURN NO-APPLY.

      RUN Build_Screen
        ( INPUT ip-shiphead_rec,
          INPUT ip-calling_module,
          INPUT ip-context ).
    END. /* IF br-shipdetails:NUM-SELECTED-ROWS...ELSE */
  END.
  ELSE
  DO:
    IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
    DO:
      RUN sysinfok.p
        ( INPUT "select_rows",
          INPUT "update" ).
      RETURN NO-APPLY.
    END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN */

    IF br-shipdetails:NUM-SELECTED-ROWS > 1 THEN
    DO:
      RUN sysinfok.p
        ( INPUT "onerowfunc",
          INPUT "" ).

      RETURN NO-APPLY.
    END.

    APPLY "MOUSE-SELECT-DBLCLICK" TO br-shipdetails.

  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btAdd
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btAdd wn-ship_details
ON CHOOSE OF btAdd IN FRAME frExplship /* Add */
DO:
  DEFINE VARIABLE hProcedureHandle  AS HANDLE      NO-UNDO.
  DEFINE VARIABLE lFound            AS LOGICAL     NO-UNDO INIT NO.
  DEFINE VARIABLE hWind             AS HANDLE      NO-UNDO.
  DEFINE VARIABLE hTempHandle       AS HANDLE      NO-UNDO.
  DEFINE VARIABLE cCalledBy         AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE cBranchID         AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE cErrorMsg         AS CHARACTER   NO-UNDO.

  DEFINE BUFFER bfso_header FOR so_header.


  FOR FIRST transfer_header WHERE
            transfer_header.so_id_sysid = gcCategoryList[{&so_header-sys-id}] AND
            transfer_header.so_id       = giSOID
            NO-LOCK:

    RUN getBranchID
      ( INPUT  transfer_header.requesting_branch,
        OUTPUT cBranchID ).

    FOR FIRST transfer_detail WHERE
              transfer_detail.so_id_sysid = gcCategoryList[{&so_header-sys-id}] AND
              transfer_detail.so_id       = giSOID
              NO-LOCK,
        FIRST bfso_header WHERE
              bfso_header.system_id = transfer_detail.req_tran_id_sysid AND
              bfso_header.so_id     = transfer_detail.req_tran_id       AND
              bfso_header.so_status = "I"
              NO-LOCK:
      RUN sysinfok.p
        (INPUT "itemcannotaddtoshipso",
         INPUT "invoiced").
      RETURN.
    END. /* FOR FIRST transfer_detail WHERE... */
  END. /* FOR FIRST transfer_header WHERE... */
  
  IF CAN-FIND( FIRST print_transaction WHERE
                     print_transaction.system_id = gcCategoryList[{&print_transaction-sys-id}] AND
                     print_transaction.tran_type = "Delivery Ticket" AND
                     print_transaction.tran_id   = (STRING(giSOID, "{&gcFullTranID}") + "-" + STRING(INTEGER(fi-ship_num:SCREEN-VALUE), "999"))
                     NO-LOCK ) THEN
  DO:
    RUN sysinfok.p
      (INPUT "addqtydeliveryticketprinted",
       INPUT "").
  END.

  RUN pickrvw2.p ON SERVER g-AppSrvrSF
    ( INPUT  gscSessionContextID,
      INPUT  gcCategoryList[{&so_header-sys-id}],
      INPUT  "SO",
      INPUT  giSOID,
      OUTPUT TABLE tttran_header,
      OUTPUT TABLE ttCustInfo,
      OUTPUT cErrorMsg ).

  IF cErrorMsg <> "" THEN
    MESSAGE cErrorMsg VIEW-AS ALERT-BOX ERROR BUTTONS OK.

  FIND FIRST tttran_header NO-LOCK NO-ERROR.
  FIND FIRST ttCustInfo    NO-LOCK NO-ERROR.

  IF NOT AVAILABLE tttran_header OR
     NOT AVAILABLE ttCustInfo    THEN
    RETURN.

  /* get the handle of the first procedure */
  ASSIGN
    ghUsodetalHdl    = ?
    hProcedureHandle = SESSION:FIRST-PROCEDURE.

  /* traverse the chain of procedures */
  TestHandle:
  DO WHILE VALID-HANDLE(hProcedureHandle) AND lFound = NO:

    IF VALID-HANDLE(hProcedureHandle) THEN
    DO:

      IF hProcedureHandle:FILE-NAME = "usodetal.w" THEN
      DO:
        ASSIGN hWind = hProcedureHandle:CURRENT-WINDOW NO-ERROR.

        IF NOT VALID-HANDLE(hWind) THEN
        DO:
          ASSIGN
            hTempHandle = hProcedureHandle.

          ASSIGN
            hProcedureHandle = hProcedureHandle:NEXT-SIBLING.

          DELETE PROCEDURE hTempHandle NO-ERROR.
          hTempHandle = ?.

          NEXT TestHandle.
        END.

        ASSIGN
          ghUsodetalHdl = hProcedureHandle
          lFound        = YES.

      END.

      IF lFound = NO THEN
        ASSIGN hProcedureHandle = hProcedureHandle:NEXT-SIBLING.

    END.

  END.

  DELETE PROCEDURE ghLinentryProc NO-ERROR.

  ASSIGN
    ghLinentryProc      = ?
    glEnabled           = NO
    gcDefaultGroup      = ttTran_header.default_group_id
    glUseGroupAsDefault     = IF ttTran_header.default_group_id <> "" THEN YES ELSE NO
    gcDefaultShipGroup      = ttTran_header.default_shipping_group_id
    glUseShipGroupAsDefault = IF ttTran_header.default_shipping_group_id <> "" THEN YES ELSE NO.

  RUN linentry.p PERSISTENT SET ghLinentryProc.

  IF VALID-HANDLE( ghUsodetalHdl ) THEN
  DO:
    /* line entry window is running already, enter through "another-detail" */
    /*DO NOT ASSUME l-usodetal_hdl is valid after this call. If another window
        has pending changes, it won't be*/
    RUN another_detail IN ghUsodetalHdl
      ( INPUT THIS-PROCEDURE,
        INPUT NO, /* glIsWindowViewOnly */
        INPUT {&WINDOW-NAME},
        INPUT g-allwin-local-profile,
        INPUT ?,
        INPUT ghLinentryProc,
        INPUT NO,
        INPUT TABLE ttCustInfo,
        INPUT TABLE ttTran_header ).

    IF VALID-HANDLE(ghUsodetalHdl)  THEN
      RUN get_screen_value IN ghUsodetalHdl
        ( INPUT  "called_by",
          OUTPUT cCalledBy ).

    IF STRING(THIS-PROCEDURE) <> cCalledBy THEN
      RETURN NO-APPLY.
  END.
  ELSE
  DO:
    /* start up line entry window from scratch */
    RUN usodetal.w PERSISTENT SET ghUsodetalHdl
      ( INPUT THIS-PROCEDURE,
        INPUT {&WINDOW-NAME},
        INPUT ghLinentryProc,
        INPUT NO, /* glIsWindowViewOnly */
        INPUT ?,
        INPUT TABLE ttCustInfo,
        INPUT TABLE ttTran_header ).
  END.

  RUN SetShipInfo IN ghUsodetalHdl
    ( INPUT INTEGER(fi-ship_num:SCREEN-VALUE),
      INPUT 0 ).

  ASSIGN
    {&WINDOW-NAME}:SENSITIVE = NO.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btCancelStaging
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btCancelStaging wn-ship_details
ON CHOOSE OF btCancelStaging IN FRAME frExplship /* Cancel Staging */
DO:
  RUN CancelShipment.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btCustInfo
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btCustInfo wn-ship_details
ON CHOOSE OF btCustInfo IN FRAME frExplship /* View Customer Info */
DO:
  RUN custinfo.w PERSISTENT
    ( INPUT THIS-PROCEDURE,
      INPUT "explship.w",
      INPUT fi-cust_id:SCREEN-VALUE,
      INPUT INT(fi-shipto:SCREEN-VALUE),
      INPUT 3,
      INPUT giBillToSeq ).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btDefault
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btDefault wn-ship_details
ON CHOOSE OF btDefault IN FRAME frExplship /* Default */
DO:
  ASSIGN
    cbInvoiceYear  :SCREEN-VALUE = STRING(giCurrentYear)
    cbInvoicePeriod:SCREEN-VALUE = ENTRY(giCurrentPeriod, cbInvoicePeriod:LIST-ITEMS).

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btDispatch
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btDispatch wn-ship_details
ON CHOOSE OF btDispatch IN FRAME frExplship
DO:
  RUN runBtDispatch.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btDisplayOrder
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btDisplayOrder wn-ship_details
ON CHOOSE OF btDisplayOrder IN FRAME frExplship
DO:
  common.Transaction:OpenTransaction(
    INPUT gcCategoryList[{&so_header-sys-id}],
    INPUT so_header.so_id,
    INPUT {getagilprop.i &PropList="'currentBranch'":U},
    INPUT "SO",
    INPUT 0,
    INPUT YES,
    INPUT "",
    INPUT "",
    INPUT THIS-PROCEDURE).

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btDriverLoc
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btDriverLoc wn-ship_details
ON CHOOSE OF btDriverLoc IN FRAME frExplship
DO:
  DEFINE VARIABLE rRecid        AS RECID       NO-UNDO.
  DEFINE VARIABLE lContinue     AS LOGICAL     NO-UNDO.


  RUN luser-ct.w
    ( INPUT  ?,
      INPUT  ?,
      INPUT  "explship^Driver",
      OUTPUT rRecid ).

  IF rRecid <> ? THEN
  DO:
    RUN ValidateDriver
      ( INPUT  rRecid,
        INPUT  "",
        INPUT  NO,
        OUTPUT lContinue ).

    IF NOT lContinue THEN
      RETURN NO-APPLY.
  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btHdrMsgs
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btHdrMsgs wn-ship_details
ON CHOOSE OF btHdrMsgs IN FRAME frExplship /* Message */
DO:
  /*if it's already open with the current ID, then just apply focus*/
  IF VALID-OBJECT(goMsgWindowCaller) AND
     goMsgWindowCaller:CanReuseMessageWindow("SO", INTEGER(fi-soid:SCREEN-VALUE), -1, giShipNum) THEN
    goMsgWindowCaller:ApplyFocus().
  ELSE
  DO:
    RUN CloseMessageWindow.

    goMsgWindowCaller = NEW common.MsgWindowCaller(INPUT STRING(glTransferOrder,"YES/NO"),
      INPUT "SO",
      INPUT INTEGER(fi-soid:SCREEN-VALUE),
      INPUT -1,
      INPUT giShipNum,
      INPUT THIS-PROCEDURE,
      INPUT YES,
      INPUT {&WINDOW-NAME}:HANDLE,
      INPUT glAffectInv,
      INPUT NO).

    goMsgWindowCaller:CallMsgWindowPersistent().

  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btnImages
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btnImages wn-ship_details
ON CHOOSE OF btnImages IN FRAME frExplship /* View Images */
DO:
  DEFINE VARIABLE cImageURL AS CHARACTER NO-UNDO.


  RUN so/sifetchpodimageurl.p ON SERVER g-Appsrvr
    ( INPUT  gcSOSysid,
      INPUT  giSOID,
      INPUT  gcCategoryList[{&shipments_header-sys-id}],
      INPUT  giShipNum,
      OUTPUT cImageURL ).

  IF cImageURL <> "" THEN
  DO TRANSACTION:

    tools.ProcessStartHelper:ProcessStart(cImageURL).

    CATCH err AS System.ComponentModel.Win32Exception:

      IF err:Message = "The system cannot find the file specified" THEN
        tools.AgilityMessage:Show("Agility cannot find '" + cImageURL + "'. Make sure you typed the name correctly, and then try again.","Error","Ok","Error").

    END CATCH.
  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btPodAccept
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btPodAccept wn-ship_details
ON CHOOSE OF btPodAccept IN FRAME frExplship /* Accept POD Changes */
DO:
  DEFINE VARIABLE iCtr          AS INTEGER     NO-UNDO.
  DEFINE VARIABLE iNumRows      AS INTEGER     NO-UNDO.
  DEFINE VARIABLE lReturn       AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE lUpdates      AS LOGICAL     NO-UNDO INIT NO.
  DEFINE VARIABLE lFound        AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE cDummy        AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE iFocusRow     AS INTEGER     NO-UNDO.

  DEFINE VARIABLE dAdjQty       AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE lPrompt       AS LOGICAL     NO-UNDO INIT NO.
  DEFINE VARIABLE lShipLater    AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE lRefresh      AS LOGICAL     NO-UNDO INIT NO.
  DEFINE VARIABLE cHdrRvwStatus AS CHARACTER   NO-UNDO.


  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "select_rows",
        INPUT "accepting POD changes" ).

     RETURN NO-APPLY.
  END.

  {waiton.i}

  RUN so/podacceptdriverchgs.p ON SERVER g-Appsrvr
    ( INPUT  "Fetch",
      INPUT  temp-ship-details.so_id_sysid,
      INPUT  temp-ship-details.so_id,
      INPUT  -1,
      INPUT  temp-ship-details.ship-num,
      INPUT  "",
      OUTPUT TABLE ttshipments_detail_adj,
      OUTPUT cDummy ).

  EMPTY TEMP-TABLE ttprocessshipments_detail_adj.
  EMPTY TEMP-TABLE ttTrackSelected.

  ASSIGN
    iNumRows  = br-shipdetails:NUM-SELECTED-ROWS
    iFocusRow = br-shipdetails:FOCUSED-ROW.

  DO iCtr = 1 TO iNumRows:

    ASSIGN
      lReturn = br-shipdetails:FETCH-SELECTED-ROW(iCtr) NO-ERROR.

    IF NOT AVAILABLE(temp-ship-details) THEN
      RETURN NO-APPLY.

    CREATE ttTrackSelected.
    ASSIGN
      ttTrackSelected.sequence   = temp-ship-details.sequence
      ttTrackSelected.row_number = iFocusRow
      ttTrackSelected.sel_number = iCtr.
    RELEASE ttTrackSelected.

    IF temp-ship-details.review_status = ""         OR
       temp-ship-details.review_status = "Reviewed" THEN
      NEXT.

    IF temp-ship-details.review_status = "Review Messages" THEN
    DO:
      ASSIGN
        lRefresh                        = YES
        temp-ship-details.review_status = "Reviewed".

      RUN so/podacceptdriverchgs.p ON SERVER g-Appsrvr
        ( INPUT  "AcceptMessages",
          INPUT  temp-ship-details.so_id_sysid,
          INPUT  temp-ship-details.so_id,
          INPUT  temp-ship-details.sequence,
          INPUT  temp-ship-details.ship-num,
          INPUT  "",
          OUTPUT TABLE ttemptyshipments_detail_adj,
          OUTPUT cHdrRvwStatus ).

      IF cHdrRvwStatus = "Reviewed" THEN
        ASSIGN
          fiReviewStatus:SCREEN-VALUE = cHdrRvwStatus
          tbHold        :CHECKED      = NO
          tbHold        :SENSITIVE    = glHoldAllowed
          glOrigHold                  = NO.

    END. /* IF temp-ship-details.review_status = "Review Messages" THEN */
    ELSE
    DO:
      ASSIGN
        dAdjQty = 0.

      FOR EACH ttshipments_detail_adj WHERE
               ttshipments_detail_adj.tran_seq = temp-ship-details.sequence
               NO-LOCK:

        ASSIGN
          dAdjQty = dAdjQty + ttshipments_detail_adj.adj_qty.

        CREATE ttprocessshipments_detail_adj.
        BUFFER-COPY ttshipments_detail_adj TO ttprocessshipments_detail_adj
        ASSIGN
          ttprocessshipments_detail_adj.iRow = iCtr.
      END.

      RELEASE ttprocessshipments_detail_adj NO-ERROR.

      IF glCustomerAcceptsBO = NO AND
         dAdjQty             < 0  AND
         lPrompt             = NO THEN
      DO:
        ASSIGN
          lPrompt    = YES
          lShipLater = YES.

        {waitoff.i}

        RUN sysinfo.p
          ( INPUT "accept_no_bo_cancelqty",
            INPUT "",
            INPUT-OUTPUT lShipLater).

        /* Assign cancel button properly. Progress for some reason changes
           things. On buttons YES-NO-CANCEL, CANCEL = ? but on a OK-CANCEL
           buttons, Cancel = NO. */
        IF lShipLater = NO OR
           lShipLater = ? THEN
        DO:
          RETURN NO-APPLY.
        END.

        {waiton.i}

      END. /* IF dAdjQty < 0  AND... */
    END. /* IF temp-ship-details.review_status = "Review Messages" THEN...ELSE */
  END. /* DO iCtr = 1 to iNumRows: */

  {waitoff.i}

  ASSIGN
    gcPodAdjustmentGUID = "".

  IF CAN-FIND( FIRST ttprocessshipments_detail_adj NO-LOCK ) THEN
    RUN ProcessPodAccept
      ( OUTPUT lFound ).
  ELSE
  DO:
    EMPTY TEMP-TABLE ttTrackSelected NO-ERROR.

    IF lRefresh THEN
      br-shipdetails:REFRESH().
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btPodReject
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btPodReject wn-ship_details
ON CHOOSE OF btPodReject IN FRAME frExplship /* Reject POD Changes */
DO:
  DEFINE VARIABLE iCtr          AS INTEGER     NO-UNDO.
  DEFINE VARIABLE iNumRows      AS INTEGER     NO-UNDO.
  DEFINE VARIABLE lReturn       AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE cHdrRvwStatus AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE iFocusRow     AS INTEGER     NO-UNDO.


  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "select_rows",
        INPUT "rejecting POD changes" ).

     RETURN NO-APPLY.
  END.

  {waiton.i}

  EMPTY TEMP-TABLE ttTranInfo.
  EMPTY TEMP-TABLE ttTrackSelected.

  ASSIGN
    iNumRows  = br-shipdetails:NUM-SELECTED-ROWS
    iFocusRow = br-shipdetails:FOCUSED-ROW.

  DO iCtr = 1 TO iNumRows:

    ASSIGN
      lReturn = br-shipdetails:FETCH-SELECTED-ROW(iCtr) NO-ERROR.

    IF NOT AVAILABLE(temp-ship-details) THEN
      RETURN NO-APPLY.

    CREATE ttTrackSelected.
    ASSIGN
      ttTrackSelected.sequence   = temp-ship-details.sequence
      ttTrackSelected.row_number = iFocusRow
      ttTrackSelected.sel_number = iCtr.
    RELEASE ttTrackSelected.

    IF temp-ship-details.review_status = ""         OR
       temp-ship-details.review_status = "Reviewed" THEN
      NEXT.

    CREATE ttTranInfo.
    ASSIGN
      ttTranInfo.tran_type                 = "SO"
      ttTranInfo.tran_sysid                = temp-ship-details.so_id_sysid
      ttTranInfo.tran_id                   = temp-ship-details.so_id
      ttTranInfo.tran_seq                  = temp-ship-details.sequence
      ttTranInfo.sub_id                    = temp-ship-details.ship-num
      ttTranInfo.sale_type                 = gcSaleType
      ttTranInfo.detail_invent_affect      = glAffectInv
      ttTranInfo.item_ptr_sysid            = temp-ship-details.item_ptr_sysid
      ttTranInfo.item_ptr                  = temp-ship-details.item_ptr
      ttTranInfo.tran_detail_recid         = temp-ship-details.rSODetailRecid
      ttTranInfo.overridden_orig_price_uom = temp-ship-details.overridden_orig_price_uom
      ttTranInfo.overridden_orig_price     = temp-ship-details.overridden_orig_price.
    RELEASE ttTranInfo.

    ASSIGN
      temp-ship-details.review_status       = "Reviewed"
      temp-ship-details.pod_qty_adjustments = "".

  END. /* DO iCtr = 1 TO br-shipdetails:NUM-SELECTED-ROWS: */

  IF CAN-FIND( FIRST ttTranInfo NO-LOCK ) THEN
  DO:
    RUN so/podrejectdriverchgs.p ON SERVER g-AppSrvr
      ( INPUT  TABLE ttTranInfo,
        OUTPUT cHdrRvwStatus ).

    IF cHdrRvwStatus = "Reviewed" THEN
      ASSIGN
        fiReviewStatus:SCREEN-VALUE = cHdrRvwStatus
        tbHold        :CHECKED      = NO
        tbHold        :SENSITIVE    = glHoldAllowed
        glOrigHold                  = NO.

    RUN create-temp(INPUT gcCurrentShipmentRecID).

    RUN open-query.

    RUN SetSelectedRows.
  END.

  {waitoff.i}

  EMPTY TEMP-TABLE ttTrackSelected.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btRoute
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btRoute wn-ship_details
ON CHOOSE OF btRoute IN FRAME frExplship
DO:
  DEFINE VARIABLE l-deliv-date AS DATE NO-UNDO.
  DEFINE VARIABLE l-deliv-route AS CHARACTER NO-UNDO.


  RUN ldeliver.w
    ( INPUT  g-shipto_recid,
      INPUT  (IF glAffectInv = YES THEN "Exp Delv" ELSE ""),
      OUTPUT l-deliv-date,
      OUTPUT l-deliv-route ).

  IF l-deliv-route = "" THEN
  DO:
    APPLY "ENTRY" TO btRoute.
    RETURN.
  END.

  RUN CallAssignStop
    ( INPUT l-deliv-route ).

  APPLY "ENTRY" TO btRoute.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btSave
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btSave wn-ship_details
ON CHOOSE OF btSave IN FRAME frExplship
DO:
  DEFINE VARIABLE lContinue AS LOGICAL     NO-UNDO.

  RUN runSave
    (OUTPUT lContinue).

  IF lContinue = NO THEN
    RETURN NO-APPLY.

  /*Don't close window if called from comtstat.w*/
  IF ip-calling_module:FILE-NAME <> "comtstat.w" THEN
  DO:
    APPLY "CLOSE":U TO THIS-PROCEDURE.
    RETURN NO-APPLY.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btSelectAll
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btSelectAll wn-ship_details
ON CHOOSE OF btSelectAll IN FRAME frExplship /* Select all (Ctrl+L) */
DO:
  APPLY "ENTRY":U TO btSelectAll.

  IF br-shipdetails:DESELECT-ROWS() THEN.

  REPOSITION br-shipdetails TO ROW 1.

  IF NUM-RESULTS("br-shipdetails") > 0 THEN
    IF br-shipdetails:SELECT-ALL() THEN.

  /* reposition to beginning of the browser*/
  REPOSITION br-shipdetails TO ROW 1.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btSelectLoc
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btSelectLoc wn-ship_details
ON CHOOSE OF btSelectLoc IN FRAME frExplship
DO:
  DEFINE VARIABLE iLocPtr           AS INTEGER     NO-UNDO.
  DEFINE VARIABLE cLocation         AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE lUseDefaultLoc    AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE lRemoveFromOnHold AS LOGICAL     NO-UNDO.

  RUN selectloc.w
    ( INPUT  "SO",
      INPUT  IF glUseConsignForCust = YES THEN gcSOSysid ELSE "",
      INPUT  IF glUseConsignForCust = YES THEN giSOID ELSE 0,
      OUTPUT cLocation,
      OUTPUT iLocPtr,
      OUTPUT glCheckAlreadyCommitted,
      OUTPUT lUseDefaultLoc,
      OUTPUT lRemoveFromOnHold ).

  IF iLocPtr <> 0 OR lUseDefaultLoc = YES THEN
    RUN commitToLocation
        (INPUT iLocPtr,
         INPUT lUseDefaultLoc,
         INPUT lRemoveFromOnHold).
  ELSE
    glCheckAlreadyCommitted = NO.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btSerNumEnt
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btSerNumEnt wn-ship_details
ON CHOOSE OF btSerNumEnt IN FRAME frExplship
DO:
  DEFINE VARIABLE lReturn AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE iCtr    AS INTEGER     NO-UNDO.
  DEFINE VARIABLE lCancel AS LOGICAL     NO-UNDO.

  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "select_rows",
        INPUT "Serial Number Entry" ).
    RETURN NO-APPLY.
  END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN */

  IF br-shipdetails:NUM-SELECTED-ROWS > 1 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "onerowfunc",
        INPUT "" ).

    RETURN NO-APPLY.
  END.

  EMPTY TEMP-TABLE ttSerNumTranInfo.

  DO iCtr = 1 TO br-shipdetails:NUM-SELECTED-ROWS:

    ASSIGN
      lReturn = br-shipdetails:FETCH-SELECTED-ROW(iCtr) NO-ERROR.

    IF NOT AVAILABLE(temp-ship-details) THEN
      RETURN NO-APPLY.

    IF temp-ship-details.track_ship_ser_num = "Do Not Use" THEN
    DO:
      RUN sysinfok.p
        (INPUT "ser_num_not_tracked_item",
         INPUT "").

      RETURN NO-APPLY.
    END.

    CREATE ttSerNumTranInfo.
    ASSIGN
      ttSerNumTranInfo.cTranType           = temp-ship-details.header_type
      ttSerNumTranInfo.iTranID             = temp-ship-details.so_id
      ttSerNumTranInfo.cTranSysid          = temp-ship-details.so_id_sysid
      ttSerNumTranInfo.iTranSeq            = temp-ship-details.sequence
      ttSerNumTranInfo.iSubID              = temp-ship-details.ship-num
      ttSerNumTranInfo.iPickID             = 0
      ttSerNumTranInfo.lAffectInv          = glAffectInv
      ttSerNumTranInfo.iItemPtr            = temp-ship-details.item_ptr
      ttSerNumTranInfo.cItemPtrSysid       = temp-ship-details.item_ptr_sysid
      ttSerNumTranInfo.cItem               = temp-ship-details.item
      ttSerNumTranInfo.dQty                = temp-ship-details.dDisplayQty
      ttSerNumTranInfo.cQtyUOM             = temp-ship-details.cDisplayUOM
      ttSerNumTranInfo.cTallyUOM           = temp-ship-details.tally_uom
      ttSerNumTranInfo.cTrackSerNum        = temp-ship-details.track_ship_ser_num
      ttSerNumTranInfo.cTrackSerNumQtyUOM  = temp-ship-details.track_ser_num_qty_uom
      ttSerNumTranInfo.cTranStatus         = "Staged".

    CURRENT-WINDOW           = {&WINDOW-NAME}:HANDLE.
    CURRENT-WINDOW:SENSITIVE = NO.

    RUN ic/sernument.w
      (INPUT        THIS-PROCEDURE,
       INPUT        "explship.w",
       INPUT        TABLE ttOrderTally,     /*not used here*/
       INPUT-OUTPUT TABLE ttSerNumTranInfo,
       INPUT-OUTPUT TABLE ttSerialNumber,   /*not used here*/
       OUTPUT lCancel).

    ASSIGN
      CURRENT-WINDOW           = {&WINDOW-NAME}:HANDLE.
      CURRENT-WINDOW:SENSITIVE = YES.

    APPLY "ENTRY" TO CURRENT-WINDOW.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btShipDtlInfo
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btShipDtlInfo wn-ship_details
ON CHOOSE OF btShipDtlInfo IN FRAME frExplship
DO:
  DEFINE VARIABLE lContinue      AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE hTempHandle    AS HANDLE     NO-UNDO.

  {&WINDOW-NAME}:SENSITIVE = NO.

  ASSIGN
    hTempHandle = DYNAMIC-FUNCTION('agilguimgrFindPersistent':U IN gshAgilInterfacemgr,
                     INPUT {&WINDOW-NAME},
                     INPUT "shipddsp.w" ) NO-ERROR.

  IF NOT VALID-HANDLE (hTempHandle) THEN
    RUN shipddsp.w PERSISTENT SET hTempHandle
      ( INPUT THIS-PROCEDURE,
        INPUT {&WINDOW-NAME}:HANDLE,
        INPUT gcCategoryList[{&so_header-sys-id}],
        INPUT INTEGER(fi-soid:SCREEN-VALUE),
        INPUT INTEGER(fi-ship_num:SCREEN-VALUE),
        INPUT NO ). /* glIsWindowViewOnly */

  RUN SetParentWindow IN gshAgilInterfacemgr
    ( INPUT  {&WINDOW-NAME}:HANDLE,
      INPUT  hTempHandle ).

  /* give the persistent window just run the focus */
  lContinue = DYNAMIC-FUNCTION('agilguimgrApplyEntry':U IN gshAgilInterfacemgr,
                INPUT hTempHandle ) NO-ERROR.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btSpecifyTags
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btSpecifyTags wn-ship_details
ON CHOOSE OF btSpecifyTags IN FRAME frExplship
DO:
  /* Necessary so specifytag.w will open with focus */
  APPLY "ENTRY":U TO FRAME frExplship.
  APPLY "ENTRY":U TO btSpecifyTags.
  /* Necessary so specifytag.w will open with focus */

  RUN SpecifyTags.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btUnitData
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btUnitData wn-ship_details
ON CHOOSE OF btUnitData IN FRAME frExplship
DO:
  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "select_rows",
        INPUT "displaying unit data" ).
    RETURN NO-APPLY.
  END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN */

  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} > 1 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "onerowfunc",
        INPUT "" ).

    RETURN NO-APPLY.
  END.

  GET CURRENT br-shipdetails NO-LOCK.

  IF AVAILABLE temp-ship-details THEN
  DO:
    ASSIGN
      glByPassEntryTrigger2 = YES.

    {&WINDOW-NAME}:SENSITIVE = NO.

    RUN unitdata.w
      ( INPUT temp-ship-details.so_id_sysid,
        INPUT "SO",
        INPUT temp-ship-details.so_id,
        INPUT temp-ship-details.sequence,
        INPUT temp-ship-details.ship-num ).

    CURRENT-WINDOW = {&WINDOW-NAME}.
    CURRENT-WINDOW:SENSITIVE = YES.
    APPLY "ENTRY" TO CURRENT-WINDOW.

    ASSIGN
      glByPassEntryTrigger2 = NO.
  END. /* IF AVAILABLE temp-ship-details THEN */

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btUpdateStatus
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btUpdateStatus wn-ship_details
ON CHOOSE OF btUpdateStatus IN FRAME frExplship /* Update Status */
DO:
  RUN RunUpdateStatus.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btViewMsgs
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btViewMsgs wn-ship_details
ON CHOOSE OF btViewMsgs IN FRAME frExplship
DO:
  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "select_rows",
        INPUT "update" ).
    RETURN NO-APPLY.
  END. /* IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 0 THEN */

  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} > 1 THEN
  DO:
    RUN sysinfok.p
      ( INPUT "onerowfunc",
        INPUT "" ).

    RETURN NO-APPLY.
  END.

  IF br-shipdetails:NUM-SELECTED-ROWS > 0 THEN
  DO:
    IF br-shipdetails:FETCH-SELECTED-ROW(1) THEN.
  END.

  GET CURRENT br-shipdetails NO-LOCK.

  IF AVAILABLE temp-ship-details THEN
  DO:
    /*if it's already open with the current ID, then just apply focus*/
    IF VALID-OBJECT(goMsgWindowCaller) AND
       goMsgWindowCaller:CanReuseMessageWindow("SO", temp-ship-details.so_id, temp-ship-details.sequence, giShipNum ) THEN
      goMsgWindowCaller:ApplyFocus().
    ELSE
    DO:
      RUN CloseMessageWindow.

      goMsgWindowCaller = NEW common.MsgWindowCaller(INPUT STRING(glTransferOrder,"YES/NO"),
          INPUT "SO",
          INPUT temp-ship-details.so_id,
          INPUT temp-ship-details.sequence,
          INPUT giShipNum,
          INPUT THIS-PROCEDURE,
          INPUT YES,
          INPUT {&WINDOW-NAME}:HANDLE,
          INPUT glAffectInv,
          INPUT NO).

      goMsgWindowCaller:CallMsgWindowPersistent().

    END.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME btViewOthChgCst
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL btViewOthChgCst wn-ship_details
ON CHOOSE OF btViewOthChgCst IN FRAME frExplship
DO:
  DEFINE VARIABLE iNumSelected         AS   INTEGER    NO-UNDO.
  DEFINE VARIABLE cSeqList             AS   CHARACTER  NO-UNDO.
  DEFINE VARIABLE iCtr                 AS   INTEGER    NO-UNDO.
  DEFINE VARIABLE lReturn              AS   LOGICAL    NO-UNDO.
  DEFINE VARIABLE cAddonApplies        AS   CHARACTER  NO-UNDO.
  DEFINE VARIABLE hHandle              AS   HANDLE     NO-UNDO.
  DEFINE VARIABLE lContinue            AS   LOGICAL    NO-UNDO INIT FALSE.

  DEFINE BUFFER   ttCustInfo           FOR  ttCustInfo.


  ASSIGN
    iNumSelected = br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME}
    cSeqList     = "".

  REPEAT iCtr = 1 TO iNumSelected:

    /* fetch from appropriate buffer depending on zoom mode */
    ASSIGN
      lReturn = br-shipdetails:FETCH-SELECTED-ROW(iCtr).

    /* if record for row was successfully read ... */
    IF lReturn THEN
      ASSIGN
        cSeqList = cSeqList + STRING(temp-ship-details.sequence) + ",".

  END. /* REPEAT i = 1 TO iNumSelected: */

  ASSIGN
    cSeqList = RIGHT-TRIM(cSeqList,",").

  FOR FIRST ttCustInfo NO-LOCK:
    ASSIGN
      cAddonApplies = ttCustInfo.add_on_applies.
  END. /* FOR FIRST ttCustInfo NO-LOCK: */

  RUN ordchrgcstdtl.w PERSISTENT SET hHandle
    ( INPUT THIS-PROCEDURE,
      INPUT gcSOSysid,
      INPUT giSOID,
      INPUT "SO",
      INPUT giShipNum,
      INPUT cSeqList,
      INPUT NO,
      INPUT cAddonApplies ).

  RUN SetParentWindow IN gshAgilInterfacemgr
    ( INPUT  {&WINDOW-NAME}:HANDLE,
      INPUT  hHandle ).

  CURRENT-WINDOW           = {&WINDOW-NAME}.
  CURRENT-WINDOW:SENSITIVE = NO.

  /* give the persistent window just run the focus */
  lContinue = DYNAMIC-FUNCTION('agilguimgrApplyEntry':U IN gshAgilInterfacemgr,
                   INPUT hHandle ) NO-ERROR.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbDisplayUOM
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbDisplayUOM wn-ship_details
ON VALUE-CHANGED OF cbDisplayUOM IN FRAME frExplship
DO:
  DEFINE VARIABLE cUOMSysid            AS  CHARACTER          NO-UNDO.
  DEFINE VARIABLE iUOMPtr              AS  INTEGER            NO-UNDO.
  DEFINE VARIABLE cDisplayUOM          AS  CHARACTER          NO-UNDO.
  DEFINE VARIABLE cDisplayUOM2         AS  CHARACTER          NO-UNDO.
  DEFINE VARIABLE dFactor              AS  DECIMAL            NO-UNDO.
  DEFINE VARIABLE dTallyQty            AS  DECIMAL            NO-UNDO.
  DEFINE VARIABLE lRefresh             AS  LOGICAL            NO-UNDO.
  DEFINE VARIABLE cErrorMsg            AS  CHARACTER          NO-UNDO.

  DEFINE BUFFER   bl-temp-ship-details FOR temp-ship-details.


  {waiton.i}

  FOR EACH bl-temp-ship-details EXCLUSIVE-LOCK:

    IF NOT({invitemtype.i &cItemType       = bl-temp-ship-details.item_type
                          &cProcessContext = "SheetGoodOnly"}) THEN
    DO:
      CASE cbDisplayUOM:SCREEN-VALUE:

        WHEN "Delivery UOM" THEN
        DO:
          ASSIGN
            cUOMSysid    = bl-temp-ship-details.delv_uom_conv_ptr_sysid
            iUOMPtr      = bl-temp-ship-details.delv_uom_conv_ptr
            cDisplayUOM  = bl-temp-ship-details.delv_uom
            cDisplayUOM2 = bl-temp-ship-details.delv_uom.
        END. /* WHEN "Delivery UOM" THEN */

        WHEN "Invoice UOM" THEN
        DO:
          ASSIGN
            cUOMSysid    = bl-temp-ship-details.invoice_uom_conv_ptr_sysid
            iUOMPtr      = bl-temp-ship-details.invoice_uom_conv_ptr
            cDisplayUOM  = bl-temp-ship-details.invoice_uom
            cDisplayUOM2 = bl-temp-ship-details.invoice_uom.
        END. /* WHEN "Invoice UOM" THEN */

        WHEN "Order UOM" THEN
        DO:
          ASSIGN
            cUOMSysid    = bl-temp-ship-details.order_uom_conv_ptr_sysid
            iUOMPtr      = bl-temp-ship-details.order_uom_conv_ptr
            cDisplayUOM  = bl-temp-ship-details.order_uom
            cDisplayUOM2 = bl-temp-ship-details.order_uom.
        END. /* WHEN "Order UOM" THEN */

        OTHERWISE /* Picking UOM */
        DO:
          ASSIGN
            cUOMSysid    = bl-temp-ship-details.pick_uom_conv_ptr_sysid
            iUOMPtr      = bl-temp-ship-details.pick_uom_conv_ptr
            cDisplayUOM  = bl-temp-ship-details.pick_uom
            cDisplayUOM2 = bl-temp-ship-details.pick_uom.
        END.

      END CASE. /* CASE cbDisplayUOM:SCREEN-VALUE: */

      {common/qtyuomproc.i
        &lAddErrorToTempTable = NO
        &cItemSysid         = bl-temp-ship-details.item_ptr_sysid
        &iItemPtr           = bl-temp-ship-details.item_ptr
        &cUOMConvSysid      = cUOMSysid
        &iConvertToUOMPtr   = iUOMPtr
        &dOutputConvFactor  = dFactor }

      ASSIGN
        dTallyQty = (bl-temp-ship-details.qty * bl-temp-ship-details.disp_qty_conv) / dFactor.

      ASSIGN
        bl-temp-ship-details.dDisplayQty   = dTallyQty
        bl-temp-ship-details.qty           = dTallyQty
        bl-temp-ship-details.cDisplayUOM   = cDisplayUOM
        bl-temp-ship-details.uom           = cDisplayUOM2
        bl-temp-ship-details.uom_ptr       = iUomPtr
        bl-temp-ship-details.uom_ptr_sysid = cUomSysid
        bl-temp-ship-details.disp_qty_conv = dFactor
        lRefresh                           = YES.
    END. /* IF NOT SheetGood THEN */

  END. /* FOR EACH bl-temp-ship-details EXCLUSIVE-LOCK: */

  IF lRefresh = YES THEN
    RUN open-query.

  {waitoff.i}

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbInvoicePeriod
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbInvoicePeriod wn-ship_details
ON VALUE-CHANGED OF cbInvoicePeriod IN FRAME frExplship
DO:
  DEFINE VARIABLE iInvoiceYear   AS INTEGER     NO-UNDO.
  DEFINE VARIABLE iInvoicePeriod AS INTEGER     NO-UNDO.
  
  ASSIGN 
    iInvoiceYear   = INTEGER(cbInvoiceYear:SCREEN-VALUE)
    iInvoicePeriod = INTEGER(SUBSTRING(SELF:SCREEN-VALUE, 1 ,2)) NO-ERROR.

  IF NOT CAN-FIND (FIRST ar_year WHERE
                         ar_year.system_id                   = gcCategoryList[{&ar_year-sys-id}]   AND
                         ar_year.ar_year                     = iInvoiceYear AND
                         ar_year.period_open[iInvoicePeriod] = YES NO-LOCK) THEN
  DO:
    RUN sysinfok.p(INPUT "period_not_open2",INPUT "").
  END.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbInvoiceYear
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbInvoiceYear wn-ship_details
ON VALUE-CHANGED OF cbInvoiceYear IN FRAME frExplship
DO:
  /* default to current period if user chooses current year */

  IF INTEGER(SELF:SCREEN-VALUE) = giCurrentYear THEN
    ASSIGN
      cbInvoicePeriod:SCREEN-VALUE = ENTRY(giCurrentPeriod,cbInvoicePeriod:LIST-ITEMS).

  APPLY "VALUE-CHANGED" TO cbInvoicePeriod.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME cbStatus
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL cbStatus wn-ship_details
ON VALUE-CHANGED OF cbStatus IN FRAME frExplship
DO:
  IF tbPrintDelvTick:VISIBLE THEN
  DO:
    ASSIGN
      tbPrintDelvTick:SENSITIVE = glAffectInv WHEN goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","print_delv_tickets_exp").

    IF tbPrintDelvTick:SENSITIVE = NO OR
       CAN-FIND( FIRST ttShipStatus WHERE
                       ttShipStatus.cStatus_code       = SELF:SCREEN-VALUE AND
                       ttShipStatus.lSecondary_process = NO
                       NO-LOCK ) THEN
      ASSIGN
        tbPrintDelvTick:CHECKED   = NO.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME fi-adf
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fi-adf wn-ship_details
ON ENTRY OF fi-adf IN FRAME frExplship
DO:
  l-orig-adf = DECIMAL(fi-adf:SCREEN-VALUE).
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fi-adf wn-ship_details
ON LEAVE OF fi-adf IN FRAME frExplship
DO:
  DEFINE VARIABLE lChoice AS LOGICAL    NO-UNDO.

  IF DECIMAL(fi-adf:SCREEN-VALUE) <> l-orig-adf THEN
  DO WITH FRAME {&FRAME-NAME}:
    IF glShippedADFOverride = NO THEN
    DO:
      ENABLE fi-asterisk.
      //fi-asterisk:BGCOLOR = 15.
    END.
    ELSE
    DO:
      DISABLE fi-asterisk.
      //fi-asterisk:BGCOLOR = 8.
    END.

    IF glSOHeaderADFOverride = YES THEN
    DO:
       /* gdOrigADF is the amount upon entering the screen before we've had a chance
          to update it in the fill-in...we need to know at time of Exit what the original
          amount was...not the currently displayed amount compared to l-orig-adf; which
          is only the amount prior to the most prevous change -- what if user enters ADF
          fill-in twice and changes it both times? We would no longer know the original
          ADF amount...so added gdOrigADF to track 'original adf amount'.
       */
       IF DECIMAL(fi-adf:SCREEN-VALUE) > gdOrigADF THEN
         ASSIGN glSOHeaderUpdateADF = TRUE.
       ELSE IF DECIMAL(fi-adf:SCREEN-VALUE) < gdOrigADF THEN
       DO:
          IF gcSOHeaderStatus = "S" THEN
            ASSIGN glSOHeaderUpdateADF = TRUE.
          ELSE
          DO:
             lChoice = TRUE.
             RUN sysinfo.p (INPUT "reduce_total_adf_so_staging_record",
                            INPUT "",
                            INPUT-OUTPUT lChoice).

             IF lChoice THEN
               ASSIGN glSOHeaderUpdateADF = TRUE.
             ELSE
               ASSIGN glSOHeaderUpdateADF = FALSE.
          END.
       END.
       ELSE
         ASSIGN glSOHeaderUpdateADF = FALSE.
    END.

    ASSIGN fi-asterisk = "*".
    DISPLAY fi-asterisk.
    fi-adf-message:VISIBLE = YES.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME fi-asterisk
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fi-asterisk wn-ship_details
ON LEAVE OF fi-asterisk IN FRAME frExplship
DO:
  IF fi-asterisk:SCREEN-VALUE <> "*" THEN
  DO WITH FRAME {&FRAME-NAME}:
    RUN calc_adf.
    DISPLAY fi-adf.
    fi-adf-message:VISIBLE = NO.
  END.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME fi-route
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fi-route wn-ship_details
ON LEAVE OF fi-route IN FRAME frExplship
DO:
  DEFINE VARIABLE dtNextDelvDate AS DATE        NO-UNDO.
  DEFINE VARIABLE cSysinfoMsg    AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE lValidRoute    AS LOGICAL     NO-UNDO.


  IF fi-route:SCREEN-VALUE <> gcPrevRoute THEN
  DO:
    IF fi-route:SCREEN-VALUE = "" THEN
    DO:
      ASSIGN
        gcPrevRoute           = ""
        fiDriver:SCREEN-VALUE = ""
        gcPriorDriver         = "".
    END. /* IF fi-route:SCREEN-VALUE = "" THEN */
    ELSE
    DO:
      RUN df/sivalidroute.p ON SERVER g-AppSrvr
        ( INPUT  gcCategoryList[{&delv_route-sys-id}],
          INPUT  fi-route:SCREEN-VALUE,
          OUTPUT cSysinfoMsg,
          OUTPUT lValidRoute ).

      IF NOT lValidRoute THEN
      DO:
        IF TRIM(cSysinfoMsg) <> "" THEN
          RUN sysinfok.p
            ( INPUT ENTRY(1,cSysinfoMsg,"^"),
              INPUT ENTRY(2,cSysinfoMsg,"^") ).

        fi-route:SCREEN-VALUE = gcPrevRoute.
        RETURN.
      END. /* IF NOT AVAILABLE delv_route THEN */

      /*add code to check if valid route*/
      RUN common/getnxtvaldt.p ON SERVER g-AppSrvr
        ( INPUT  fi-route:SCREEN-VALUE,
          INPUT  "Exp Delv",
          INPUT  "<all>",
          OUTPUT dtNextDelvDate ).

      IF dtNextDelvDate = ? THEN
      DO:
        RUN sysinfoK.p
          ( INPUT "route_invalid",
            INPUT fi-route:SCREEN-VALUE ).

        fi-route:SCREEN-VALUE = gcPrevRoute.

        RETURN.
      END.

      RUN CallAssignStop
        ( INPUT fi-route:SCREEN-VALUE ).
    END. /* IF fi-route:SCREEN-VALUE = "" THEN...ELSE */
  END. /* IF fi-route:SCREEN-VALUE <> "" AND... */

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME fiDriver
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL fiDriver wn-ship_details
ON LEAVE OF fiDriver IN FRAME frExplship
DO:
  DEFINE VARIABLE lContinue  AS LOGICAL     NO-UNDO.


  RUN ValidateDriver
    ( INPUT  ?,
      INPUT  fiDriver:SCREEN-VALUE,
      INPUT  NO,
      OUTPUT lContinue ).

  IF NOT lContinue THEN
    RETURN NO-APPLY.
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&Scoped-define SELF-NAME tbDispAllocChgCost
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CONTROL tbDispAllocChgCost wn-ship_details
ON VALUE-CHANGED OF tbDispAllocChgCost IN FRAME frExplship /* Display allocated charges  costs */
DO:
  {waiton.i}

  RUN CalcDetailChargesAndGM.

  RUN open-query.

  IF NUM-RESULTS("br-shipdetails") > 0 THEN
  DO:
    IF br-shipdetails:SELECT-FOCUSED-ROW() IN FRAME {&FRAME-NAME} THEN.

    IF AVAILABLE temp-ship-details THEN
      APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
  END.

  RUN set_message_bmp
    ( INPUT -1 ).

  {waitoff.i}
END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&UNDEFINE SELF-NAME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK wn-ship_details


/* ***************************  Main Block  *************************** */
{allwmain.i}
{edit.i}

ASSIGN g-calling_module = ip-calling_module.

/* Best default for GUI applications is...                              */
PAUSE 0 BEFORE-HIDE.

ASSIGN
  {&WINDOW-NAME}:MIN-HEIGHT  = {&WINDOW-NAME}:HEIGHT
  {&WINDOW-NAME}:MIN-WIDTH   = {&WINDOW-NAME}:WIDTH
  FRAME {&FRAME-NAME}:SCROLLABLE = NO
  {&WINDOW-NAME}:HIDDEN = NO.

/* Send messages to alert boxes because there is no message area.       */
ASSIGN CURRENT-WINDOW:MENUBAR         = MENU menu-main:HANDLE
       THIS-PROCEDURE:PRIVATE-DATA    = "explship.w".

{calfillinbtntrig.i "fi-ship_date" "{&frame-name}" "btCalendarDt" "?"}
{calfillinbtntrig.i "fiExpDate" "{&frame-name}" "btCalendarExpDt" "?"}
{calfillinbtntrig.i "fiInvoiceDate" "{&frame-name}" "btCalendarInvDt" "?"}

DEFINE VARIABLE l-change-ok AS LOGICAL NO-UNDO.
DEFINE VARIABLE l-new_qty   AS DECIMAL NO-UNDO.

RUN set_window_profile.

ON CHOOSE OF MENU-ITEM hndl-add
DO:
  IF btAdd:SENSITIVE IN FRAME frExplship = YES THEN
    APPLY "CHOOSE" TO btAdd IN FRAME frExplship.

  RETURN.
END.

ON CHOOSE OF MENU-ITEM hndl-update
DO:
  IF bt-update_detail:SENSITIVE IN FRAME frExplship = YES THEN
    APPLY "CHOOSE" TO bt-update_detail IN FRAME frExplship.
  RETURN.
END.

ON CHOOSE OF MENU-ITEM hndl-delete
DO:
  IF bt-Delete:SENSITIVE IN FRAME frExplship = YES THEN
    APPLY "CHOOSE" TO bt-Delete IN FRAME frExplship.
  RETURN.
END.

ON CHOOSE OF MENU-ITEM hndl-save
DO:
  IF btSave:SENSITIVE IN FRAME frExplship = YES THEN
  DO:
    /* fire leave event in case user is sitting on this widget */
    APPLY "LEAVE" TO fi-adf.

    APPLY "CHOOSE" TO btSave IN FRAME frExplship.
  END.

  RETURN.
END.

ON CTRL-L OF FRAME frExplship ANYWHERE
DO:
  IF btSelectAll:SENSITIVE THEN
    APPLY "CHOOSE":U TO btSelectAll IN FRAME frExplship.
END.

ON CHOOSE OF MENU-ITEM hndl-x
DO:
  {waiton.i}
  APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
  {waitoff.i}
END.

/* kem - undo
ON LEAVE OF temp-ship-details.dDisplayQty IN BROWSE br-shipdetails
DO:
  DEFINE VARIABLE dShipmentQty   AS DECIMAL NO-UNDO.
  
  dShipmentQty = DECIMAL(temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails).
  
  IF br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} > 0 THEN
  DO:
    IF br-shipdetails:FETCH-SELECTED-ROW(1) IN FRAME {&FRAME-NAME} THEN.
  END.
  ELSE
    RETURN.
    
  RUN UpdateShipmentQty
    ( INPUT grCurrentRECID,
      INPUT br-shipdetails:FOCUSED-ROW IN FRAME {&FRAME-NAME},
      INPUT TRUE,
      INPUT FALSE,
      input-output dShipmentQty, ).
    
  FIND FIRST temp-ship-details WHERE
             temp-ship-details.rec = grCurrentRECID
             NO-LOCK NO-ERROR. 
             
  temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING(ipdNewShipmentQty).
  
END. /* leave of temp-ship-details.dDisplayQty */
*/

ON LEAVE OF temp-ship-details.disp_price IN BROWSE br-shipdetails
DO:
  RUN LeavePrice( INPUT temp-ship-details.disp_price:SCREEN-VALUE IN BROWSE br-shipdetails ).
END.

ON ENTER OF temp-ship-details.disp_price-uom IN BROWSE br-shipdetails
DO:
  RUN ChoosePriceUOM.
  RETURN NO-APPLY.
END.

ON ENTER OF temp-ship-details.dDisplayQty IN BROWSE br-shipdetails
DO:
   APPLY "LEAVE" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
   RETURN NO-APPLY.
END.

ON LEAVE OF temp-ship-details.ext_price IN BROWSE br-shipdetails
DO:
  RUN LeaveExtPrice( INPUT temp-ship-details.ext_price:SCREEN-VALUE IN BROWSE br-shipdetails ).
  APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
END.

ON CTRL-ALT-S ANYWHERE
DO:
  // kem - remove
  RUN SaveLineUpdateChanges( INPUT FALSE ).
END.

ON CTRL-ALT-O ANYWHERE 
DO:
  RUN ChooseUOM.
END.

/* Now enable the interface and wait for the exit condition.            */
/* (NOTE: handle ERROR and END-KEY so cleanup code will always fire.    */
MAIN-BLOCK:
DO ON ERROR   UNDO MAIN-BLOCK, LEAVE MAIN-BLOCK
   ON END-KEY UNDO MAIN-BLOCK, LEAVE MAIN-BLOCK:

  RUN InitializeSecurityObjects.
  
  bt-tallycalc:VISIBLE = FALSE.
  RUN toggle_cost_visible.

  ASSIGN
    {&WINDOW-NAME}:MAX-HEIGHT  = SESSION:HEIGHT
    {&WINDOW-NAME}:MAX-WIDTH   = SESSION:WIDTH
    FRAME {&FRAME-NAME}:HEIGHT = {&WINDOW-NAME}:HEIGHT
    FRAME {&FRAME-NAME}:WIDTH  = {&WINDOW-NAME}:WIDTH.

  RUN enable_UI.
  {allwmainrungiminit.i}

  RUN SetWindowSize
  ( INPUT "Staging Details",
    INPUT  "",
    INPUT  "",
    INPUT  "",
    INPUT  {&WINDOW-NAME} ).

  IF {getagilprop.i &PropList='ApplyCurrencyAR'} <> "YES" THEN
    ASSIGN
      glUsingCurrency      = NO
      fiCurrencyLbl:HIDDEN = YES
      fiCurrency   :HIDDEN = YES.
  ELSE
    ASSIGN
      glUsingCurrency            = YES
      fiCurrencyLbl:SCREEN-VALUE = "Currency"
      fiCurrencyLbl:HIDDEN       = NO
      fiCurrency   :HIDDEN       = NO.

  FOR FIRST param_so WHERE
            param_so.system_id = gcCategoryList[{&param_so-sys-id}]
            NO-LOCK:
    ASSIGN
      tbDispAllocChgCost:CHECKED = param_so.show_allocated_amt_in_staging.
  END.

  RUN sys/sifetchparamsystm.p ON SERVER g-Appsrvr
    ( INPUT "",
      INPUT  {getagilprop.i &PropList="'currentBranch'":U},
      OUTPUT DATASET dsParamSystm ).
  
  FOR FIRST ttparam_systm NO-LOCK:
  
    ASSIGN glUseConsignForCust = ttparam_systm.use_consign_for_cust.
  END.
  
  glEnabled = TRUE.

  DEFINE VARIABLE lAllowAgilityMobilePOD AS LOGICAL     NO-UNDO INIT FALSE.

  ASSIGN
    btDisplayOrder:SENSITIVE = goSecurityManager:IsMenuItemGranted("so_sales_order_entry","mn_salesord.p")
    btCustInfo    :SENSITIVE = goSecurityManager:IsMenuItemGranted("so_customer_information","mn_custinfo.p")
    gcCurrentUser            = {getagilprop.i &PropList="'currentUserLogin'":U}
    lAllowAgilityMobilePOD   = ({checklicense.i &Identifier = '"Agility Mobile POD"' &AlertUser = NO}).
    
  IF NOT goSecurityManager:IsMenuItemGranted("dp_dispatch_entry","mn_dp_entmenu.p") THEN
    DISABLE btDispatch WITH FRAME {&FRAME-NAME}.

  IF lAllowAgilityMobilePOD THEN
    ASSIGN
      btnImages:VISIBLE   = YES
      btnImages:SENSITIVE = YES.
  ELSE
    ASSIGN
      btnImages:VISIBLE = NO.

  {waitoff.i}

  IF ip-calling_module:FILE-NAME <> "comtstat.w" THEN
    RUN hideWidgets.
  ELSE
  DO:
    RUN DefaultYearPeriod.
  END.

  IF NOT THIS-PROCEDURE:PERSISTENT THEN
  DO:
    RUN build_screen
      ( INPUT ip-shiphead_rec,
        INPUT ip-calling_module,
        INPUT ip-context ).

    WAIT-FOR CLOSE OF THIS-PROCEDURE.
  END.
  ELSE
    RUN ApplyEntry.

END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE allwmainClosePostDisable wn-ship_details
PROCEDURE allwmainClosePostDisable :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
  IF VALID-HANDLE(ghPriceInfo) THEN
    APPLY "CLOSE" TO ghPriceInfo.

  DELETE PROCEDURE ghPriceInfo NO-ERROR.
  ghPriceInfo = ?.

  IF LOOKUP("CallBackFromExplship",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
    RUN CallBackFromExplship IN g-calling_module.
  
  IF VALID-OBJECT(goSecurityManager) THEN 
    DELETE OBJECT goSecurityManager.
    
  IF VALID-OBJECT(goSODetailPresenter) THEN
    DELETE OBJECT goSODetailPresenter.
    
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE allwmainClosePreDisable wn-ship_details
PROCEDURE allwmainClosePreDisable :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplContinue         AS  LOGICAL       NO-UNDO INIT TRUE.

  /*Do not allow window to be closed from the AP Invoice Entry, which is ran
    from autogenap.p*/
  IF glDoNotCloseFromAP = YES THEN
  DO:
    ASSIGN
      oplContinue = NO.
    RETURN.
  END.

  RUN ShutDownWindow
    ( INPUT  NO,
      OUTPUT oplContinue ).

  IF VALID-HANDLE(g-calling_module) AND
     LOOKUP("init_pers_hdl",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
    RUN init_pers_hdl IN g-calling_module.

  IF oplContinue AND
     LOOKUP("CallBackFromExplshipPreDisable",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
    RUN CallBackFromExplshipPreDisable IN g-calling_module.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE allwmainWindowClose wn-ship_details
PROCEDURE allwmainWindowClose :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplContinue AS LOGICAL NO-UNDO INIT YES.


  RUN CheckChanges
    (OUTPUT oplContinue).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE allwmainWindowEntry wn-ship_details
PROCEDURE allwmainWindowEntry :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/

  IF glByPassEntryTrigger = YES THEN
    RETURN.

  /*updstagingstat.i*/
  IF glFromCancelDispatch = YES THEN
    RETURN.

  ASSIGN
    glByPassEntryTrigger = YES.

  IF glByPassEntryTrigger2 = YES THEN
    RETURN.

  RUN ApplyEntry.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ApplyCancel wn-ship_details
PROCEDURE ApplyCancel:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

  IF giLineUpdateSequence = 0   OR 
     CancelLineUpdateChanges()  THEN 
    RUN ClearLineUpdate.

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ApplyEntry wn-ship_details
PROCEDURE ApplyEntry :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

  RUN build_screen
    ( INPUT ip-shiphead_rec,
      INPUT ip-calling_module,
      INPUT ip-context ).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ApplyFocus wn-ship_details
PROCEDURE ApplyFocus:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER ipcWidgetFocus   AS CHARACTER  NO-UNDO.

DEFINE VARIABLE lDummy AS LOGICAL NO-UNDO.
// kem
CASE ipcWidgetFocus:
  WHEN "Price" THEN
    lDummy = TRUE. //APPLY "ENTRY" TO fiPrice.
    
END CASE.

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE buildTempInvParams wn-ship_details
PROCEDURE buildTempInvParams :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ipcItemBrcSysid  AS   CHARACTER  NO-UNDO.
DEFINE INPUT  PARAMETER ipcItemPtrSysid  AS   CHARACTER  NO-UNDO.
DEFINE INPUT  PARAMETER ipiItemPtr       AS   INTEGER    NO-UNDO.
DEFINE INPUT  PARAMETER iplUseDefaultLoc AS   LOGICAL    NO-UNDO.
DEFINE OUTPUT PARAMETER oplCreated       AS   LOGICAL    NO-UNDO INIT FALSE.
DEFINE OUTPUT PARAMETER opiDefaultPtr    AS   INTEGER    NO-UNDO INIT 0.
DEFINE OUTPUT PARAMETER oplContentCode   AS   LOGICAL    NO-UNDO INIT NO.

FOR FIRST ttItemInfo WHERE
          ttItemInfo.item_ptr_sysid = ipcItemPtrSysid AND
          ttItemInfo.item_ptr       = ipiItemPtr
          NO-LOCK:
  ASSIGN
    oplContentCode = ttItemInfo.contentcode.

/*   Rules as of 11/30/07 - ITR 453382                                             */
/*   Specify Location when                                                         */
/*     Item is carried at location only                                            */
/*                        location and content only                                */
/*                        location, tag, content when the tag type is Mult Unit... */
  IF (ttItemInfo.whcode              = YES                               AND
      ttItemInfo.loccode             = YES                               AND
      ttItemInfo.lotcode             = NO                                AND
      ttItemInfo.tagcode             = NO)                               OR

     (ttItemInfo.whcode              = YES                               AND
      ttItemInfo.loccode             = YES                               AND
      ttItemInfo.lotcode             = NO                                AND
      ttItemInfo.tagcode             = YES                               AND
     {invitemtype.i &cItemType       = ttItemInfo.type
                    &cProcessContext = "InvTagTypeItem"}                 AND
      ttItemInfo.inv_tag_type        = "Mult Unit, Sngl PC Cnt & Lngth") THEN
  DO:
    ASSIGN
      oplCreated = YES.

    IF iplUseDefaultLoc           = YES AND
       ttItemInfo.default_loc_ptr > 0   THEN
      ASSIGN
        opiDefaultPtr = ttItemInfo.default_loc_ptr.

  END. /* IF (item_branch.whcode      = YES AND */
END. /* FOR FIRST item WHERE */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE build_screen wn-ship_details
PROCEDURE build_screen :
/* -----------------------------------------------------------
  Purpose:  Display screen contents
  Parameters:  <none>
  Notes:  This module gets called the first time the screen is built and
  it is called when this window is run persistently.
-------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ip-ship_recid AS RECID NO-UNDO.
  DEFINE INPUT PARAMETER ip-calling_module AS HANDLE NO-UNDO.
  DEFINE INPUT PARAMETER ip-mode AS CHARACTER NO-UNDO.

  DEFINE VARIABLE l-zip                  AS  CHARACTER  NO-UNDO FORMAT "X(10)".
  DEFINE VARIABLE l-shipto_address_found AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE cOpenShipments         AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE lBuildShipByPO         AS  LOGICAL    NO-UNDO INIT NO.
  DEFINE VARIABLE cDummy                 AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE lDummy                 AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE lReturn                AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE cTranStatus            AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE cList                  AS  CHARACTER  NO-UNDO.

  DEFINE BUFFER   bl-shipments_header2   FOR shipments_header.
  DEFINE BUFFER   bl-temp-ship-details   FOR temp-ship-details.

  IF glEnabled = FALSE THEN
    RETURN.

  {waiton.i}

  ASSIGN
    glShippedADFOverride  = FALSE
    glSOHeaderADFOverride = FALSE
    glSOHeaderUpdateADF   = FALSE
    glMoveDetail          = FALSE.

  ASSIGN
    g-calling_module = ip-calling_module
    ip-shiphead_rec  = ip-ship_recid.

  RUN set_window_profile.

  DO WITH FRAME {&FRAME-NAME}:

    ENABLE fi-asterisk.
    HIDE fi-asterisk.

    ASSIGN
      glUseWms = fUseWms(INPUT "", INPUT "").

    ASSIGN
      btUnitData:VISIBLE = glUseWms.
     
     IF ip-mode = "Display" THEN
     DO:
       ASSIGN
         glHoldAllowed = NO.

        HIDE bt-update_detail bt-delete btPodAccept btPodReject.
        DISABLE fi-ship_date
                btCalendarDt
                fiExpDate
                btCalendarExpDt
                tbHold
                fi-adf.
     END.
     ELSE
     DO:
       ASSIGN
         glHoldAllowed = YES.

       DISPLAY bt-update_detail.
       DISPLAY btRoute.
       ENABLE fi-route
              fi-ship_date
              btCalendarDt
              fiExpDate
              btCalendarExpDt
              tbHold
              fi-adf.
     END.
     
     RUN SetGridAndDetailView( INPUT ip-mode ).
  END.

  /* clean up temporary table */
  EMPTY TEMP-TABLE temp-ship-details.
  EMPTY TEMP-TABLE tt-ship-details-original.

  g-context = ip-mode.

  FIND bl-shipments_header WHERE RECID(bl-shipments_header) = ip-ship_recid NO-LOCK NO-ERROR.

  IF NOT AVAILABLE bl-shipments_header OR
     bl-shipments_header.status_flag = "I" THEN
  DO:
    IF LOOKUP("RemoveShipFromBrowse",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
      RUN RemoveShipFromBrowse IN g-calling_module
        ( INPUT ip-ship_recid ).

    ASSIGN
      gcSOSysid      = ""
      giSOID         = 0
      giShipNum      = 0
      glSkipShutdown = YES.

    IF VALID-HANDLE(ghLinentryProc) AND
       VALID-HANDLE(ghUsodetalHdl)  THEN
      RUN close_me IN ghUsodetalHdl
        ( INPUT {&WINDOW-NAME} ).

    APPLY "CLOSE":U TO THIS-PROCEDURE.
    RETURN.
  END.

  ASSIGN
    gcSOSysid     = bl-shipments_header.so_id_sysid
    giSOID        = bl-shipments_header.so_id
    giShipNum     = bl-shipments_header.shipment_num
    gdtExpectDate = bl-shipments_header.expect_date.

  FOR FIRST so_header WHERE
            so_header.system_id = bl-shipments_header.so_id_sysid AND
            so_header.so_id     = bl-shipments_header.so_id
            NO-LOCK:

    ASSIGN
      gcShipVia               = so_header.ship_via
      glPricedPick            = so_header.priced_pick
      glExpectDateOverride    = so_header.expect_date_override
      giPriceLevel            = so_header.price_level
      glPassThru              = so_header.pass_thru
      gcHeaderPriceMethod     = so_header.price_method
      gdHeaderExtraPrice      = so_header.price_extra_%
      gcHeaderDiscountMethod  = so_header.discount_method
      gdHeaderDisc1Extra      = so_header.extra_discount_1
      gdHeaderDisc2Extra      = so_header.extra_discount_2
      gdHeaderDisc3Extra      = so_header.extra_discount_3
      gdHeaderGmTarget        = so_header.gm_target
      glTaxable               = so_header.taxable
      gcTaxCode               = so_header.tax_code
      glContractBilling       = so_header.contract_billing.

     IF so_header.order_date <> ? THEN
       fi-order_date = STRING(so_header.order_date,"99/99/99").

     ASSIGN
       l-delete         = YES
       gcSOHeaderStatus = so_header.so_status
       glTransferOrder  = so_header.transfer
       gcSaleType       = so_header.sale_type
       gcSaleTypeSysid  = so_header.sale_type_sysid.

     IF glFirstSoheader  = YES                       OR
        fi-soid         <> bl-shipments_header.so_id THEN
     DO:
       ASSIGN
         glAffectInv        = TRUE
         gdOrigOrderTotal    = so_header.order_total
         gdOrigShipmentTotal = bl-shipments_header.order_total
         glFirstSoheader     = FALSE.

       FOR FIRST sales_type WHERE
                 sales_type.system_id  = so_header.sale_type_sysid AND
                 sales_type.sale_type  = so_header.sale_type
                 NO-LOCK:
         ASSIGN
           glAffectInv            = sales_type.inv_affect
           gcAutoPoType           = sales_type.auto_po_type.
       END.

       /* recost SO & shipments */
       RUN recost.p ON SERVER sys.AgilitySession:AppServer
         ( INPUT  bl-shipments_header.so_id_sysid,
           INPUT  "SO",
           INPUT  bl-shipments_header.so_id,
           INPUT  ?,
           INPUT  glAffectInv,
           INPUT  gcAutoPoType,
           INPUT  "",
           INPUT  "",
           INPUT  YES,
           INPUT  YES, /* iplBypassInvRecost */
           OUTPUT l-error-message ).

       IF l-error-message <> "" THEN
         MESSAGE l-error-message VIEW-AS ALERT-BOX ERROR BUTTONS OK.
     END. /* IF glFirstSoheader  = YES             OR... */

     /* If dealing with same Tran/Shipment only update Ship Date/Route/Stop if
        another process updated outside of staging details otherwise keep
        user changes */
     IF fi-soid     = bl-shipments_header.so_id        AND
        fi-ship_num = bl-shipments_header.shipment_num THEN
     DO:
       IF gdtOrigShipDate = bl-shipments_header.ship_date THEN
       DO:
         ASSIGN
           fi-ship_date.
       END.
       ELSE
       DO:
         ASSIGN
           fi-ship_date     = bl-shipments_header.ship_date
           gdtOrigShipDate  = bl-shipments_header.ship_date.
       END.

       IF gdtOrigExpDate = bl-shipments_header.expect_date THEN
       DO:
         ASSIGN
           fiExpDate.
       END.
       ELSE
       DO:
         ASSIGN
           fiExpDate      = bl-shipments_header.expect_date
           gdtOrigExpDate = bl-shipments_header.expect_date.
       END.

       IF g-orig-route = bl-shipments_header.route_id_char THEN
       DO:
         ASSIGN
           fi-route
           fiDriver.

         ASSIGN
           gcPriorDriver = fiDriver.

         ASSIGN
           gcPrevRoute   = fi-route.
       END.
       ELSE
       DO:
         ASSIGN
           fi-route     = bl-shipments_header.route_id_char
           gcPrevRoute  = bl-shipments_header.route_id_char
           g-orig-route = bl-shipments_header.route_id_char.

         ASSIGN
           fiDriver      = bl-shipments_header.driver
           gcOrigDriver  = bl-shipments_header.driver
           gcPriorDriver = bl-shipments_header.driver.
       END.

       IF g-orig-stop = bl-shipments_header.STOP THEN
       DO:
         ASSIGN
           fi-stop.
       END.
       ELSE
       DO:
         ASSIGN
           fi-stop     = bl-shipments_header.STOP
           g-orig-stop = bl-shipments_header.STOP.
       END.

       IF gcOrigProNumber = bl-shipments_header.pro_number THEN
       DO:
          ASSIGN
            fiProNumber.
       END.
       ELSE
       DO:
         ASSIGN
           fiProNumber     = bl-shipments_header.pro_number
           gcOrigProNumber = bl-shipments_header.pro_number.
       END.

       IF gdOrigADF = fi-adf THEN
       DO:
         RUN calc_adf.

         ASSIGN
           gdOrigADF = fi-adf.
       END.
     END.
     ELSE
     DO:
       ASSIGN
         fi-ship_date      = bl-shipments_header.ship_date
         gdtOrigShipDate   = bl-shipments_header.ship_date
         fiExpDate         = bl-shipments_header.expect_date
         gdtOrigExpDate    = bl-shipments_header.expect_date
         fi-route          = bl-shipments_header.route_id_char
         g-orig-route      = bl-shipments_header.route_id_char
         gcPrevRoute       = bl-shipments_header.route_id_char
         fi-stop           = bl-shipments_header.STOP
         g-orig-stop       = bl-shipments_header.STOP
         fiDriver          = bl-shipments_header.driver
         gcPriorDriver     = bl-shipments_header.driver
         gcOrigDriver      = bl-shipments_header.driver
         fiProNumber       = bl-shipments_header.pro_number
         gcOrigProNumber   = bl-shipments_header.pro_number.

       RUN calc_adf.

       ASSIGN
         gdOrigADF = fi-adf.
     END.

     ASSIGN
       fi-soid                        = bl-shipments_header.so_id
       fi-ship_num                    = bl-shipments_header.shipment_num
       fiCredStat                     = bl-shipments_header.credit_status
       fiReviewStatus                 = bl-shipments_header.review_status
       g-ship-sysid                   = bl-shipments_header.system_id
       g-so-sysid                     = bl-shipments_header.so_id_sysid
       tbHold                         = bl-shipments_header.hold_from_invoicing
       glOrigHold                     = bl-shipments_header.hold_from_invoicing
       fiEstimatedProfit:SCREEN-VALUE = STRING(so_header.estimated_profit).

     IF tbHold AND
        fiReviewStatus <> "Reviewed" AND
        fiReviewStatus <> ""         THEN
       tbHold:SENSITIVE = NO.

     ASSIGN
       fiStagingStatus:SCREEN-VALUE = GetStatusCode(bl-shipments_header.status_flag).

     IF ip-calling_module:FILE-NAME = "comtstat.w" THEN
     DO:
        ASSIGN
          cList                        = ""
          gcOrigStatus                 = cbStatus:SCREEN-VALUE.

        FOR EACH ttShipStatus WHERE
                 ttShipStatus.cStatus_flag <> bl-shipments_header.status_flag
                 NO-LOCK
                 BY ttShipStatus.iSortOrder:

          IF TRIM(ttShipStatus.cStatus_flag) = "" THEN
            NEXT.

          IF ttShipStatus.lIn_Process = YES OR
             goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_invoice_from_staging") THEN
            ASSIGN
              cList = cList + ttShipStatus.cStatus_code + ",".
        END.

        ASSIGN
          cList = RIGHT-TRIM(cList,",").

        ASSIGN
          cbStatus:LIST-ITEMS   = cList
          cbStatus:SCREEN-VALUE = cbStatus:ENTRY(1).

        IF LOOKUP(gcOrigStatus,cbStatus:LIST-ITEMS) > 0  THEN
          cbStatus:SCREEN-VALUE = gcOrigStatus.

       ASSIGN
         btCancelStaging:VISIBLE   = glAffectInv AND goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_delete_staging")
         btCancelStaging:SENSITIVE = glAffectInv AND goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_delete_staging").
     END.
     ELSE IF ip-calling_module:FILE-NAME = "so/salesorddriver.p" THEN
      ASSIGN
        btCancelStaging:VISIBLE   = glAffectInv AND goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_delete_staging")
        btCancelStaging:SENSITIVE = glAffectInv AND goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_delete_staging").

     FIND FIRST ttCustInfo NO-LOCK NO-ERROR.

     IF NOT AVAILABLE ttCustInfo                          OR
        ttCustInfo.cust_key   <> so_header.cust_key       OR
        ttCustInfo.shipto_seq <> so_header.shipto_seq_num THEN
     DO:
       EMPTY TEMP-TABLE ttCustInfo NO-ERROR.

       {custinfoset.i
         &CustValue   = "KEY"
         &CustCodeKey = so_header.cust_key
         &CustSeq     = so_header.shipto_seq_num
         &FieldList   = gcVariableList }

       IF gcCustInfoErrorMsg <> "" THEN
         MESSAGE gcCustInfoErrorMsg VIEW-AS ALERT-BOX ERROR BUTTONS OK.

       FIND FIRST ttCustInfo NO-LOCK NO-ERROR.
     END. /* IF NOT AVAILABLE ttCustInfo                          OR... */

     IF AVAILABLE ttCustInfo AND
        ttCustInfo.lCustBuilt = YES THEN
       ASSIGN
         fi-cust_id           = ttCustInfo.cust_code.

     ASSIGN
       fi-shipto              = STRING( so_header.shipto_seq_num )
       giBillToSeq            = so_header.billto_seq
       l-shipto_address_found = FALSE.

     IF AVAILABLE ttCustInfo AND
        ttCustInfo.lCustShiptoBuilt = YES THEN
       ASSIGN
         g-cust_key     = so_header.cust_key
         giShiptoSeq    = so_header.shipto_seq_num
         g-shipto_recid = ttCustInfo.rShiptoRecid.

    IF AVAILABLE ttCustInfo THEN
      ASSIGN
        glCustPiecePriceFlag = ttCustInfo.piece_price_flag.
    ELSE
      ASSIGN
        glCustPiecePriceFlag = NO.

     IF so_header.override_address THEN
     DO:
        FOR FIRST ship_to_address WHERE
                  ship_to_address.tran_sysid   = so_header.system_id AND
                  ship_to_address.tran_id      = so_header.so_id AND
                  ship_to_address.TYPE         = so_header.TYPE AND
                  ship_to_address.shipment_num = 0
                  NO-LOCK:

            ASSIGN l-shipto_address_found = TRUE.

            ASSIGN l-zip = STRING( ship_to_address.zip, {getagilprop.i &PropList="'currentZipFormat'":U} ).
            ASSIGN
              fi-cust      = ship_to_address.cust_name
              fi-address   = ship_to_address.address_1
              fi-address_2 = ship_to_address.address_2
              fi-city      = ship_to_address.city
              fi-state     = ship_to_address.state
              gcCountry    = ship_to_address.country
              fi-zip       = l-zip.
        END.
     END.

     IF NOT so_header.override_address OR l-shipto_address_found = FALSE THEN
     DO:
       IF AVAILABLE ttCustInfo AND
          ttCustInfo.lCustShiptoBuilt = YES THEN
       DO:
         ASSIGN
           l-zip = ttCustInfo.zip.
         ASSIGN
           fi-cust        = ttCustInfo.shipto_name
           fi-address     = ttCustInfo.address_1
           fi-address_2   = ttCustInfo.address_2
           fi-city        = ttCustInfo.city
           fi-state       = ttCustInfo.state
           gcCountry      = ttCustInfo.country
           fi-zip         = STRING( l-zip, {getagilprop.i &PropList="'currentZipFormat'":U} ).
       END.
     END.

     ASSIGN
       glCustomerAcceptsBO   = so_header.accepts_bo
       glSOHeaderADFOverride = so_header.override_adf.

     IF glUsingCurrency = YES THEN
     DO:
       RUN defaultcurrency.p ON SERVER g-AppSrvr
         ( INPUT "SO",
           INPUT so_header.system_id,
           INPUT STRING(so_header.so_id),
           OUTPUT gcCurrency ).

       ASSIGN
         fiCurrencyLbl = "Currency"
         fiCurrency = gcCurrency.

       DISPLAY
         fiCurrencyLbl
         fiCurrency WITH FRAME {&FRAME-NAME}.
     END.

     DISPLAY
       fi-soid
       fiCredStat
       fiReviewStatus
       tbHold
       fi-ship_num
       fi-cust
       fi-address
       fi-cust_id
       fi-shipto
       fi-order_date
       fi-ship_date
       fiExpDate
       fi-route
       fi-stop
       fiDriver
       fiProNumber
       fi-address_2
       fi-city
       fi-state
       fi-zip
       WITH FRAME {&FRAME-NAME}.

     IF DATE(fi-ship_date:SCREEN-VALUE) = ? THEN
     DO:
       {calclear.i "fi-ship_date" "{&FRAME-NAME}" "btCalendarDt"}
     END.

     IF DATE(fiExpDate:SCREEN-VALUE) = ? THEN
     DO:
       {calclear.i "fiExpDate" "{&FRAME-NAME}" "btCalendarExpDt"}

       ASSIGN
         fiExpDate NO-ERROR.
     END.

     IF ({checklicense.i &Identifier = '"Agility Mobile POD"'
                         &AlertUser = NO}) THEN
       ASSIGN
         glAllowReviewStatusHdr = YES.
     ELSE
       ASSIGN
         glAllowReviewStatusHdr = NO.

     EMPTY TEMP-TABLE ttParamMobileApps.

     RUN sys/parammobileappsp.p ON SERVER g-AppSrvr
       ( INPUT "FetchParam",
         INPUT-OUTPUT TABLE ttParamMobileApps ).

     ASSIGN
       glAllowReviewStatusDtl = NO.
     FOR FIRST ttParamMobileApps NO-LOCK:

       IF ttParamMobileApps.pod_review_qty_change       OR
          ttParamMobileApps.pod_review_msg_change       OR
          ttParamMobileApps.pod_review_shipment_refusal THEN
         ASSIGN
           glAllowReviewStatusDtl = YES.
     END.

     IF glAllowReviewStatusHdr AND
        glAffectInv            THEN
     DO:
       ASSIGN
         fiReviewStatusLbl                    :SCREEN-VALUE                     = "Review status"
         fiReviewStatusLbl                    :VISIBLE                          = YES
         fiReviewStatus                       :VISIBLE                          = YES
         temp-ship-details.review_status      :VISIBLE IN BROWSE br-shipdetails = glAllowReviewStatusDtl
         temp-ship-details.pod_qty_adjustments:VISIBLE IN BROWSE br-shipdetails = glAllowReviewStatusDtl.

       IF ip-mode <> "Display" THEN
         ASSIGN
           btPodAccept                        :VISIBLE                          = glAllowReviewStatusDtl
           btPodReject                        :VISIBLE                          = glAllowReviewStatusDtl.
     END.
     ELSE
       ASSIGN
         fiReviewStatusLbl                    :VISIBLE                          = NO
         fiReviewStatus                       :VISIBLE                          = NO
         btPodAccept                          :VISIBLE                          = NO
         btPodReject                          :VISIBLE                          = NO
         temp-ship-details.review_status      :VISIBLE IN BROWSE br-shipdetails = NO
         temp-ship-details.pod_qty_adjustments:VISIBLE IN BROWSE br-shipdetails = NO.

     FOR FIRST param_so WHERE
               param_so.system_id = gcCategoryList[{&param_so-sys-id}]
               NO-LOCK:

       ASSIGN
         gcPickProcess2Use         = param_so.pick_process_to_use
         gcUpdateTaxFields         = param_so.update_tax_fields.
         tbPrintDelvTick:SENSITIVE = NO.

       CASE param_so.pick_process_to_use:
         WHEN "Pick Only" THEN
         DO:
           ASSIGN
             cbDisplayUOM:SCREEN-VALUE = "Picking UOM".

           IF ip-calling_module:FILE-NAME = "comtstat.w" THEN
             ASSIGN
               tbPrintDelvTick:VISIBLE = NO.
         END.
         WHEN "Delivery Only" THEN
         DO:
           ASSIGN
             cbDisplayUOM:SCREEN-VALUE = "Delivery UOM".

           IF ip-calling_module:FILE-NAME = "comtstat.w" THEN
             ASSIGN
               tbPrintDelvTick:VISIBLE   = YES
               tbPrintDelvTick:SENSITIVE = glAffectInv WHEN goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","print_delv_tickets_exp").
         END.
         OTHERWISE
         DO:
           ASSIGN
             cbDisplayUOM:SCREEN-VALUE = "Picking UOM".

           IF ip-calling_module:FILE-NAME = "comtstat.w" THEN
             ASSIGN
               tbPrintDelvTick:VISIBLE   = YES
               tbPrintDelvTick:SENSITIVE = glAffectInv WHEN goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","print_delv_tickets_exp").
         END.
       END CASE.

       ASSIGN
         glCrCheckShipments = param_so.cr_check_shipments
         glPrintOnHold      = param_so.print_delv_on_hold.

       IF goSecurityManager:IsMenuItemGranted("dp_dispatch_entry","mn_dp_entmenu.p") THEN
       DO:
         RUN sstatd.p
           ( INPUT  so_header.credit_queue_status,
             INPUT  so_header.so_status,
             INPUT  so_header.price_hold,
             INPUT  so_header.order_hold,
             INPUT  so_header.so_status_type,
             INPUT  "",
             OUTPUT cTranStatus ).

         IF cTranStatus = "Price Hold" THEN
           DISABLE btDispatch WITH FRAME {&FRAME-NAME}.
         ELSE IF param_so.dispatch_on_credit_hold = NO AND
                (cTranStatus = "Credit Hold" OR
                 cTranStatus = "Cr/Price Hold")
         THEN
         DO:
          IF fiCredStat:SCREEN-VALUE = "Hold" THEN
            DISABLE btDispatch WITH FRAME {&FRAME-NAME}.
          ELSE
            ENABLE btDispatch WITH FRAME {&FRAME-NAME}.
         END.
         ELSE IF fiCredStat:SCREEN-VALUE = "Hold" THEN
           DISABLE btDispatch WITH FRAME {&FRAME-NAME}.
         ELSE
           ENABLE btDispatch WITH FRAME {&FRAME-NAME}.
       END. /* do if cleared for dispatch entry */
     END. /* for first param_so */

     IF ip-calling_module:FILE-NAME = "comtstat.w" THEN
       APPLY "VALUE-CHANGED" TO cbStatus.

/*   IF glCrCheckShipments  THEN
       DISPLAY fiCredStat WITH FRAME {&FRAME-NAME}.
     ELSE
       HIDE fiCredStat.*/

     ASSIGN
       l-need     = NO
       l-prev-ptr = ?.

     RUN create-temp(INPUT ip-ship_recid).

     DISPLAY fi-adf WITH FRAME {&FRAME-NAME}.

     RUN open-query.
  END.

  DO WITH FRAME {&FRAME-NAME}:

     IF l-delete  = YES         AND
        g-context <> "Display"  THEN
       ASSIGN
         bt-delete:SENSITIVE = TRUE
         bt-delete:VISIBLE   = TRUE.

     IF g-context = "Display" THEN
     DO:
       ASSIGN
         bt-update_detail:SENSITIVE = FALSE
         bt-update_detail:VISIBLE   = TRUE
         btAdd           :SENSITIVE = FALSE
         btAdd           :VISIBLE   = TRUE.
     END.
     ELSE
     DO:
       IF glAffectInv = YES THEN
         ASSIGN
           bt-update_detail:SENSITIVE = TRUE
           bt-update_detail:VISIBLE   = TRUE
           btAdd           :SENSITIVE = TRUE
           btAdd           :VISIBLE   = TRUE.
       ELSE
       DO:
         ASSIGN
           glMoveDetail               = YES
           bt-update_detail:SENSITIVE = TRUE
           bt-update_detail:VISIBLE   = TRUE
           btAdd           :SENSITIVE = FALSE
           btAdd           :VISIBLE   = FALSE.

         /* Direct Branch Transfer */
         IF CAN-FIND( FIRST transfer_detail WHERE
                            transfer_detail.req_tran_id_sysid = gcSOSysid AND
                            transfer_detail.req_tran_type     = "SO"      AND
                            transfer_detail.req_tran_id       = giSOID
                            NO-LOCK ) THEN
           ASSIGN
             bt-update_detail:SENSITIVE = FALSE.

         IF NUM-RESULTS("br-shipdetails") <= 1 THEN
         DO:
           ASSIGN
             lBuildShipByPO = NO.

           FOR FIRST param_so WHERE
                     param_so.system_id = gcCategoryList[{&param_so-sys-id}]
                     NO-LOCK:
             ASSIGN
               lBuildShipByPO = param_so.direct_ship_by_po.
           END.

           IF lBuildShipByPO = YES THEN
           DO:
             FIND FIRST bl-temp-ship-details NO-LOCK NO-ERROR.

             IF AVAILABLE bl-temp-ship-details THEN
               RUN movshpdtl.p ON SERVER g-AppSrvr
                 ( INPUT        gscSessionContextId,
                   INPUT        "explship.w",
                   INPUT        "GetOpenShipments",
                   INPUT        lBuildShipByPO,
                   INPUT        bl-temp-ship-details.linked_po,
                   INPUT        bl-temp-ship-details.so_id_sysid,
                   INPUT        bl-temp-ship-details.so_id,
                   INPUT        bl-temp-ship-details.ship-num,
                   INPUT        STRING(bl-temp-ship-details.sequence),
                   INPUT        0,
                   INPUT        TABLE ttProcessedTrans,
                   INPUT-OUTPUT cDummy,
                         OUTPUT cOpenShipments,
                         OUTPUT cDummy,
                         OUTPUT cDummy,
                         OUTPUT lDummy,
                         OUTPUT DATASET dsErrorMsg ).

             IF TRIM(cOpenShipments) = "" THEN
               ASSIGN
                 bt-update_detail:SENSITIVE = FALSE.
           END.
           ELSE
           DO:
             IF NOT CAN-FIND( FIRST bl-shipments_header2 WHERE
                                    bl-shipments_header2.system_id     = bl-shipments_header.system_id    AND
                                    bl-shipments_header2.so_id_sysid   = bl-shipments_header.so_id_sysid  AND
                                    bl-shipments_header2.so_id         = bl-shipments_header.so_id        AND
                                    bl-shipments_header2.shipment_num <> bl-shipments_header.shipment_num AND
                                    bl-shipments_header2.status_flag  <> "I"
                                    NO-LOCK ) THEN
             DO:
               ASSIGN
                 bt-update_detail:SENSITIVE = FALSE.
             END.
           END.

         END.
       END.
     END.

     lReturn = {setflwproperty.i &WidgetHdl=fiExpDate:HANDLE
                                 &RequestedAction='Required'
                                 &Setting='YES'}.
  END.

  IF glAffectInv = YES THEN
  DO:
    ASSIGN
      temp-ship-details.linked_po:VISIBLE IN BROWSE br-shipdetails = NO.
  END.

  {waitoff.i}

  IF NUM-RESULTS("br-shipdetails") > 0 THEN
  DO:
     IF br-shipdetails:SELECT-FOCUSED-ROW() IN FRAME {&FRAME-NAME} THEN.
     IF AVAILABLE temp-ship-details THEN
       APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
  END.

  RUN set_message_bmp
    ( INPUT -1 ).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CalcDetailChargesAndGM wn-ship_details
PROCEDURE CalcDetailChargesAndGM :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lCalDispGm          AS LOGICAL NO-UNDO.
  DEFINE VARIABLE dExtCost            AS DECIMAL NO-UNDO.
  DEFINE VARIABLE dGMDollar           AS DECIMAL NO-UNDO.

  FOR EACH temp-ship-details EXCLUSIVE-LOCK:

    RUN getothchgcst.p ON SERVER g-AppSrvr
      ( INPUT  temp-ship-details.so_id_sysid,
        INPUT  temp-ship-details.so_id,
        INPUT  temp-ship-details.sequence,
        INPUT  "SO",
        INPUT  temp-ship-details.ship-num,
        INPUT  (temp-ship-details.qty * temp-ship-details.disp_qty_conv),
        INPUT  YES,                       /* Factor in Rebates */
        INPUT  "All",                     /* freight, non-freight, or all */
        INPUT  "",
        INPUT  tbDispAllocChgCost:CHECKED IN FRAME {&FRAME-NAME},
        OUTPUT temp-ship-details.adf,
        OUTPUT temp-ship-details.oth_chg_gm,
        OUTPUT temp-ship-details.oth_chg_no_gm,
        OUTPUT temp-ship-details.oth_cost_gm,
        OUTPUT temp-ship-details.oth_cost_no_gm ).

    RUN extcost.p
      ( INPUT  temp-ship-details.cost,
        INPUT  temp-ship-details.cost_conv,
        INPUT  temp-ship-details.qty,
        INPUT  temp-ship-details.disp_qty_conv,
        INPUT  0,
        INPUT  0,
        INPUT  0,
        INPUT  2,
        OUTPUT dExtCost ).
    
    common.GrossMarginCalc:CalcGM
        ( INPUT  temp-ship-details.currency_conversion_factor,
          INPUT  temp-ship-details.ext_price,
          INPUT  dExtCost,
          INPUT  temp-ship-details.oth_chg_gm,
          INPUT  temp-ship-details.oth_cost_gm,
          OUTPUT dGMDollar,
          OUTPUT temp-ship-details.gm ).
    
    ASSIGN
      lCalDispGm = NO.

    IF temp-ship-details.cost_desig = "A" THEN
    DO:
      IF goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_average_cost") THEN
        ASSIGN
          temp-ship-details.disp_cost = temp-ship-details.cost
          temp-ship-details.dispgm    = temp-ship-details.gm.
      ELSE
        ASSIGN
          lCalDispGm                  = YES
          temp-ship-details.disp_cost = temp-ship-details.market_cost.
    END.
    ELSE
    DO:
      IF goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_market_cost") THEN
        ASSIGN
          temp-ship-details.disp_cost = temp-ship-details.cost
          temp-ship-details.dispgm    = temp-ship-details.gm.
      ELSE
        ASSIGN
          lCalDispGm                  = YES
          temp-ship-details.disp_cost = temp-ship-details.average_cost.
    END.

    IF lCalDispGm = YES THEN
    DO:
      RUN extcost.p
        ( INPUT  temp-ship-details.disp_cost,
          INPUT  temp-ship-details.cost_conv,
          INPUT  temp-ship-details.qty,
          INPUT  temp-ship-details.disp_qty_conv,
          INPUT  0,
          INPUT  0,
          INPUT  0,
          INPUT  2,
          OUTPUT dExtCost ).

      common.GrossMarginCalc:CalcGM
        ( INPUT  temp-ship-details.currency_conversion_factor,
          INPUT  temp-ship-details.ext_price,
          INPUT  dExtCost,
          INPUT  temp-ship-details.oth_chg_gm,
          INPUT  temp-ship-details.oth_cost_gm,
          OUTPUT dGMDollar,
          OUTPUT temp-ship-details.dispgm ).
    END. /* IF lCalDispGm = YES THEN */

  END. /* FOR EACH temp-ship-details EXCLUSIVE-LOCK: */

  /* handle total adf for the shipment */
  IF fi-asterisk:SCREEN-VALUE IN FRAME {&FRAME-NAME} <> "*" THEN
  DO:
    RUN getadf.p ON SERVER g-AppSrvr
      ( INPUT  "SHIPMENT",           /* use the shipment option here because we need all the information when adf is not overridden */
        INPUT  gcSOSysid,
        INPUT  giSOID,
        INPUT  giShipNum,
        OUTPUT l-total-adf,
        OUTPUT l-adf-already-invoiced,
        OUTPUT l-header-adf,
        OUTPUT l-discountable,
        OUTPUT g-total-count,
        OUTPUT g-shipment-count,
        OUTPUT l-error-message ).

    IF l-total-adf < 0 THEN
      ASSIGN
        fi-adf:SCREEN-VALUE IN FRAME {&FRAME-NAME} = STRING(0).
    ELSE
      ASSIGN
        fi-adf:SCREEN-VALUE IN FRAME {&FRAME-NAME} = STRING(l-total-adf).
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE calc_adf wn-ship_details
PROCEDURE calc_adf :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  /* If the adf has been overridden at the bl-shipments_header level, use that */
  IF bl-shipments_header.override_adf THEN
  DO WITH FRAME {&FRAME-NAME}:
    ASSIGN
      fi-adf                 = bl-shipments_header.adf
      fi-asterisk            = "*"
      glShippedADFOverride   = YES
      //fi-asterisk:BGCOLOR    = 8
      fi-adf-message:VISIBLE = YES.

    DISABLE fi-asterisk.
    DISPLAY fi-asterisk.
    RETURN.
  END.

  /* If the ADF was overriden at the so_header level, use that, otherwise calculate ADF */
  IF so_header.override_adf THEN
  DO WITH FRAME {&FRAME-NAME}:
    ASSIGN
      fi-asterisk = "*"
      glShippedADFOverride     = YES
      fi-adf-message:VISIBLE   = YES
      //fi-asterisk:BGCOLOR      = 8
      glSOHeaderADFOverride    = YES.

    DISABLE fi-asterisk.
    DISPLAY fi-asterisk.

    IF bl-shipments_header.shipment_num = 1 THEN
      ASSIGN
        fi-adf = so_header.adf.
    ELSE
    DO: /* if not the first shipment for this order */

      /* getadf.p will tell us how much adf has already been applied. */
      RUN getadf.p ON SERVER g-AppSrvr
        ( INPUT  "BLDSHIP",           /* use the bldship option here because it's faster, and it gives us all we need when adf is overridden. */
          INPUT  so_header.system_id,
          INPUT  so_header.so_id,
          INPUT  bl-shipments_header.shipment_num,
          OUTPUT l-total-adf,
          OUTPUT l-adf-already-invoiced,
          OUTPUT l-header-adf,
          OUTPUT l-discountable,
          OUTPUT g-total-count,
          OUTPUT g-shipment-count,
          OUTPUT l-error-message ).

      /* If we have overridden ADF that needs to be applied yet, go ahead and apply it,
         otherwise, force ADF for this shipment ro zero. */
      IF so_header.adf > l-adf-already-invoiced THEN
        ASSIGN fi-adf = so_header.adf - l-adf-already-invoiced.
      ELSE
        ASSIGN fi-adf = 0.
      /* Note: leave the override_adf flag = YES, even if adf qty is 0. That will save processing
         and avoid potential problems at invoice time. */

    END. /* do if bl-shipments_header.shipment_num <> 1 */
  END. /* do if so_header.override_adf */
  ELSE
  DO WITH FRAME {&FRAME-NAME}:
    ASSIGN
      fi-asterisk            = ""
      fi-adf-message:VISIBLE = NO.

    RUN getadf.p ON SERVER g-AppSrvr
      ( INPUT  "SHIPMENT",           /* use the shipment option here because we need all the information when adf is not overridden */
        INPUT  so_header.system_id,
        INPUT  so_header.so_id,
        INPUT  bl-shipments_header.shipment_num,
        OUTPUT l-total-adf,
        OUTPUT l-adf-already-invoiced,
        OUTPUT l-header-adf,
        OUTPUT l-discountable,
        OUTPUT g-total-count,
        OUTPUT g-shipment-count,
        OUTPUT l-error-message ).

    ASSIGN
      fi-adf = l-total-adf.

    IF fi-adf < 0 THEN
      ASSIGN fi-adf = 0.

    DO WITH FRAME {&FRAME-NAME}:
      HIDE fi-asterisk.
    END.

  END.  /* do if not override_adf */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CallAssignStop wn-ship_details
PROCEDURE CallAssignStop :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipcRouteID     AS CHARACTER  NO-UNDO.

  DEFINE VARIABLE        cUpdateStop    AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE        iStopNo        AS INTEGER    NO-UNDO.
  DEFINE VARIABLE        lCancel        AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE        cDriver        AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE        lContinue      AS LOGICAL    NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    ASSIGN
      glByPassEntryTrigger2 = YES.

    /* Make all the current Agility Progress windows insensitive */
    RUN setWindowStates IN gshAgilMenuMgr
      ( INPUT "ModalOn",
        INPUT "Minimize:NO" ).

    /* Ask the .NET client session to invoke its approach to modal mode so the user can't start anything in the Progress client from there. */
    PUBLISH "progressEvent" ("ModalMode", "ModalMode:On", "" /*cEventId - blank for event chains that originate on the Progress client */).

    RUN so/assignstop.w
      ( INPUT  g-cust_key,
        INPUT  giShiptoSeq,
        INPUT  ipcRouteID,
        INPUT  INTEGER(fi-stop:SCREEN-VALUE),
        OUTPUT cUpdateStop,
        OUTPUT iStopNo,
        OUTPUT lCancel ).

    /* Ask the .NET client to remove the modal mode */
    PUBLISH "progressEvent" ("ModalMode", "ModalMode:Off", "" /*cEventId - blank for event chains that originate on the Progress client */).

    /* If there were any windows that were sensitive when we started, make them sensitive again.  The ones that were not sensitive to begin with will still not be sensitive. */
    RUN setWindowStates IN gshAgilMenuMgr
      ( INPUT "ModalOff",
        INPUT "Minimize:NO" ).

    ASSIGN
      glByPassEntryTrigger2 = NO.

    IF lCancel = YES THEN
    DO:
      ASSIGN
        fi-route              = gcPrevRoute
        fi-route:SCREEN-VALUE = gcPrevRoute.

      RETURN.
    END.

    RUN df/sifetchdfltroutedriver.p ON SERVER g-AppSrvr
      ( INPUT  ipcRouteID,
        OUTPUT cDriver,
        OUTPUT DATASET dsErrorMsg ).

    IF NOT ProcessMessages("") THEN
    DO:
      ASSIGN
        fi-route              = gcPrevRoute
        fi-route:SCREEN-VALUE = gcPrevRoute.

      RETURN.
    END.

    IF cDriver <> ? AND
       cDriver <> fiDriver:SCREEN-VALUE THEN
    DO:
      RUN ValidateDriver
        ( INPUT  ?,
          INPUT  cDriver,
          INPUT  YES,
          OUTPUT lContinue ).
    END.

    ASSIGN
      fi-route:SCREEN-VALUE = ipcRouteID
      gcPrevRoute           = ipcRouteID.

    IF cUpdateStop <> "Retain" THEN
      ASSIGN
        fi-stop:SCREEN-VALUE = STRING(iStopNo).

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CallSpecifyCommitFinish wn-ship_details
PROCEDURE CallSpecifyCommitFinish :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER ipdNewQty        AS DECIMAL    NO-UNDO.  /* not used */
DEFINE INPUT PARAMETER iplChangeOK      AS LOGICAL    NO-UNDO.

DEFINE VARIABLE rRowid               AS   ROWID                   NO-UNDO.
DEFINE VARIABLE cHdrRvwStatus        AS   CHARACTER               NO-UNDO.
DEFINE VARIABLE cOrigTallyMsg        AS   CHARACTER               NO-UNDO.
DEFINE VARIABLE cOrigTallyPhrase     AS   CHARACTER               NO-UNDO.
DEFINE VARIABLE dOrigQty             AS   DECIMAL                 NO-UNDO.
DEFINE VARIABLE cItemSysid           AS   CHARACTER               NO-UNDO.
DEFINE VARIABLE iItemPtr             AS   INTEGER                 NO-UNDO.
DEFINE VARIABLE rRecid               AS   RECID                   NO-UNDO.
DEFINE VARIABLE cTallyMsg            AS   CHARACTER               NO-UNDO.
DEFINE VARIABLE dDummy               AS   DECIMAL                 NO-UNDO.

DEFINE BUFFER   bl-temp-ship-details FOR  temp-ship-details.


DO WITH FRAME frExplship:

  ASSIGN
    glByPassEntryTrigger2 = NO.

  IF iplChangeOK = YES THEN
  DO:
    {waiton.i}

    ASSIGN
      l-need            = NO
      l-prev-ptr        = ?
      l-comitree-called = NO.

    ASSIGN
      cOrigTallyMsg    = gcTallyMsg
      cOrigTallyPhrase = temp-ship-details.cWOPhraseTally
      dOrigQty         = temp-ship-details.qty
      cItemSysid       = temp-ship-details.item_ptr_sysid
      iItemPtr         = temp-ship-details.item_ptr
      rRecid           = temp-ship-details.rec.

    RUN so/shipdetailbuildtemp.p ON SERVER g-Appsrvr
      (INPUT gscSessionContextID,
       INPUT temp-ship-details.so_id_sysid,
       INPUT temp-ship-details.so_id,
       INPUT temp-ship-details.sequence, /*tran seq (-1 returns all)*/
       INPUT temp-ship-details.ship-num,
       INPUT tbDispAllocChgCost:CHECKED,
       INPUT cbDisplayUOM:SCREEN-VALUE,
       INPUT "Staging Details",
       INPUT gcSaleTypeSysid,
       INPUT gcSaleType,
       INPUT-OUTPUT DATASET dsTempShipDet).

    /* See if commit changes affected any other details with same item */
    FOR EACH bl-temp-ship-details WHERE
             bl-temp-ship-details.item_ptr_sysid  = cItemSysid AND
             bl-temp-ship-details.item_ptr        = iItemPtr   AND
             bl-temp-ship-details.rec            <> rRecid
             NO-LOCK:
      RUN modify-temp
        ( INPUT RECID(bl-temp-ship-details),
          INPUT NO ).
    END.

    FIND temp-ship-details WHERE
         temp-ship-details.rec = grSpecifyCmtCurrentRowRecid
         EXCLUSIVE-LOCK NO-ERROR.

    IF AVAILABLE temp-ship-details THEN
    DO:
      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "TallyCalc" } THEN
        RUN GetTally /*in explship.i*/
          ( INPUT  temp-ship-details.so_id_sysid,  /*tran_sysid  */
            INPUT  temp-ship-details.so_id,        /*tran_id     */
            INPUT  temp-ship-details.sequence,     /*tran_seq    */
            INPUT  temp-ship-details.ship-num,     /*shipment num*/
            INPUT  NO,                             /*requires BF qty ?*/
            OUTPUT cTallyMsg,                      /*tally string*/
            OUTPUT dDummy ).                       /*tally quantity*/

      IF cOrigTallyMsg    <> cTallyMsg                        OR
         cOrigTallyPhrase <> temp-ship-details.cWOPhraseTally OR
         dOrigQty         <> temp-ship-details.qty            THEN
      DO:
        RUN so/podautohndldriverchgs.p ON SERVER g-Appsrvr
          ( INPUT  temp-ship-details.so_id_sysid,
            INPUT  temp-ship-details.so_id,
            INPUT  temp-ship-details.sequence,
            INPUT  temp-ship-details.ship-num,
            OUTPUT cHdrRvwStatus ).

        IF cHdrRvwStatus = "Reviewed" THEN
          ASSIGN
            fiReviewStatus:SCREEN-VALUE = cHdrRvwStatus
            tbHold        :CHECKED      = NO
            tbHold        :SENSITIVE    = glHoldAllowed
            glOrigHold                  = NO.

        ASSIGN
          temp-ship-details.review_status       = "Reviewed"
          temp-ship-details.pod_qty_adjustments = "".
      END.

    END.

    FIND CURRENT temp-ship-details NO-LOCK NO-ERROR.

    {waitoff.i}

    RUN open-query.

    IF NUM-RESULTS("br-shipdetails") > 0 THEN
      APPLY "ENTRY" TO br-shipdetails.

    /* lets see if we can find the rec we processed */
    FIND temp-ship-details WHERE
         temp-ship-details.rec = grSpecifyCmtCurrentRowRecid
         NO-LOCK NO-ERROR.

    /* if the rec was found, reposition to there */
    IF AVAILABLE(temp-ship-details) THEN
    DO:

      /* Save Rowid as the deselect-rows function will change records in focus. */
      ASSIGN
        rRowid = ROWID(temp-ship-details).

      IF br-shipdetails:DESELECT-ROWS() THEN.
      REPOSITION br-shipdetails TO ROWID rRowid.
      br-shipdetails:SELECT-FOCUSED-ROW() IN FRAME {&FRAME-NAME}.
      APPLY "ROW-ENTRY" TO br-shipdetails.
      APPLY "ENTRY":U TO temp-ship-details.dDisplayQty IN BROWSE {&BROWSE-NAME}.
      RETURN NO-APPLY.
    END.
    ELSE
    DO:
      /* otherwise, reposition to the next record */
      IF grSpecifyCmtNextRowid <> ? THEN
      DO:
        /* if it's the last row and we're going to the next (first) rec, then we want to go to the first row */
        IF glSpecifyCmtLastRow THEN
          giSpecifyCmtCurrentRow = 1.

        br-shipdetails:SET-REPOSITIONED-ROW(giSpecifyCmtCurrentRow, "ALWAYS") IN FRAME {&FRAME-NAME}.
        REPOSITION br-shipdetails TO ROWID grSpecifyCmtNextRowid.
        br-shipdetails:SELECT-ROW(giSpecifyCmtCurrentRow) IN FRAME {&FRAME-NAME}.
        APPLY "ROW-ENTRY" TO br-shipdetails.
        APPLY "ENTRY":U TO temp-ship-details.dDisplayQty IN BROWSE {&BROWSE-NAME}.
        RETURN NO-APPLY.
      END.
    END.
  END.
END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE cancelShipment wn-ship_details
PROCEDURE cancelShipment :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE l-record      AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE cOrigBranchId AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE cErrorMessage AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE iNumSelected  AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iCtr          AS INTEGER    NO-UNDO.
  DEFINE VARIABLE lCancelOk     AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE lContinue     AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE cSOSysid      AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE iSOID         AS INTEGER    NO-UNDO.
  DEFINE VARIABLE iShipmentNum  AS INTEGER    NO-UNDO.
  DEFINE VARIABLE cProfName     AS CHARACTER  NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    /* Give the confirmation message */
    RUN sysinfo.p (INPUT "delete_stg_recs_single",
                   INPUT "",
                   INPUT-OUTPUT lContinue).

    IF lContinue = NO THEN
      RETURN NO-APPLY.

    ASSIGN
      cOrigBranchId = {getagilprop.i &PropList='currentBranchID':U}
      cSOSysid      = bl-shipments_header.so_id_sysid
      iSOID         = bl-shipments_header.so_id
      iShipmentNum  = bl-shipments_header.shipment_num
      cProfName     = bl-shipments_header.prof_name.

    DO TRANSACTION ON STOP  UNDO, RETRY
                   ON ERROR UNDO, RETRY:

      IF RETRY THEN
      DO:
        RUN sysinfo.p
          ( INPUT        "record_lock",
            INPUT        "",
            INPUT-OUTPUT lContinue ).

        IF lContinue = NO THEN
          RETURN NO-APPLY.
      END.

      RUN cancelso.p
         ( INPUT  THIS-PROCEDURE:HANDLE,
           INPUT  {&WINDOW-NAME},
           INPUT  "comtstat",                      /* CalledFrom */
           INPUT  "ValidateAndCancel",
           INPUT  cSOSysid,
           INPUT  iSOID,
           INPUT  iShipmentNum,                    /* shipment #*/
           INPUT  "",                              /* status */
           INPUT  NO,                              /*PromptForCancel */
           INPUT  ?,                               /* affect Inventory */
           INPUT  YES,                             /* cancel Shipments */
           INPUT  NO,                              /* cancel unstaged portion of order */
           INPUT  YES,                             /*iplAllowUI           */
           INPUT  YES,                             /*iplAllowPayments     */
           INPUT  YES,                             /*iplAllowLinkedOrders */
           INPUT  "",                              /* Reason Code    - no used here */
           INPUT  "",                              /* Reason Comment - no used here */
           INPUT  NO,                              /* Cancel LinkedTransaction - used by API only */
           INPUT  NO,                              /* Allow Printed Tran - used by API only */
           INPUT  NO,                              /* Send 855 - used by API only */
           INPUT  NO,                              /* Send 870 - used by API only */
           OUTPUT lCancelOk,
           OUTPUT cErrorMessage).

    END. /* transaction */

    {waitoff.i}

    IF cErrorMessage = "overpaymentnotinvoiced"        OR
       cErrorMessage = "overpaymentnotinvoicedloyalty" THEN
    DO:
      RUN sysinfok.p
        (INPUT cErrorMessage,
         INPUT STRING(iSOID)).

      RETURN.
    END.

    /* Note that there is a separate database transaction inside
       cancelDispatch.  We do not want to hold the database transaction
       open for the whole thing because the user can be asked a
       question in cancelDispatch. */
    RUN cancelDispatch /*updstagingstat.i*/
      ( INPUT cSOSysid,
        INPUT iSOID,
        INPUT iShipmentNum,
        INPUT cProfName ).

    IF ip-calling_module:FILE-NAME = "comtstat.w"  THEN
    DO:
      RUN deletettStagedHeader IN ip-calling_module
        (INPUT  ip-shiphead_rec,
         INPUT  "delete",
         OUTPUT lContinue).

      IF lContinue = NO THEN
      DO:
        APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
        RETURN NO-APPLY.
      END.
    END.
    ELSE
    DO:
      APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
      RETURN NO-APPLY.
    END.
  END. /*with frame*/
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE change_branch wn-ship_details
PROCEDURE change_branch :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER ipcToBranch AS CHARACTER NO-UNDO.

DEFINE VARIABLE llChanged   AS LOGICAL    NO-UNDO.
DEFINE VARIABLE lcNewBranch AS CHARACTER  NO-UNDO.

RUN allwmainSetBranch(INPUT ipcToBranch).

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CheckBranchTransfer wn-ship_details
PROCEDURE CheckBranchTransfer :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER ipdNewStockQty       AS DECIMAL     NO-UNDO.
  DEFINE OUTPUT PARAMETER oplOKtoContinue      AS LOGICAL     NO-UNDO INIT YES.

  DEFINE VARIABLE         dStockQtyOrdered     AS  DECIMAL    NO-UNDO.
  DEFINE VARIABLE         dOtherQty            AS  DECIMAL    NO-UNDO.
  DEFINE VARIABLE         dStockQtyRemaining   AS  DECIMAL    NO-UNDO.
  DEFINE VARIABLE         cMessage             AS  CHARACTER  NO-UNDO.

  DEFINE BUFFER           bl-so_detail         FOR so_detail.
  DEFINE BUFFER           bl-shipments_detail  FOR shipments_detail.
  DEFINE BUFFER           bl-pick_detail       FOR pick_detail.


  IF glTransferOrder = YES THEN
  DO:
    /* Check to see if there are any branch transfer issues before continuing */
    FOR FIRST bl-so_detail WHERE
              bl-so_detail.system_id = temp-ship-details.so_id_sysid AND
              bl-so_detail.so_id     = temp-ship-details.so_id AND
              bl-so_detail.sequence  = temp-ship-details.sequence
              NO-LOCK:

      ASSIGN
        dStockQtyOrdered = bl-so_detail.qty_ordered * bl-so_detail.disp_qty_conv
        dOtherQty        = 0.

      /* need to know how much is already staged in other stagings for this item */
      FOR EACH bl-shipments_detail WHERE
               bl-shipments_detail.system_id     = bl-so_detail.system_id AND
               bl-shipments_detail.so_id         = bl-so_detail.so_id     AND
               bl-shipments_detail.so_id_sysid   = bl-so_detail.system_id AND
               bl-shipments_detail.sequence      = bl-so_detail.sequence  AND
               bl-shipments_detail.shipment_num <> temp-ship-details.ship-num
               NO-LOCK:
        ASSIGN
          dOtherQty = dOtherQty + bl-shipments_detail.qty.
      END.

      FOR EACH bl-pick_detail WHERE
               bl-pick_detail.system_id     = bl-so_detail.system_id AND
               bl-pick_detail.tran_id       = bl-so_detail.so_id     AND
               bl-pick_detail.tran_type     = "SO"                   AND
               bl-pick_detail.tran_sysid    = bl-so_detail.system_id AND
               bl-pick_detail.tran_seq      = bl-so_detail.sequence  AND
               bl-pick_detail.shipment_num <> temp-ship-details.ship-num
               NO-LOCK:
        ASSIGN
          dOtherQty = dOtherQty + (bl-pick_detail.qty_requested + bl-pick_detail.qty_adjusted).
      END.

      ASSIGN
        dStockQtyRemaining = dStockQtyOrdered - dOtherQty.

      IF ipdNewStockQty > dStockQtyRemaining THEN
      DO:
        /* We are only checking to see if reserved stock can be
           uncommitted, no need for tally information for this call to chgbtdet.p */
        EMPTY TEMP-TABLE ttTallyChange.

        RUN chgbtdet.p
          ( INPUT  so_detail.so_id,
            INPUT  so_detail.system_id,
            INPUT  so_detail.sequence,
            INPUT  "SO",
            INPUT  "Check",
            INPUT  ((dOtherQty + ipdNewStockQty) / so_detail.disp_qty_conv),
            INPUT  so_detail.uom,
            INPUT  NO,
            INPUT  TABLE ttTallyChange,
            OUTPUT cMessage,
            OUTPUT oplOKtoContinue ).

        IF oplOKtoContinue = NO THEN
        DO:
          MESSAGE cMessage VIEW-AS ALERT-BOX INFORMATION BUTTONS OK.

          RETURN.
        END. /* IF oplOKtoContinue = NO THEN */
      END. /* IF ipdNewStockQty > dStockQtyRemaining THEN */
    END. /* FOR FIRST bl-so_detail WHERE... */
  END. /* IF glTransferOrder = YES THEN */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CheckChanges wn-ship_details
PROCEDURE CheckChanges :
/*------------------------------------------------------------------------------
  Purpose:  called from usodetal.w
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplContinue AS LOGICAL NO-UNDO INIT YES.


  DO WITH FRAME {&FRAME-NAME}:

    ASSIGN
      fi-ship_date
      fiExpDate
      fi-route
      fi-stop
      fiDriver
      fiProNumber
      fi-adf.

    IF fi-ship_date             <> gdtOrigShipDate OR
       fiExpDate                <> gdtOrigExpDate  OR
       fi-route                 <> g-orig-route    OR
       fiDriver                 <> gcOrigDriver    OR
       fi-stop                  <> g-orig-stop     OR
       fiProNumber              <> gcOrigProNumber OR
       tbHold:CHECKED           <> glOrigHold      OR
      (fi-asterisk:SCREEN-VALUE  = "*"             AND
       fi-adf                   <> gdOrigADF)     THEN
    DO:
      ASSIGN
        oplContinue = FALSE.

      RUN sysinfo.p
        ( INPUT        "modified",
          INPUT        "",
          INPUT-OUTPUT oplContinue ).
    END.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CheckPrintStatus wn-ship_details
PROCEDURE CheckPrintStatus :
/*------------------------------------------------------------------------------
  Purpose:  called from usodetal.w
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplContinue AS LOGICAL NO-UNDO INIT YES.

  DEFINE VARIABLE cPickPrinted AS CHARACTER   NO-UNDO INIT "Not Printed".
  DEFINE VARIABLE cDelvPrinted AS CHARACTER   NO-UNDO INIT "Not Printed".
  DEFINE VARIABLE iPickId      AS INTEGER     NO-UNDO.

  DO WITH FRAME {&FRAME-NAME}:

    IF bl-shipments_header.pick_status = 15 THEN
      ASSIGN
        cPickPrinted = "Pick Report"
        iPickID      = 1.

    IF CAN-FIND( FIRST print_transaction WHERE
                       print_transaction.system_id = gcCategoryList[{&print_transaction-sys-id}] AND
                       print_transaction.tran_type = "Delivery Ticket" AND
                       print_transaction.tran_id   = (STRING( bl-shipments_header.so_id, "{&gcFullTranID}") + "-" + STRING( bl-shipments_header.shipment_num, "999"))
                       NO-LOCK ) THEN
      ASSIGN
        cDelvPrinted = "Delivery Ticket".

    IF (gcPickProcess2Use       = "Both Required" OR
       (gcPickProcess2Use       = "Delivery Only" AND
       (cPickPrinted            = "Not Printed"   OR    /* This condition handles records pre v2.4.2 */
        iPickID                 > 0)))            AND
        cDelvPrinted            = "Not Printed"   AND
        tbPrintDelvTick:CHECKED = NO              THEN
    DO:
      RUN sysinfok.p
        ( INPUT "prtdelvpickreqd",
          INPUT "Delivery|invoiced" ).

      ASSIGN
        oplContinue = NO.
      RETURN.
    END.

    IF gcPickProcess2Use       BEGINS "Default"     AND
       cPickPrinted            =      "Not Printed" AND
       cDelvPrinted            =      "Not Printed" AND
       tbPrintDelvTick:CHECKED = NO                 THEN
    DO:
      RUN sysinfok.p
        ( INPUT "prtdelvpickreqd",
          INPUT "Delivery|invoiced" ).

      ASSIGN
        oplContinue = NO.
      RETURN.
    END.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE check_for_tally_calc wn-ship_details
PROCEDURE check_for_tally_calc :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE VARIABLE dDummy AS   DECIMAL    NO-UNDO.

ASSIGN
  gcTallyMsg         = ""
  g-tally_qty        = 0
  g-orig_tallymsg    = "".

IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                  &cProcessContext = "TallyCalc" } THEN
DO:
  RUN GetTally /*in explship.i*/
    ( INPUT  temp-ship-details.so_id_sysid,  /*tran_sysid  */
      INPUT  temp-ship-details.so_id,        /*tran_id     */
      INPUT  temp-ship-details.sequence,     /*tran_seq    */
      INPUT  temp-ship-details.ship-num,     /*shipment num*/
      INPUT  YES,                            /*requires BF qty ?*/
      OUTPUT gcTallyMsg,                     /*tally string*/
      OUTPUT g-tally_qty ).                  /*tally quantity*/

  ASSIGN
    g-orig_tallymsg    = gcTallyMsg.

  RUN pos_tally_calc_bt.

END.
ELSE
  IF glAffectInv = NO AND
     {invitemtype.i &cItemType       = temp-ship-details.item_type
                    &cProcessContext = "LumberItem" } THEN
    RUN pos_tally_calc_bt.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ChooseBtDelete wn-ship_details
PROCEDURE ChooseBtDelete :
/*------------------------------------------------------------------------------
  Purpose: 
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

{so/explshipchoosebtdelete.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ChoosePriceUOM wn-ship_details
PROCEDURE ChoosePriceUOM:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lContinue           AS LOGICAL            NO-UNDO.
  
  goSODetailPresenter:ChooseBtPriceUOM
    ( INPUT temp-ship-details.item,
      INPUT glAllowPCRefUOM,
     OUTPUT lContinue ).
    
  IF lContinue THEN 
    RUN RefreshLineUpdate.
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME




&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ChooseUOM wn-ship_details
PROCEDURE ChooseUOM:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

DEFINE VARIABLE lContinue           AS LOGICAL            NO-UNDO.
  
ChooseBTUOM( INPUT temp-ship-details.item,
             INPUT glAllowPCRefUOM,
            OUTPUT lContinue ).
            
  IF lContinue THEN 
    RUN RefreshLineUpdate.                        

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ClearDtlHandle wn-ship_details
PROCEDURE ClearDtlHandle :
/*------------------------------------------------------------------------------
  Purpose:  called from usodetal.w
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipcDummy     AS CHARACTER NO-UNDO.


  DELETE PROCEDURE ghLinentryProc NO-ERROR.

  ASSIGN
    ghLinentryProc = ?.

  CURRENT-WINDOW           = {&WINDOW-NAME}.
  CURRENT-WINDOW:SENSITIVE = YES.

  ASSIGN
    glEnabled     = YES
    ghUsodetalHdl = ?.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ClearLineUpdate wn-ship_details
PROCEDURE ClearLineUpdate:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

IF AVAILABLE(bltemp-ship-details) THEN 
  RELEASE bltemp-ship-details.
    
ASSIGN 
  grLineUpdateRECID     = ?
  grOrigLineUpdateRECID = ?
  giLineUpdateRow       = 0
  glAllowPCRefUOM       = FALSE
  glAllowUnitUOM        = FALSE
  giLineUpdateSequence  = 0.

// kem - set widgets to empty

RUN SetOrigLineUpdateValues
  ( INPUT 0,
    INPUT 0,
    INPUT "",
    INPUT "",
    INPUT 0,
    INPUT "",
    INPUT 0 ).
    
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE clearMsgHandle wn-ship_details
PROCEDURE clearMsgHandle :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  IF VALID-OBJECT(goMsgWindowCaller) THEN
    goMsgWindowCaller:ClearMsgHandle().

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CloseMessageWindow wn-ship_details
PROCEDURE CloseMessageWindow :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/

  IF VALID-OBJECT(goMsgWindowCaller) THEN
  DO:
    goMsgWindowCaller:CloseMessageWindow().

    /*just in case the call back deletes the object, check again if it's valid*/
    IF VALID-OBJECT(goMsgWindowCaller) THEN
      DELETE OBJECT goMsgWindowCaller.
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE commitToLocation wn-ship_details
PROCEDURE commitToLocation :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ipiLocPtr                AS INTEGER  NO-UNDO.
DEFINE INPUT  PARAMETER iplUseDefaultLoc         AS LOGICAL  NO-UNDO.
DEFINE INPUT  PARAMETER iplRemoveFromOnHold      AS LOGICAL  NO-UNDO.

DEFINE VARIABLE lCreated               AS LOGICAL    NO-UNDO.
DEFINE VARIABLE dOrigQty               AS DECIMAL    NO-UNDO.
DEFINE VARIABLE dQtyToApply            AS DECIMAL    NO-UNDO.
DEFINE VARIABLE lFound                 AS LOGICAL    NO-UNDO.
DEFINE VARIABLE lFullTree              AS LOGICAL    NO-UNDO.
DEFINE VARIABLE lDebug                 AS LOGICAL    NO-UNDO INIT NO.

DEFINE VARIABLE lDispMsg               AS LOGICAL    NO-UNDO.
DEFINE VARIABLE lMsgDisplayed          AS LOGICAL    NO-UNDO INIT NO.
DEFINE VARIABLE iDefaultPtr            AS INTEGER    NO-UNDO INIT 0.
DEFINE VARIABLE cErrorMsg              AS CHARACTER  NO-UNDO.
DEFINE VARIABLE lContentCode           AS LOGICAL    NO-UNDO.
DEFINE VARIABLE lDummy                 AS LOGICAL    NO-UNDO.
DEFINE VARIABLE dCommitQty             AS DECIMAL    NO-UNDO.
DEFINE VARIABLE dQtyToRemoveFromOnHold AS DECIMAL    NO-UNDO.
DEFINE VARIABLE lQtyRemovedFromHold    AS LOGICAL    NO-UNDO.

DEFINE BUFFER   bf-item_reserved FOR item_reserved.


{waiton.i}


EMPTY TEMP-TABLE ttTranInfo.

CommitDetailsBlock:
FOR EACH temp-ship-details NO-LOCK:

  FIND ttItemInfo WHERE
       ttItemInfo.item_ptr_sysid = temp-ship-details.item_ptr_sysid AND
       ttItemInfo.item_ptr       = temp-ship-details.item_ptr
       NO-LOCK NO-ERROR.

  IF NOT AVAILABLE(ttItemInfo) THEN
  DO:
    EMPTY TEMP-TABLE ttItemInfoSingle NO-ERROR.

    RUN common/sifetchiteminfo.p
      ( INPUT  temp-ship-details.item_ptr_sysid,
        INPUT  temp-ship-details.item_ptr,
        INPUT  "",
        OUTPUT DATASET dsItemInfoSingle,
        OUTPUT cErrorMsg ).

    FIND ttItemInfoSingle WHERE
         ttItemInfoSingle.item_ptr_sysid = temp-ship-details.item_ptr_sysid AND
         ttItemInfoSingle.item_ptr       = temp-ship-details.item_ptr
         NO-LOCK.

    CREATE ttItemInfo.
    BUFFER-COPY ttItemInfoSingle TO ttItemInfo.
  END. /* IF NOT AVAILABLE(ttItemInfo) THEN */

  /* Skip item types that do not affect inventory (Sundry) */
  IF {invitemtype.i &cItemType       = ttItemInfo.type
                    &cProcessContext = "DNAI" } THEN
    NEXT CommitDetailsBlock.

  CREATE ttTranInfo.
  ASSIGN
    ttTranInfo.tran_type                 = "SO"
    ttTranInfo.tran_sysid                = temp-ship-details.so_id_sysid
    ttTranInfo.tran_id                   = temp-ship-details.so_id
    ttTranInfo.tran_seq                  = temp-ship-details.sequence
    ttTranInfo.sub_id                    = temp-ship-details.ship-num
    ttTranInfo.sale_type                 = gcSaleType
    ttTranInfo.detail_invent_affect      = glAffectInv
    ttTranInfo.item_ptr_sysid            = temp-ship-details.item_ptr_sysid
    ttTranInfo.item_ptr                  = temp-ship-details.item_ptr
    ttTranInfo.tran_detail_recid         = temp-ship-details.rSODetailRecid
    ttTranInfo.overridden_orig_price_uom = temp-ship-details.overridden_orig_price_uom
    ttTranInfo.overridden_orig_price     = temp-ship-details.overridden_orig_price.
  RELEASE ttTranInfo.

  RUN buildTempInvParams
    (INPUT  gcCategoryList[{&item_branch-sys-id}],
     INPUT  temp-ship-details.item_ptr_sysid,
     INPUT  temp-ship-details.item_ptr,
     INPUT  iplUseDefaultLoc,
     OUTPUT lCreated,
     OUTPUT iDefaultPtr,
     OUTPUT lContentCode).

  /* We want to skip those records that aren't specified for commit to branch/location level only */
  IF lCreated = NO THEN
  DO:
    ASSIGN
      lMsgDisplayed = YES.
    NEXT CommitDetailsBlock.
  END.

  /* In this instance, we want to skip those flagged as not needing specify commit */
  IF glCheckAlreadyCommitted = NO THEN
    IF temp-ship-details.need-spec = NO THEN
      NEXT CommitDetailsBlock.

  IF iplUseDefaultLoc = YES THEN
  DO:
     IF iDefaultPtr > 0 THEN
     DO:
       ASSIGN
         ipiLocPtr = iDefaultPtr.
     END.
     ELSE
     DO:
       RUN sysinfok.p(INPUT "item_no_default_location",INPUT STRING( temp-ship-details.ITEM )).
       NEXT CommitDetailsBlock.
     END.
  END.

  EMPTY TEMP-TABLE ttOrderTally      NO-ERROR.
  EMPTY TEMP-TABLE ttitem_reserved   NO-ERROR.
  EMPTY TEMP-TABLE ttsuggested_tally NO-ERROR.
  EMPTY TEMP-TABLE ttitem_bo         NO-ERROR.
  EMPTY TEMP-TABLE ttItemInfoSingle  NO-ERROR.
  EMPTY TEMP-TABLE ttTranInfoSingle  NO-ERROR.

  FOR FIRST ttItemInfo WHERE
            ttItemInfo.item_ptr_sysid = temp-ship-details.item_ptr_sysid AND
            ttItemInfo.item_ptr       = temp-ship-details.item_ptr
            NO-LOCK:
    CREATE ttItemInfoSingle.
    BUFFER-COPY ttItemInfo TO ttItemInfoSingle.
    RELEASE ttItemInfoSingle.
  END. /* FOR FIRST ttItemInfo WHERE */

  FOR FIRST ttTranInfo WHERE
            ttTranInfo.tran_seq = temp-ship-details.sequence AND
            ttTranInfo.sub_id   = temp-ship-details.ship-num AND
            ttTranInfo.tran_id  = temp-ship-details.so_id
            NO-LOCK:
    CREATE ttTranInfoSingle.
    BUFFER-COPY ttTranInfo TO ttTranInfoSingle.
    RELEASE ttTranInfoSingle.
  END. /* FOR FIRST ttTranInfo WHERE */

  RUN common/sifetchtallyinfo.p
    ( INPUT  "Actual",                         /* ipcPopulate          */
      INPUT  YES,                              /* iplByPassTallyCheck  */
      INPUT  NO,                               /* iplReadInvoiced      */
      INPUT  YES,                              /* iplCheckItem         */
      INPUT  NO,                               /* iplOnlyBuildFromTemp */
      INPUT  "SO",                             /* ipcTranType          */
      INPUT  temp-ship-details.so_id_sysid,    /* ipcTranSysid         */
      INPUT  temp-ship-details.so_id,          /* ipiTranID            */
      INPUT  temp-ship-details.sequence,       /* ipiTranSeq           */
      INPUT  temp-ship-details.ship-num,       /* ipiShipmentNum       */
      INPUT  -1,                               /* ipiPickID            */
      INPUT  temp-ship-details.item_ptr_sysid, /* ipcItemPtrSysid      */
      INPUT  temp-ship-details.item_ptr,       /* ipiItemPtr           */
      INPUT  YES,                              /* iplIncludePieceCount */
      INPUT-OUTPUT DATASET dsOrderTally,       /* dsOrderTally         */
      INPUT-OUTPUT DATASET dsDetailTally ).    /* dsDetailTally        */

  /* We are not going to try to process backorders */
  EMPTY TEMP-TABLE ttitem_bo NO-ERROR.

  FIND ttItemInfoSingle NO-LOCK.

  /* All locations already specified correctly.  Nothing to do here */
  IF lContentCode = NO AND
     NOT CAN-FIND(FIRST ttitem_reserved WHERE
                        ttitem_reserved.loc_ptr <> ipiLocPtr
                        NO-LOCK) THEN
    NEXT CommitDetailsBlock.

  IF lContentCode = YES AND
     NOT CAN-FIND(FIRST ttitem_reserved WHERE
                        ttitem_reserved.loc_ptr <> ipiLocPtr OR
                        ttitem_reserved.content  = "N/A"
                        NO-LOCK) THEN
    NEXT CommitDetailsBlock.

  /* Build Order Tally based on current item_reserved and suggested_tally */
  IF {invitemtype.i &cItemType       = ttItemInfoSingle.type
                    &cProcessContext = "LumberItem"} THEN
    RUN common/sifetchtallyinfo.p
      ( INPUT  "OrderTally",                     /* ipcPopulate          */
        INPUT  YES,                              /* iplByPassTallyCheck  */
        INPUT  NO,                               /* iplReadInvoiced      */
        INPUT  NO,                               /* iplCheckItem         */
        INPUT  YES,                              /* iplOnlyBuildFromTemp */
        INPUT  "SO",                             /* ipcTranType          */
        INPUT  temp-ship-details.so_id_sysid,    /* ipcTranSysid         */
        INPUT  temp-ship-details.so_id,          /* ipiTranID            */
        INPUT  temp-ship-details.sequence,       /* ipiTranSeq           */
        INPUT  temp-ship-details.ship-num,       /* ipiShipmentNum       */
        INPUT  -1,                               /* ipiPickID            */
        INPUT  temp-ship-details.item_ptr_sysid, /* ipcItemPtrSysid      */
        INPUT  temp-ship-details.item_ptr,       /* ipiItemPtr           */
        INPUT  YES,                              /* iplIncludePieceCount */
        INPUT-OUTPUT DATASET dsOrderTally,       /* dsOrderTally         */
        INPUT-OUTPUT DATASET dsDetailTally ).    /* dsDetailTally        */

  IF lContentCode = YES AND
     NOT CAN-FIND(FIRST ttOrderTally WHERE
                        ttOrderTally.length > 0
                        NO-LOCK) THEN
  DO:
    ASSIGN
      lMsgDisplayed = YES.
    NEXT CommitDetailsBlock.
  END. /* IF lContentCode = YES AND */

  EMPTY TEMP-TABLE ttorigsuggested_tally NO-ERROR.
  EMPTY TEMP-TABLE ttorigitem_reserved   NO-ERROR.

  FOR EACH ttsuggested_tally NO-LOCK:
    CREATE ttorigsuggested_tally.
    BUFFER-COPY ttsuggested_tally TO ttorigsuggested_tally.
    RELEASE ttorigsuggested_tally.
  END.

  FOR EACH ttitem_reserved NO-LOCK:
    CREATE ttorigitem_reserved.
    BUFFER-COPY ttitem_reserved TO ttorigitem_reserved.
    RELEASE ttorigitem_reserved.
  END.

  FIND ttTranInfoSingle EXCLUSIVE-LOCK.

  ASSIGN
    ttTranInfoSingle.stock_commit_qty = 0.

  IF lContentcode = YES THEN
    FOR EACH ttOrderTally NO-LOCK:
      ASSIGN
        ttTranInfoSingle.stock_commit_qty = ttTranInfoSingle.stock_commit_qty + ttOrderTally.CommitQty.
    END. /* FOR EACH ttOrderTally NO-LOCK: */
  ELSE
    FOR EACH ttitem_reserved NO-LOCK:
      ASSIGN
        ttTranInfoSingle.stock_commit_qty = ttTranInfoSingle.stock_commit_qty + ttitem_reserved.qty.
    END. /* FOR EACH ttitem_reserved NO-LOCK: */

  /* ttOrderTally has already been built for suggested
     tallies, so we can delete the temp-table */
  EMPTY TEMP-TABLE ttsuggested_tally NO-ERROR.

  /* Trying to commit everything */
  IF glCheckAlreadyCommitted = YES THEN
    EMPTY TEMP-TABLE ttitem_reserved NO-ERROR.
  ELSE
  DO:
    FOR EACH ttitem_reserved EXCLUSIVE-LOCK:

      IF ttitem_reserved.loc_ptr = -1     OR
        (lContentCode            = YES    AND
         ttitem_reserved.content = "N/A") THEN
        DELETE ttitem_reserved.

    END. /* FOR EACH ttitem_reserved WHERE */
  END. /* IF iplCheckAlreadyCommitted = NO THEN */

  /* If we don't need to do anything then skip */
  IF ttTranInfoSingle.stock_commit_qty = 0 THEN
    NEXT CommitDetailsBlock.

  DO TRANSACTION ON ERROR UNDO:

    lQtyRemovedFromHold = NO.

    /*only attempt if we can find qty on hold for this location*/
    IF iplRemoveFromOnHold AND
       CAN-FIND(FIRST bf-item_reserved WHERE
                      bf-item_reserved.system_id      = gcCategoryList[{&item_reserved-sys-id}] AND
                      bf-item_reserved.TYPE           = "OH"                                    AND
                      bf-item_reserved.item_ptr_sysid = temp-ship-details.item_ptr_sysid        AND
                      bf-item_reserved.item_ptr       = temp-ship-details.item_ptr              AND
                      bf-item_reserved.loc_ptr        = ipiLocPtr                               NO-LOCK) THEN
    DO:
      EMPTY TEMP-TABLE ttRemoveFromHold.

      /*The onholdreturnqtyp mode of adjust qty works with one commit record at a time so we need to break this all up
        to a granular level, starting with dimension*/

      IF CAN-FIND(FIRST ttOrderTally NO-LOCK) THEN
        FOR EACH ttOrderTally NO-LOCK:
          CREATE ttRemoveFromHold.
          ASSIGN
            ttRemoveFromHold.dThickness   = ttOrderTally.thickness
            ttRemoveFromHold.dWidth       = ttOrderTally.width
            ttRemoveFromHold.dLength      = ttOrderTally.length
            ttRemoveFromHold.iPieceCnt    = ttOrderTally.piececount
            ttRemoveFromHold.dStockQty    = ttOrderTally.CommitQty.
          RELEASE ttRemoveFromHold.
        END.
      ELSE
      DO:
        CREATE ttRemoveFromHold.
        ASSIGN
          ttRemoveFromHold.dThickness   = 0
          ttRemoveFromHold.dWidth       = 0
          ttRemoveFromHold.dLength      = 0
          ttRemoveFromHold.iPieceCnt    = 0
          ttRemoveFromHold.dStockQty    = ttTranInfoSingle.stock_commit_qty.
        RELEASE ttRemoveFromHold.
      END.

      FOR EACH ttRemoveFromHold EXCLUSIVE-LOCK:

        EMPTY TEMP-TABLE temp-qtydist.

        /*Build commits for the dimension and the new location*/
        RUN comitree.p
          ( INPUT        temp-ship-details.item_ptr,
            INPUT        ttRemoveFromHold.dThickness,
            INPUT        ttRemoveFromHold.dWidth,
            INPUT        ttRemoveFromHold.dLength,
            INPUT        ttRemoveFromHold.iPieceCnt,
            INPUT        TRUE,
            INPUT        FALSE,
            INPUT        TRUE,
            INPUT        "",
            INPUT        "",
            INPUT        0,
            INPUT        0,
            INPUT        0,
            INPUT        0,
            INPUT        STRING(ipiLocPtr),
            INPUT        "",
            INPUT        "",
            INPUT        "",
            INPUT        0,
            INPUT        0,
            INPUT-OUTPUT TABLE temp-qtydist,
                  OUTPUT lFullTree,
                  OUTPUT cErrorMsg ).

        FOR EACH temp-qtydist WHERE
                 temp-qtydist.system_id     = gcCategoryList[{&item_tally-sys-id}] AND
                 temp-qtydist.loc_ptr       = ipiLocPtr                            AND
                 temp-qtydist.loc_ptr_sysid = gcCategoryList[{&location-sys-id}]   AND
                 temp-qtydist.thickness     = ttRemoveFromHold.dThickness          AND
                 temp-qtydist.width         = ttRemoveFromHold.dWidth              AND
                 temp-qtydist.length        = ttRemoveFromHold.dLength             AND
                 temp-qtydist.piece_count   = ttRemoveFromHold.iPieceCnt           AND
                 temp-qtydist.on_hold_qty   > 0                                    NO-LOCK WHILE ttRemoveFromHold.dStockQty > 0:


          EMPTY TEMP-TABLE temp-qtydistCopy.

          CREATE temp-qtydistCopy.
          BUFFER-COPY temp-qtydist TO temp-qtydistCopy
            ASSIGN
              temp-qtydistCopy.cItemPtrSysid  = ttItemInfoSingle.item_ptr_sysid
              temp-qtydistCopy.cStockingUOM   = ttItemInfoSingle.stocking_uom
              temp-qtydistCopy.cStockToPCCalc = ttItemInfoSingle.stock_to_pc_calc
              temp-qtydistCopy.cPieceRef      = ttItemInfoSingle.piece_ref
              temp-qtydistCopy.cThicknessUOM  = ttItemInfoSingle.thickness_uom
              temp-qtydistCopy.cWidthUOM      = ttItemInfoSingle.width_uom
              temp-qtydistCopy.cLengthUOM     = ttItemInfoSingle.length_uom
              temp-qtydistCopy.cItem          = ttItemInfoSingle.item
              temp-qtydistCopy.cSizeDesc      = ttItemInfoSingle.size + " " + ttItemInfo.description
              temp-qtydistCopy.iItemPtr       = ttItemInfoSingle.item_ptr
              temp-qtydistCopy.lLocCode       = ttItemInfoSingle.loccode
              temp-qtydistCopy.lLotCode       = ttItemInfoSingle.lotcode
              temp-qtydistCopy.lTagCode       = ttItemInfoSingle.tagcode
              temp-qtydistCopy.lContentCode   = ttItemInfoSingle.contentcode
              temp-qtydistCopy.lCommitAll     = ttItemInfoSingle.commit_all
              temp-qtydistCopy.cBuyerId       = ttItemInfoSingle.buyer_id
              temp-qtydistCopy.cItemType      = ttItemInfoSingle.type
              temp-qtydistCopy.lRowSelected   = YES.
          RELEASE temp-qtydistCopy.

          /*We need to set the total, not subtract from it, so take the lesser of the two and decrease the total needed amount*/

          dQtyToRemoveFromOnHold = MIN(temp-qtydist.on_hold_qty,ttRemoveFromHold.dStockQty).

          ASSIGN
            ttRemoveFromHold.dStockQty = ttRemoveFromHold.dStockQty - dQtyToRemoveFromOnHold
            lQtyRemovedFromHold        = YES.

          RUN ic/onholdreturnqtyp.p
          ( INPUT NO,  /* force adding when increaing */
            INPUT temp-qtydist.on_hold_qty - dQtyToRemoveFromOnHold,         /* only used if ipcAction = "Adjust Qty On Hold/To Be Returned" */
            INPUT temp-qtydist.to_be_returned_qty,                           /* only used if ipcAction = "Adjust Qty On Hold/To Be Returned" */
            INPUT IF lContentCode THEN "5" ELSE "2",                         /* Lot and tag aren't really allowed in this procedure so if it's dimension, then content otherwise location*/
            INPUT "Adjust Qty On Hold/To Be Returned",
            INPUT NO,
            INPUT "",  /* Tran Sysid */
            INPUT 0,   /* Tran ID */
            INPUT 0,   /* Tran Seq */
            INPUT "",  /* Hold Tran Type */
            INPUT YES,  /* iplOffHoldForCommit */
            INPUT-OUTPUT TABLE temp-qtydistCopy,
            INPUT-OUTPUT TABLE ttQtyByLengthCopy ).
        END.
      END.
    END.

    RUN common/cmt_auto.p
      ( INPUT        "Specify Location",       /* ipcMode                  */
        INPUT        NO,                       /* iplRequestedManualCommit */
        INPUT        NO,                       /* iplAllowManualCommit     */
        INPUT        STRING(ipiLocPtr),        /* ipcLocList               */
        INPUT        NO,                       /* iplCreateSuggestedTally  */
        INPUT        YES,                      /* iplAllowUncommit         */
        INPUT        NO,                       /* iplFetchCurrent          */
        INPUT        YES,                      /* iplAdjustBackorder       */
        INPUT        NO,                       /* iplCheckCmtAtBranch      */
        INPUT        NO,                       /* iplAllowCommitFromOnHand */
        INPUT        NO,                       /* iplIncludeZeroShipment   */
        INPUT        0,                        /* ipdThickness             */
        INPUT        0,                        /* ipdWidth                 */
        INPUT        0,                        /* ipdLength                */
        INPUT        0,                        /* ipiPieceCount            */
        INPUT        YES,                      /* iplAllowUI               */
        INPUT        NO,                       /* iplCheckBrokenMinPak     */
        INPUT        NO,                       /* round to full pieces if avail */
        INPUT        DATASET dsItemInfoSingle, /* dsItemInfo               */
        INPUT        DATASET dsTranInfoSingle, /* dsTranInfo               */
        INPUT        DATASET dsOrderTally,     /* dsOrderTally             */
        INPUT-OUTPUT DATASET dsDetailTally,    /* dsDetailTally            */
        INPUT-OUTPUT TABLE   tthold_reserved,  /* hold reserved table      */
              OUTPUT TABLE   temp-qtydist,     /* temp-qtydist             */
              OUTPUT lDummy,                   /* oplRunManuComm           */
              OUTPUT lDummy,                   /* oplContinue              */
              OUTPUT cErrorMsg ).          /* opcErrorMsg              */

    IF cErrorMsg <> "" THEN
      MESSAGE cErrorMsg
        VIEW-AS ALERT-BOX ERROR BUTTONS OK.

    ASSIGN
      dCommitQty = 0.

    FOR EACH ttitem_reserved NO-LOCK:

      /*Our rule right now is that if you are attempting to remove qty from on hold, you need to have the whole thing
        committed to the new location and down to the lowest level*/
      IF iplRemoveFromOnHold AND
         ttitem_reserved.loc_ptr <> ipiLocPtr THEN
      DO:
        ASSIGN
          lMsgDisplayed = YES.

        /*If we ran the on hold procedure, we need to undo those updates*/
        IF lQtyRemovedFromHold THEN
          UNDO.
        ELSE
          NEXT CommitDetailsBlock.
      END.

      IF (lContentCode             = NO      OR
         (lContentCode             = YES     AND
          ttitem_reserved.content <> "N/A")) AND
         (ttitem_reserved.loc_ptr = ipiLocPtr OR
          CAN-FIND(FIRST ttorigitem_reserved WHERE
                         ttorigitem_reserved.system_id   = ttitem_reserved.system_id   AND
                         ttorigitem_reserved.type        = ttitem_reserved.type        AND
                         ttorigitem_reserved.tran_sysid  = ttitem_reserved.tran_sysid  AND
                         ttorigitem_reserved.tran_id     = ttitem_reserved.tran_id     AND
                         ttorigitem_reserved.tran_seq    = ttitem_reserved.tran_seq    AND
                         ttorigitem_reserved.sub_id      = ttitem_reserved.sub_id      AND
                         ttorigitem_reserved.loc_ptr     = ttitem_reserved.loc_ptr     AND
                         ttorigitem_reserved.lot         = ttitem_reserved.lot         AND
                         ttorigitem_reserved.tag         = ttitem_reserved.tag         AND
                         ttorigitem_reserved.content     = ttitem_reserved.content     AND
                         ttorigitem_reserved.thickness   = ttitem_reserved.thickness   AND
                         ttorigitem_reserved.width       = ttitem_reserved.width       AND
                         ttorigitem_reserved.length      = ttitem_reserved.length      AND
                         ttorigitem_reserved.piece_count = ttitem_reserved.piece_count AND
                         ttorigitem_reserved.pick_id     = ttitem_reserved.pick_id
                         NO-LOCK)) THEN
      ASSIGN
        dCommitQty = dCommitQty + ttitem_reserved.qty.
    END. /* FOR EACH ttitem_reserved WHERE */

    FIND ttTranInfoSingle NO-LOCK.

    IF ABS(ttTranInfoSingle.stock_commit_qty - dCommitQty) > giQtyDeleteThreshold THEN
    DO:
      ASSIGN
        lMsgDisplayed = YES.

      /*If we ran the on hold procedure, we need to undo those updates*/
      IF lQtyRemovedFromHold THEN
        UNDO.
      ELSE
        NEXT CommitDetailsBlock.
    END. /* IF CAN-FIND(FIRST ttitem_reserved WHERE */


    FOR EACH ttorigsuggested_tally NO-LOCK:
      FOR FIRST suggested_tally WHERE
                suggested_tally.system_id      = ttorigsuggested_tally.system_id      AND
                suggested_tally.type           = ttorigsuggested_tally.type           AND
                suggested_tally.tran_sys_id    = ttorigsuggested_tally.tran_sys_id    AND
                suggested_tally.tran_id        = ttorigsuggested_tally.tran_id        AND
                suggested_tally.tran_seq       = ttorigsuggested_tally.tran_seq       AND
                suggested_tally.shipment_num   = ttorigsuggested_tally.shipment_num   AND
                suggested_tally.item_ptr_sysid = ttorigsuggested_tally.item_ptr_sysid AND
                suggested_tally.item_ptr       = ttorigsuggested_tally.item_ptr       AND
                suggested_tally.loc_ptr        = ttorigsuggested_tally.loc_ptr        AND
                suggested_tally.thickness      = ttorigsuggested_tally.thickness      AND
                suggested_tally.width          = ttorigsuggested_tally.width          AND
                suggested_tally.length         = ttorigsuggested_tally.length         AND
                suggested_tally.piece_count    = ttorigsuggested_tally.piece_count    AND
                suggested_tally.pick_id        = ttorigsuggested_tally.pick_id
                EXCLUSIVE-LOCK:
        DELETE suggested_tally.
      END. /* FOR FIRST suggested_tally WHERE */
    END. /* FOR EACH ttorigsuggested_tally NO-LOCK: */

    FOR EACH ttorigitem_reserved NO-LOCK:
      FOR FIRST item_reserved WHERE
                item_reserved.system_id    = ttorigitem_reserved.system_id    AND
                item_reserved.type         = ttorigitem_reserved.type         AND
                item_reserved.tran_sysid   = ttorigitem_reserved.tran_sysid   AND
                item_reserved.tran_id      = ttorigitem_reserved.tran_id      AND
                item_reserved.tran_seq     = ttorigitem_reserved.tran_seq     AND
                item_reserved.sub_id       = ttorigitem_reserved.sub_id       AND
                item_reserved.loc_ptr      = ttorigitem_reserved.loc_ptr      AND
                item_reserved.lot          = ttorigitem_reserved.lot          AND
                item_reserved.tag          = ttorigitem_reserved.tag          AND
                item_reserved.content      = ttorigitem_reserved.content      AND
                item_reserved.thickness    = ttorigitem_reserved.thickness    AND
                item_reserved.width        = ttorigitem_reserved.width        AND
                item_reserved.length       = ttorigitem_reserved.length       AND
                item_reserved.piece_count  = ttorigitem_reserved.piece_count  AND
                item_reserved.pick_id      = ttorigitem_reserved.pick_id
                EXCLUSIVE-LOCK:
        DELETE item_reserved.
      END. /* FOR FIRST item_reserved WHERE */
    END. /* FOR EACH ttorigitem_reserved NO-LOCK: */

    FOR EACH ttitem_reserved NO-LOCK:

      FIND item_reserved WHERE
           item_reserved.system_id    = ttitem_reserved.system_id    AND
           item_reserved.type         = ttitem_reserved.type         AND
           item_reserved.tran_sysid   = ttitem_reserved.tran_sysid   AND
           item_reserved.tran_id      = ttitem_reserved.tran_id      AND
           item_reserved.tran_seq     = ttitem_reserved.tran_seq     AND
           item_reserved.sub_id       = ttitem_reserved.sub_id       AND
           item_reserved.loc_ptr      = ttitem_reserved.loc_ptr      AND
           item_reserved.lot          = ttitem_reserved.lot          AND
           item_reserved.tag          = ttitem_reserved.tag          AND
           item_reserved.content      = ttitem_reserved.content      AND
           item_reserved.thickness    = ttitem_reserved.thickness    AND
           item_reserved.width        = ttitem_reserved.width        AND
           item_reserved.length       = ttitem_reserved.length       AND
           item_reserved.piece_count  = ttitem_reserved.piece_count  AND
           item_reserved.pick_id      = ttitem_reserved.pick_id
           EXCLUSIVE-LOCK NO-ERROR.

      IF NOT AVAILABLE(item_reserved) THEN
      DO:
        CREATE item_reserved.
        BUFFER-COPY ttitem_reserved TO item_reserved.
      END. /* IF NOT AVAILABLE(item_reserved) THEN */
      ELSE
        ASSIGN
          item_reserved.qty = item_reserved.qty + ttitem_reserved.qty.
    END. /* FOR EACH ttitem_reserved NO-LOCK: */
  END. /* DO TRANSACTION ON ERROR UNDO: */

  /* recost SO & shipments */
  RUN recost.p
    ( INPUT  temp-ship-details.so_id_sysid,
      INPUT  "SO",
      INPUT  temp-ship-details.so_id,
      INPUT  temp-ship-details.sequence,
      INPUT  glAffectInv,
      INPUT  gcAutoPoType,
      INPUT  "",
      INPUT  "",
      INPUT  YES,
      INPUT  YES, /* iplBypassInvRecost */
      OUTPUT cErrorMsg ).

  IF cErrorMsg <> "" THEN
    MESSAGE cErrorMsg VIEW-AS ALERT-BOX ERROR BUTTONS OK.

  RUN modify-temp
    ( INPUT RECID(temp-ship-details),
      INPUT YES ).
END.

IF lMsgDIsplayed = YES THEN
DO:
  RUN sysinfok.p(INPUT "staging_record_insufficient_quantity",INPUT "").
END.

RUN open-query.

{waitoff.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CompleteUpdateStatus wn-ship_details
PROCEDURE CompleteUpdateStatus :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER iplContinue AS LOGICAL NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    {waitoff.i}

    IF iplContinue = NO THEN
      RETURN.

    /* refresh the browser */
    IF CAN-FIND( FIRST ttShipStatus WHERE
                       ttShipStatus.cStatus_code = cbStatus:SCREEN-VALUE AND
                       ttShipStatus.lIn_process  = NO
                       NO-LOCK ) THEN
      RUN deletettStagedHeader IN ip-calling_module
        ( INPUT  ip-shiphead_rec,
          INPUT  "Delete",
          OUTPUT iplContinue ).
    ELSE
      RUN deletettStagedHeader IN ip-calling_module
        ( INPUT  ip-shiphead_rec,
          INPUT  cbStatus:SCREEN-VALUE,
          OUTPUT iplContinue ).

    IF glAffectInv = NO THEN
    DO:
      ASSIGN
        glDoNotCloseFromAP = YES.
      RUN autogenap.p
        ( INPUT TABLE tt-po-list ).
      ASSIGN
        glDoNotCloseFromAP = NO.
    END.

    IF iplContinue = NO THEN
    DO:
      APPLY "WINDOW-CLOSE":U TO {&WINDOW-NAME}.
      RETURN NO-APPLY.
    END.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE create-temp wn-ship_details
PROCEDURE create-temp :
/* -----------------------------------------------------------
  Purpose:  open query associated with shipments/item_reserved browser
  Parameters:  <none>
  Notes:  If you modify this open query statement then you need to make
          the corresponding changes to the code in bt-all.
-------------------------------------------------------------*/
DEFINE INPUT PARAMETER iprShipmentRECID   AS RECID  NO-UNDO.

DO WITH FRAME {&FRAME-NAME}:

  /* get the bl-shipments_header record whose RECID is passed in */

  IF NOT AVAILABLE bl-shipments_header THEN
    FIND FIRST bl-shipments_header WHERE 
               RECID(bl-shipments_header) = iprShipmentRECID 
               NO-LOCK NO-ERROR.

  ASSIGN
    gcCurrentShipmentRecID = iprShipmentRECID.

  RUN so/shipdetailbuildtemp.p ON SERVER g-Appsrvr
    (INPUT gscSessionContextID,
     INPUT bl-shipments_header.so_id_sysid,
     INPUT bl-shipments_header.so_id,
     INPUT -1, /*tran seq (-1 returns all)*/
     INPUT bl-shipments_header.shipment_num,
     INPUT tbDispAllocChgCost:CHECKED,
     INPUT cbDisplayUOM:SCREEN-VALUE,
     INPUT "Staging Details",
     INPUT bl-shipments_header.sale_type_sysid,
     INPUT bl-shipments_header.sale_type,
     INPUT-OUTPUT DATASET dsTempShipDet).

END. /* do with frame */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CreditCheck wn-ship_details
PROCEDURE CreditCheck :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
  DEFINE BUFFER   bfSoHeader            FOR so_header.
  DEFINE BUFFER   bl-shipments_header   FOR shipments_header.


  /* check to see if Credit check for shipments needs to be run, only run credit check on shipments if
      net order total has changed.   */
  IF (glAffectInv = YES AND
      CAN-FIND( FIRST bl-shipments_header WHERE
                      bl-shipments_header.system_id     = gcCategoryList[{&shipments_header-sys-id}] AND
                      bl-shipments_header.so_id_sysid   = gcSOSysid                                  AND
                      bl-shipments_header.so_id         = giSOID                                     AND
                      bl-shipments_header.shipment_num  = giShipNum                                  AND
                      bl-shipments_header.order_total  <> gdOrigShipmentTotal
                      NO-LOCK ) ) OR
      CAN-FIND( FIRST bfSoHeader   WHERE
                      bfSoHeader.system_id    = so_header.system_id AND
                      bfSoHeader.so_id        = so_header.so_id AND
                      bfsoheader.order_total <> gdOrigOrderTotal
                      NO-LOCK ) THEN
  DO:
    ASSIGN
      ttReCalcCreateHist = FALSE
      ttReCalcTotal      = FALSE
      ttReCalcRunCrCheck = TRUE.

    RUN ttReCalcShip_recalc.

    IF glCrCheckShipments AND ttReCalcCrChanged THEN
      RUN sysinfok.p
        ( INPUT "shipcrchng",
          INPUT "" ).
  END.
  ELSE
    RUN ttReCalcShip_UpdateHist.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE CustomDateLeave wn-ship_details
PROCEDURE CustomDateLeave :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER iphDateHandle AS HANDLE  NO-UNDO.
  DEFINE OUTPUT PARAMETER oplContinue   AS LOGICAL NO-UNDO INIT TRUE.

  DEFINE VARIABLE lValidDate   AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE cInvalidDesc AS CHARACTER  NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    IF glAffectInv  = YES              AND
       iphDateHandle = fiExpDate:HANDLE THEN
    DO:

      RUN common/expectdateval.p ON SERVER g-AppSrvr
        ( INPUT gscSessionContextId,
          INPUT "SO",
          INPUT gcSOSysid,
          INPUT giSOID,
          INPUT YES,
          INPUT YES,
          INPUT DATE(fiExpDate:SCREEN-VALUE),
          INPUT "<all>",
          INPUT NO, /*iplValidateBOM*/
          INPUT 0, /*ipiTranSeq*/
          OUTPUT lValidDate,
          OUTPUT cInvalidDesc ).

      IF lValidDate = NO THEN
      DO:
        RUN sysinfok.p
          ( INPUT "exceptiondtexpdlv",
            INPUT cInvalidDesc ).

        ASSIGN
          oplContinue            = NO
          fiExpDate:SCREEN-VALUE = STRING(fiExpDate).

        APPLY "ENTRY":U TO fiExpDate.
        RETURN.
      END. /* IF lValidDate = NO THEN */

    END. /* IF glAffectInv = YES AND... */

    ASSIGN
      fiExpDate NO-ERROR.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE DefaultYearPeriod wn-ship_details
PROCEDURE DefaultYearPeriod :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE iNumPeriods AS INTEGER     NO-UNDO.
  DEFINE VARIABLE iCtr        AS INTEGER     NO-UNDO.
  DEFINE VARIABLE cPeriods    AS CHARACTER   NO-UNDO.

  DO WITH FRAME {&FRAME-NAME}:

    FOR FIRST glconst WHERE
              glconst.system_id = gcCategoryList[{&glconst-sys-id}]
              NO-LOCK:

      ASSIGN
        iNumPeriods = IF glconst.periods = TRUE THEN 12 ELSE 13.

      IF glconst.period_names[1] <> "" THEN
      DO:
        DO iCtr = 1 TO iNumPeriods:
          cPeriods = cPeriods + STRING(iCtr) + " - " + STRING(glconst.period_names[iCtr],"X(12)") + ",".
        END.

        ASSIGN
          cbInvoicePeriod:LIST-ITEMS = RIGHT-TRIM(cPeriods,",").
      END.
    END. /*end first glconst*/

    FOR FIRST ar_ctl WHERE
              ar_ctl.system_id = gcCategoryList[{&ar_ctl-sys-id}] NO-LOCK:

      ASSIGN
        giCurrentYear   = ar_ctl.current_year
        giCurrentPeriod = ar_ctl.current_period.

      IF  goSecurityManager:IsActionGranted("General Ledger","comtstat","access_prior_year") THEN
      DO:
        FOR EACH gl_year WHERE
                 gl_year.system_id = gcCategoryList[{&gl_year-sys-id}]
                 NO-LOCK
                 BY gl_year.gl_year:
          IF cbInvoiceYear:ADD-LAST(STRING(gl_year.gl_year)) THEN.
        END. /* FOR EACH gl_year */

        ASSIGN
          cbInvoiceYear  :SCREEN-VALUE = STRING(ar_ctl.current_year)
          cbInvoicePeriod:SCREEN-VALUE = ENTRY(ar_ctl.current_period, cbInvoicePeriod:LIST-ITEMS).
      END.
      ELSE
      DO:
        ASSIGN
          cbInvoiceYear  :LIST-ITEMS   = STRING(ar_ctl.current_year)
          cbInvoiceYear  :SCREEN-VALUE = STRING(ar_ctl.current_year)
          cbInvoicePeriod:SCREEN-VALUE = ENTRY(ar_ctl.current_period, cbInvoicePeriod:LIST-ITEMS).
      END.
    END.

    ASSIGN
      fiInvoiceDate:SCREEN-VALUE = STRING(TODAY).

    IF NOT goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstag.p","can_override_inv_date_so") THEN
    DO:
      ASSIGN
        fiInvoiceDate:SENSITIVE = FALSE
        fiInvoiceDate:READ-ONLY = TRUE.

      HIDE btCalendarInvDt.
    END.

    IF NOT goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstag.p","can_override_period_staging") THEN
      ASSIGN
        cbInvoiceYear  :SENSITIVE = FALSE
        btDefault      :SENSITIVE = FALSE
        cbInvoicePeriod:SENSITIVE = FALSE.

  END. /*end with frame*/

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE disable_UI wn-ship_details  _DEFAULT-DISABLE
PROCEDURE disable_UI :
/*------------------------------------------------------------------------------
  Purpose:     DISABLE the User Interface
  Parameters:  <none>
  Notes:       Here we clean-up the user-interface by deleting
               dynamic widgets we have created and/or hide
               frames.  This procedure is usually called when
               we are ready to "clean-up" after running.
------------------------------------------------------------------------------*/
  /* Delete the WINDOW we created */
  IF SESSION:DISPLAY-TYPE = "GUI":U AND VALID-HANDLE(wn-ship_details)
  THEN DELETE WIDGET wn-ship_details.
  IF THIS-PROCEDURE:PERSISTENT THEN DELETE PROCEDURE THIS-PROCEDURE.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE enable_UI wn-ship_details  _DEFAULT-ENABLE
PROCEDURE enable_UI :
/*------------------------------------------------------------------------------
  Purpose:     ENABLE the User Interface
  Parameters:  <none>
  Notes:       Here we display/view/enable the widgets in the
               user-interface.  In addition, OPEN all queries
               associated with each FRAME and BROWSE.
               These statements here are based on the "Other
               Settings" section of the widget Property Sheets.
------------------------------------------------------------------------------*/

  {&OPEN-QUERY-frExplship}
  GET FIRST frExplship.
  DISPLAY fiCurrencyLbl fiStagingstatus fi-ship_date fiExpDate fiCredStat
          fi-route tbHold fi-stop fi-cust_id fiReviewStatus fiDriver
          fiEstimatedProfit fi-adf fiProNumber tbDispAllocChgCost
          fistagingstatuslbl cbDisplayUOM fi-asterisk fiInvoiceDate
          cbInvoicePeriod cbInvoiceYear cbStatus tbPrintDelvTick fi-shipto
          fiCurrency fi-order_date fiStatusText fi-adf-message fiInvPeriodText
          fiStatusLabel fiInvoiceDateLabel fiReviewStatusLbl fiProNumberLbl
      WITH FRAME frExplship IN WINDOW wn-ship_details.
  ENABLE btSave btShipDtlInfo btDisplayOrder fiCurrencyLbl btDispatch btHdrMsgs
         btCancelStaging btCustInfo fiStagingstatus fi-ship_date btCalendarDt
         fiExpDate btCalendarExpDt fi-route btRoute tbHold fi-stop fiDriver
         btDriverLoc fi-adf fiProNumber tbDispAllocChgCost btAdd
         bt-update_detail bt-delete btViewOthChgCst fistagingstatuslbl
         btSelectLoc btSpecifyTags btViewMsgs btSerNumEnt btSelectAll
         btUnitData btPodAccept btPodReject cbDisplayUOM fi-asterisk
         br-shipdetails fiInvoiceDate btCalendarInvDt cbInvoicePeriod
         cbInvoiceYear btDefault cbStatus tbPrintDelvTick btUpdateStatus
         bt-prev bt-next fiStatusLabel fiInvoiceDateLabel fiProNumberLbl
         RECT-82 RECT-54
      WITH FRAME frExplship IN WINDOW wn-ship_details.
  {&OPEN-BROWSERS-IN-QUERY-frExplship}
  VIEW wn-ship_details.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE find_cost wn-ship_details
PROCEDURE find_cost :
/*------------------------------------------------------------------------------
  Purpose:     Determines which cost should be displayed based on cost_desig.
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE OUTPUT PARAMETER op-cost         AS DECIMAL   NO-UNDO.

  IF AVAILABLE shipments_detail THEN
  DO:
    IF shipments_detail.cost_desig = "M" THEN
      ASSIGN op-cost       = shipments_detail.market_cost.
    ELSE
      IF shipments_detail.cost_desig = "A" THEN
        ASSIGN op-cost       = shipments_detail.avg_cost.
  END.
  ELSE
    IF AVAILABLE so_detail THEN
    DO:
      IF so_detail.cost_desig = "M" THEN
        ASSIGN op-cost = so_detail.market_cost.
      ELSE
        IF so_detail.cost_desig = "A" THEN
          ASSIGN op-cost = so_detail.cost.
    END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE GetLocalProfile wn-ship_details
PROCEDURE GetLocalProfile :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER opcLocalProfile AS CHARACTER NO-UNDO.


  ASSIGN
    opcLocalProfile = g-allwin-local-profile.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE get_new_cost wn-ship_details
PROCEDURE get_new_cost :
/*------------------------------------------------------------------------------
  Purpose:     Gets the cost for updating the temp-ship-details.cost field
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE OUTPUT PARAMETER op-cost    AS DECIMAL  NO-UNDO INIT 0.

DEFINE BUFFER bl-ship_details FOR shipments_detail.

FIND bl-ship_details WHERE RECID(bl-ship_details) = temp-ship-details.rec NO-LOCK NO-ERROR.

IF AVAILABLE bl-ship_details THEN
DO:
   CASE temp-ship-details.cost_desig:
     WHEN "A" THEN op-cost = bl-ship_details.avg_cost.
     WHEN "M" THEN op-cost = bl-ship_details.market_cost.
   END CASE.
END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE get_parameters wn-ship_details
PROCEDURE get_parameters :
/*------------------------------------------------------------------------------
  Purpose:     Get inventory parameters for requested item.
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ip-item_ptr_sysid LIKE item.system_id NO-UNDO.
  DEFINE INPUT PARAMETER ip-item_ptr       LIKE item.item_ptr  NO-UNDO.

  DEFINE BUFFER blitem_branch              FOR item_branch.

  FOR FIRST blitem_branch WHERE
            blitem_branch.system_id      = gcCategoryList[{&item_branch-sys-id}] AND
            blitem_branch.item_ptr_sysid = ip-item_ptr_sysid AND
            blitem_branch.item_ptr       = ip-item_ptr
            NO-LOCK:
    ASSIGN
      g-loccode      = blitem_branch.loccode
      g-lotcode      = blitem_branch.lotcode
      g-tagcode      = blitem_branch.tagcode
      g-contentcode  = blitem_branch.contentcode
      g-exact_commit = blitem_branch.exact_commit.
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE get_screen_value wn-ship_details
PROCEDURE get_screen_value :
/*------------------------------------------------------------------------------
  Purpose: Get specific screen values : called from usodetal.w
  Parameters:  field and corresponding value
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER ipcField     AS  CHARACTER  NO-UNDO.
  DEFINE OUTPUT PARAMETER opcValue     AS  CHARACTER  NO-UNDO.
  
  DEFINE VARIABLE cZipFormat AS CHARACTER NO-UNDO.

  DO WITH FRAME {&FRAME-NAME}:

    CASE ipcField:

      WHEN "glUsodetalRegisterPOSMode" THEN
        opcValue = "NO".

      WHEN "Customer Shipto" THEN
        opcValue = fi-shipto:SCREEN-VALUE.

      WHEN "Customer Key" THEN
        opcValue = g-cust_key.

      WHEN "Cust State" THEN
        opcValue = fi-state:SCREEN-VALUE.

      WHEN "Unformatted Cust ZIP" THEN
      DO:
        ASSIGN cZipFormat = {getagilprop.i &PropList="'currentZipFormat'":U}.
        
        opcValue = f_strdefmt(INPUT fi-zip:SCREEN-VALUE, cZipFormat).
      END.
      
      WHEN "Cust Country" THEN
        opcValue = gcCountry.

      WHEN "Saletype" THEN
        opcValue = gcSaleType.

      WHEN "Ship Via" THEN
        opcValue = gcShipVia.

      WHEN "Create PO On Save"   OR
      WHEN "Create RM On Save"   OR
      WHEN "Create Cuts On Save" THEN
        opcValue = "NO".

      WHEN "Priced Pick" THEN
        opcValue = STRING( glPricedPick ).

      WHEN "header-expect_date" THEN
        opcValue = STRING( gdtExpectDate ).

      WHEN "header-expect-override" THEN
        opcValue = STRING( glExpectDateOverride ).

      WHEN "Status" THEN
        opcValue = "Staged".

      WHEN "Tag PO" THEN
        opcValue = "NO".

      WHEN "Tag RM" THEN
        opcValue = "NO".

      WHEN "TimerLog" THEN
        opcValue = "".

      WHEN "Accepts B/O" THEN
        opcValue = "YES".

      WHEN "header-order_date" THEN
        opcValue = STRING( fi-order_date:SCREEN-VALUE ).

      WHEN "Price Level" THEN
        opcValue = STRING( giPriceLevel ).

      WHEN "DefaultGroup" THEN
        opcValue = gcDefaultGroup.

      WHEN "UseGroupAsDefault" THEN
        opcValue = STRING(glUseGroupAsDefault).

      WHEN "DefaultShipGroup" THEN
        opcValue = gcDefaultShipGroup.

      WHEN "UseShipGroupAsDefault" THEN
        opcValue = STRING(glUseShipGroupAsDefault).

      WHEN "AddSensitive" THEN
        opcValue = "NO".

     OTHERWISE DO:
       RUN sysinfok.p(INPUT "field_not_registered",INPUT STRING( ipcField )).
      END.
    END CASE. /* CASE ipcField: */

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE give_focus wn-ship_details
PROCEDURE give_focus :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

  APPLY "ENTRY" TO fi-route IN FRAME {&FRAME-NAME}.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE hdr_pass wn-ship_details
PROCEDURE hdr_pass :
/*------------------------------------------------------------------------------
  Purpose: called from usodetal.w
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplPassThru AS LOGICAL NO-UNDO INIT NO.


  ASSIGN
    oplPassThru = glPassThru.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE hdr_prc wn-ship_details
PROCEDURE hdr_prc :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER opcPriceMethod    LIKE so_detail.price_method      NO-UNDO.
  DEFINE OUTPUT PARAMETER opiPriceLevel     LIKE so_detail.price_level       NO-UNDO.
  DEFINE OUTPUT PARAMETER opdExtraPrice     LIKE so_detail.price_extra_%     NO-UNDO.
  DEFINE OUTPUT PARAMETER opcDiscountMethod LIKE so_detail.discount_method   NO-UNDO.
  DEFINE OUTPUT PARAMETER opdExtraDisc1     LIKE so_detail.extra_discount_1  NO-UNDO.
  DEFINE OUTPUT PARAMETER opdExtraDisc2     LIKE so_detail.extra_discount_2  NO-UNDO.
  DEFINE OUTPUT PARAMETER opdExtraDisc3     LIKE so_detail.extra_discount_3  NO-UNDO.
  DEFINE OUTPUT PARAMETER opdGmTarget       LIKE so_detail.gm_target         NO-UNDO.


  ASSIGN
    opcPriceMethod    = gcHeaderPriceMethod
    opiPriceLevel     = giPriceLevel
    opdExtraPrice     = gdHeaderExtraPrice
    opcDiscountMethod = gcHeaderDiscountMethod
    opdExtraDisc1     = gdHeaderDisc1Extra
    opdExtraDisc2     = gdHeaderDisc2Extra
    opdExtraDisc3     = gdHeaderDisc3Extra
    opdGmTarget       = gdHeaderGmTarget.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE hideWidgets wn-ship_details
PROCEDURE hideWidgets :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

  DO WITH FRAME {&FRAME-NAME}:
    ASSIGN
      bt-next        :VISIBLE    = NO
      bt-prev        :VISIBLE    = NO
      cbStatus       :VISIBLE    = NO
      fiStatusLabel  :VISIBLE    = NO
      //fiStagingStatus:VISIBLE    = NO
      //fistagingstatuslbl:VISIBLE = NO

      fiStatusText   :VISIBLE = NO
      RECT-82        :VISIBLE = NO
      tbPrintDelvTick:VISIBLE = NO
      cbInvoiceYear  :VISIBLE = NO
      fiInvPeriodText:VISIBLE = NO
      cbInvoicePeriod:VISIBLE = NO
      fiInvoiceDate  :VISIBLE = NO
      fiInvoiceDateLabel:VISIBLE = NO
      RECT-54        :VISIBLE = NO
      btCalendarInvDt:VISIBLE = NO
      btDefault      :VISIBLE = NO
      btUpdateStatus :VISIBLE = NO.

    IF ip-calling_module:FILE-NAME = "so/salesorddriver.p" THEN
      ASSIGN
        btCancelStaging:VISIBLE = goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","can_delete_staging").
    ELSE
      ASSIGN
        btCancelStaging:VISIBLE = NO.
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE initialize-controls wn-ship_details
PROCEDURE initialize-controls :
/*------------------------------------------------------------------------------
  Purpose: Set defaults for and OCX controls loaded
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE InitializeSecurityObjects wn-ship_details
PROCEDURE InitializeSecurityObjects:

goSecurityManager = NEW sys.SecurityManager().

goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","can_delete_staging").
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","can_invoice_from_staging").
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","print_delv_tickets_exp").
      
goSecurityManager:CreateAction("General Ledger","comtstat","access_prior_year").
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstag.p","can_override_inv_date_so").
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstag.p","can_override_period_staging").

goSecurityManager:CreateAction("Sales Orders-Quotes","main","can_view_average_cost").
goSecurityManager:CreateAction("Sales Orders-Quotes","main","can_view_market_cost").
goSecurityManager:CreateAction("Sales Orders-Quotes","main","can_view_other_cost").

goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","override_price_staging").
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","enter_extended_price_staging").

goSecurityManager:CreateMenuItem("dp_dispatch_entry","mn_dp_entmenu.p").
goSecurityManager:CreateMenuItem("so_sales_order_entry","mn_salesord.p").
goSecurityManager:CreateMenuItem("so_customer_information","mn_custinfo.p").

/* used in explshipchoosebtdelete.i */
goSecurityManager:CreateAction("Sales Orders-Quotes","comtstat","can_reduce_qty_printed_staging").
goSecurityManager:CreateAction("Sales Orders-Quotes","explship","adjust_parent_printed_wo_wbo").
goSecurityManager:CreateAction("Sales Orders-Quotes","explship","adjust_parent_printed_wo").
        
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE InitialLineUpdateFields wn-ship_details
PROCEDURE InitialLineUpdateFields:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

DEFINE VARIABLE dQtyUOMConversionFactor     AS DECIMAL    NO-UNDO.
DEFINE VARIABLE dSOOrderQty                 AS DECIMAL    NO-UNDO.

IF NOT AVAILABLE(blttship_details_line_update) THEN
DO:
  MESSAGE "KEM" VIEW-AS ALERT-BOX.
  RETURN.
END.       

{ common/qtyuomproc.i
  &lAddErrorToTempTable = NO
  &cItemSysid           = blttship_details_line_update.item_ptr_sysid
  &iItemPtr             = blttship_details_line_update.item_ptr
  &cUOMConvSysid        = blttship_details_line_update.order_uom_conv_ptr_sysid
  &iConvertToUOMPtr     = blttship_details_line_update.order_uom_conv_ptr
  &dOutputConvFactor    = dQtyUOMConversionFactor }

dSOOrderQty = (blttship_details_line_update.qty * blttship_details_line_update.disp_qty_conv) / dQtyUOMConversionFactor.

RUN SetOrigLineUpdateValues
  ( INPUT blttship_details_line_update.item_ptr,
    INPUT dSOOrderQty,
    INPUT blttship_details_line_update.order_uom,
    INPUT blttship_details_line_update.cDimension,
    INPUT blttship_details_line_update.disp_price,
    INPUT blttship_details_line_update.disp_price-uom,
    INPUT blttship_details_line_update.ext_price ).

/* kem - set all the fill ins */

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE inv_affect wn-ship_details
PROCEDURE inv_affect :
/*------------------------------------------------------------------------------
  Purpose:  called from usodetal.w
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplInvAffect AS LOGICAL NO-UNDO INIT TRUE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE LeaveExtPrice wn-ship_details
PROCEDURE LeaveExtPrice:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  
  DEFINE INPUT PARAMETER ipdNewExtPrice     AS DECIMAL    NO-UNDO.
  
  DEFINE VARIABLE lContinue                 AS LOGICAL    NO-UNDO.
  
  goSODetailPresenter:LeaveExtPrice
    ( INPUT ipdNewExtPrice,
     OUTPUT lContinue ).
  
  IF lContinue THEN 
    RUN RefreshLineUpdate.

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE LeavePrice wn-ship_details
PROCEDURE LeavePrice:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipdNewPrice      AS DECIMAL    NO-UNDO.
  
  DEFINE VARIABLE lContinue   AS LOGICAL    NO-UNDO.

  goSODetailPresenter:LeavePrice
    ( INPUT ipdNewPrice,
     OUTPUT lContinue ).
  
  IF lContinue THEN
    RUN RefreshLineUpdate.
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE LoadLineUpdate wn-ship_details
PROCEDURE LoadLineUpdate:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

  DEFINE VARIABLE lDisableFields    AS LOGICAL    NO-UNDO.
  DEFINE VARIABLE lContinue         AS LOGICAL    NO-UNDO.
    
  IF NOT AVAILABLE blttship_details_line_update THEN
    FIND FIRST blttship_details_line_update WHERE
               RECID(blttship_details_line_update) = grLineUpdateRECID
               NO-LOCK NO-ERROR.
  
  IF NOT AVAILABLE(blttship_details_line_update) THEN
  DO:
    MESSAGE "KEM" VIEW-AS ALERT-BOX.
    RETURN.
  END.     

  IF NOT AVAILABLE(blttship_details_line_update)  OR 
     grLineUpdateRECID = grOrigLineUpdateRECID    THEN               
    RETURN. 
   
  ASSIGN 
    giLineUpdateRow       = br-shipdetails:FOCUSED-ROW IN FRAME {&FRAME-NAME}
    grOrigLineUpdateRECID = grLineUpdateRECID
    giLineUpdateSequence  = blttship_details_line_update.sequence.
  
  /* rules apply to all items */
  IF temp-ship-details.lSOWOParentItem        OR 
     temp-ship-details.lMultipleOpenShipments THEN 
    lDisableFields = TRUE. 
    
  RUN LoadLineUpdatePricingFields( INPUT lDisableFields ).
  
  IF {invitemtype.i &cItemType       = blttship_details_line_update.item_type
                    &cProcessContext = "PcValidUOM" } THEN
    glAllowPCRefUOM = TRUE.

  IF {invitemtype.i &cItemType       = blttship_details_line_update.item_type
                    &cProcessContext = "UnitValidUOM" } THEN
    glAllowUnitUOM = TRUE.
    
  IF NOT VALID-OBJECT(goSODetailPresenter) THEN 
    goSODetailPresenter = NEW so.SODetailPresenter( INPUT giSOID,
                                                    INPUT TRUE,
                                                    INPUT THIS-PROCEDURE ).
  
  ASSIGN 
    goSODetailPresenter:SOID = giSOID.
  
  goSODetailPresenter:InitialDetailDisplay
    ( INPUT blttship_details_line_update.rSODetailRecid,
      OUTPUT lContinue ).
  
  IF lContinue = NO THEN
    RETURN.
  
  RUN InitialLineUpdateFields.
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE LoadLineUpdatePricingFields wn-ship_details
PROCEDURE LoadLineUpdatePricingFields:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER iplDisablePricingFields    AS LOGICAL  NO-UNDO.
  
  /* need to replace grid fields with new fill ins/buttons/drop-downs in line edit frame */
    
  ASSIGN 
    temp-ship-details.disp_price    :READ-ONLY IN BROWSE br-shipdetails = iplDisablePricingFields
    temp-ship-details.disp_price-uom:READ-ONLY IN BROWSE br-shipdetails = iplDisablePricingFields
    temp-ship-details.ext_price     :READ-ONLY IN BROWSE br-shipdetails = iplDisablePricingFields.
  
  /* pricing specific rules */    
  IF NOT iplDisablePricingFields THEN
  DO:
    IF NOT PricingIsEditableForDetail() THEN 
    DO:
      ASSIGN 
        temp-ship-details.disp_price    :READ-ONLY IN BROWSE br-shipdetails = TRUE 
        temp-ship-details.disp_price-uom:READ-ONLY IN BROWSE br-shipdetails = TRUE
        temp-ship-details.ext_price     :READ-ONLY IN BROWSE br-shipdetails = TRUE.
    END. 
    ELSE 
    DO:
      IF NOT goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","override_price_staging") THEN 
        ASSIGN 
          temp-ship-details.disp_price    :READ-ONLY IN BROWSE br-shipdetails = TRUE 
          temp-ship-details.disp_price-uom:READ-ONLY IN BROWSE br-shipdetails = TRUE.
      IF NOT goSecurityManager:IsActionGranted("Sales Orders-Quotes","comtstat","enter_extended_price_staging") THEN 
        temp-ship-details.ext_price:READ-ONLY IN BROWSE br-shipdetails = TRUE.
    END. 
  END.
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE LoadSoParameters wn-ship_details
PROCEDURE LoadSoParameters:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

  IF NOT CAN-FIND (FIRST ttParamSO WHERE
                         ttParamSO.system_id = sys.AgilitySession:CategoryList[{&param_so-sys-id}] 
                         NO-LOCK) THEN
    RUN getparamso.p ON SERVER sys.AgilitySession:AppServer
      ( INPUT  sys.AgilitySession:CategoryList[{&param_so-sys-id}],
        OUTPUT TABLE ttParamSO ).

  FIND FIRST ttParamSO NO-LOCK NO-ERROR.

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE modifications wn-ship_details
PROCEDURE modifications :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------
  Date     Dvlp ITR    Description
  -------- ---- ------ ----------------------------------------------------------
  01/02/02 WMB  196389 Add code to apply row-entry trigger for browse following reposition so global variables are assigned correctly.
  01/03/02 WMB  196282 Added procedure handle as input to create_so_window.  This way when the SO closes we can run ApplyEntry routine to
                       refresh the browsers.  The on entry trigger for current-window wasn't executing when SO was closed and focus defaulted
                       back to window.
  01/08/02 WMB  197065 Add code to build screen in main block when window is not ran persistently.
  01/11/02 WMB  197202 Fix code so correct questions are asked of user when they adjust negative qty shipment detail.
  01/11/02 SMB  197464 Fixed so the size and description that display in the browser come from the so_detail
                       record instead of the item record.
  01/15/02 JL   197715 Removed use of images from images directory.
                       Changed to images directory
  01/22/01 DAD  194572 Delete or adjust suggested_tally record when increasing qty on shipment.
  01/29/02 WMB  121534 Add code to release any extra payment attached to SO to Unapplied Cash
                       if SO status is changed to invoiced.
  02/05/02 WMB  121534 Added new input parameter to chgpmt.
  02/21/02 WMB  200720 Added new input parameter in call to comitree.p
  03/05/02 MDB  203094 Fixed code that was causing browser error when trying leaving qty column.
  03/27/02 MCO  204413 Remove default button designation from bt-close. Make restart_search wait until
                       after freeze_exit runs before executing.
  04/01/02 WMB  205638 Added new output parameter from comitree.p to notify process if complete tree was built.
  04/08/02 WMB  206001 Added new input parameters to comitree.p.  Not used in this procedure.
  05/06/02 MCO  173172 Added new input parameter to chgbtdet.p.
                       Added new input parameter to somodifr.p, that will get passed to chgbtdet.p there.
                       Added code to UpdateBoOnOrder to create ttTallyChange records to pass to somodifr.p.
                       Added call to chgbtdet.p in UpdateBoOnOrder to update shipping SO if the linked PO that
                       was updated was a transfer PO.
  05/16/02 WMB  209893 Removed assign of temp-commit-info.iShipmentNum.
  05/17/02 MCO  173172 Pulled chgbtdet.p out of somodifr.p and added it this program.
                       Added conditions to only create ttTallyChange records for transfer orders where
                       the PO is ordered by tally, so we don't spend time creating them when they are not necessary.
  06/25/02 DAD  205751 Changed how we get inventory parameters. Removed passing temp table to comitree.p.
                       Removed creating tt-inventory-parameters in proc buildTempInvParams. In proc create-temp,
                       removed reading inventory paramters from the item table and adding reading from dynamic temp
                       table. Added passing item branch system_id to comitree.p.
  07/30/02 WMB  209351 Changed code to use reusable procedure to retrieve customer info vs. reading records directly.
  08/06/02 WMB  216391 Fix code so display screen isn't ran on startup until after the enable ui is processed.
  08/14/02 DAD  205751 Added item_ptr_sysid to table reads where required. Remove passing system_id's to comitree.p.
  08/20/02 MCO  215360 Changed display format of temp-ship-details.ext_price to handle maximum possible value.
  08/21/02 MCO  218872 Removed process events command from within build_screen, as I could find no reason for it
                       to be there, and it was allowing the close event of this window to execute in the
                       middle of the procedure, which caused problems in both this window and the windows
                       that called this window persistently.
  08/29/02 MDB  218003 Fixed variable name used for prmindef.i. Since the name was wrong, parameters were being
                       set incorrectly.
  09/03/02 SMB  208769 Fixed so the ttTallyRecords table is unique for a table name and rowid.
  09/09/02 MDB  216391 Removed code that assigned parent window. This is now handled in allwmain.i.
  10/07/02 WMB  219006 Added new input parameter to bo_mgr.  Not used here.
  10/09/02 DAD  205751 Use correct gcCategoryList on reads of item_on_order table.
  10/10/02 SMB  205744 Added new change_branch procedure that is called from the unbilled orders window to change
                       branch into the branch from the selected order.
  10/31/02 MDB  225793 Fixed call to build_screen.
  11/06/02 DAD  215876 Changed the way the item_reserved/item_bo/item_on_order are deleted so that the delete trigger works to
                       adjust the correct values for "committed", "backordered" and "on order" on the qty_total table.
  11/12/02 WMB  202275 Changed code to process correctly when user is changing qty from 0 to something different.  Code
                       should be looking for existing 0 shipment records.
  11/24/02 DAD  215876 Added assigning item_bo.inv_affect field.
  11/27/02 KJH  198701 Removed link field usage on messages table.
  12/09/02 DAD  214066 Added parameters to run of manucomm.w.
  12/11/02 JJB  224990 Added fields to ship_to_address query.  Changed system_id to
                       tran_sysid.
  01/06/03 DAD  230374 Manual commit refactoring. Added parameters to run of autocomm.p.
  01/24/03 DAD  233732 Removed unnecessary include mancommit.i. Added variable definition lDoLater.
  02/04/03 WMB  210546 Added new input parameters to manucomm for customer info.
  02/27/03 WMB  236397 Added code to sort browse in display_seq order.
  03/28/03 WMB  239866 Added code to call specify storage for negative qty vs. specify commit.
  03/31/03 WMB  239866 Fixed code to not display specify commit is necessary for
                       negative qty if tally doesn't exist or no qty is available.
  04/03/03 MDB  196637 Changed apply_to to apply_to_so.
  04/03/03 MCO  220410 Fix the parameters in call to calcgmpc.p
  04/22/03 WMB  242685 Fixed code to not force specify commit from sundry items.
  05/15/03 WMB  238577 Added new input parameter to comitree.p.
  05/18/03 MCO  227432 Add call to dp_stat.p if linked po detail qty changed.
  05/20/03 MCO  227432 Add call to dp_stat.p in "tran closed" mode if tran was closed or canceled.
  05/29/03 WMB  219956 Added new output parameter to call to selectloc.w.  Not used here.
  06/04/03 MDB  245128 Modified to use new so_detail "linked_tran" fields.
  06/11/03 JJB  248055 Changed code to enable Route fill-in.
  06/12/03 BKK  247879 Added messages for when tally doesn't match quantity for tally calc item when backordered.
  06/13/03 WMB  248395 Add buffers for po_header to reduce change of bleeding scope.
  06/16/03 BKK  240271 Removed use of item_reserved.reserve_status field.
  06/30/03 WMB  219956 Added new input parameter to call to selectloc.w.
  07/14/03 WMB  225382 Added code to handle hardwood lumber items.
  07/17/03 WMB  247155 Changed code to compare reserved qty to on-hand vs. available
                       for setting flag for user needing to specify commit.
  07/29/03 KJH  251692 Removed reference to so_change_no field.
  07/30/03 WMB  253736 Added buffer on item_on_order for updates.
  08/03/03 WMB  225382 Modified code for hardwoods to display shiptally window.
  08/04/03 BKK  242945 Added input parameter to loadhist.p.
  08/06/03 TAM  233776 Change to display a negative ADF.  This will negative when
                       invoicing negative sales orders.
  09/03/03 KJH  257240 Removed use of driver.p.
  09/26/03 WMB  258570 Fix code to handle temp-ship-details record not being scope
                       & remove change of scope being lost.
  09/29/03 WMB  258937 Added code to reset Tally Calc message if user selected to cancel changes.
  10/01/03 WMB  256166 Added new inputs to tallycal.w for desired position of window.
  10/09/03 WMB  257537 Modified code to use/handle standard gross margin calculation procedure, calcgmpc.p.
  10/14/03 SMB  261238 Added new cust info button and supporting logic. Also changed wording for miscellaneous info tooltip.
  10/16/03 WMB  257537 Fixed fields phrase error.
  10/31/03 WMB  262879 Make ship date a required field.
  10/31/03 WMB  262879 Fix scoping issue with shipments header table in close trigger.
  11/03/03 BKK  259871 Added fill-in estimated profit to window.
  11/07/03 WMB  264560 Added code to refresh price on ttItemBo in window entry code.
  11/13/03 DAD  245415 remove non existant trans_message fields. Changed cost variable definition.
  11/17/03 BKK  259871 Changed estimated profit and adf fields to be right-aligned and same width as other fill-ins.
  11/24/03 SMB  266119 Added new input parameter to call of recost.p for purchase type.
  11/25/03 WMB  262028 Added code to update exp_ship_date on SO & linked PO for direct orders when shipment ship date changes.
  12/01/03 MCO  245415 Display the qty in the browse with decimal precision of 10, so we can properly match
                       what's stored in the shipment_detail records.
  12/10/03 DDB  224220 Replace Dameware Calendar OCX with MS MonthView
  12/17/03 WMB  258859 Modified code to handle reading other charges/costs(add-ons) from charge/cost tables vs. tran tables.
                       Modified input parameters to calcgmpc.p.
  12/31/03 WMB  269492 Modified code to display warning message during specify location logic to be based on
                       records not being processed vs. records needing locations to be specified.  Also fixed
                       code to handle multiple commits for same line item, commit-threshold needed to be
                       updated as qty was being used.
  01/02/04 ddb  224220 Replace logic with PositionCalendar.i
  01/11/04 DAD  253463 Changed item type refactoring to use function and business rules in invitemtype.i.
  01/12/04 WMB  270553 Fixed code that was referencing item record out of scope.
  01/16/04 WMB  269492 Changed code behind specify location to display message if an item is skipped due to it being carried lower than location.
  01/19/04 MDB  258861 Coded to handle supplier rebates.
  01/21/04 BKK  257736 Replaced "{&CustInfoList}" with gcVariableList for custinfodef.i
  01/22/04 WMB  272621 Added code to not update so_status if status is still "In Process".
  02/01/04 WMB  241135 Added code to handle PC pricing.
  02/03/04 DAD  253463 Correct checking correct item type field on close of window. Remove using legacy
                       flag_is_what to check for tally calculator items and replace with new item type
                       refactoring function.
  02/05/04 MDB  258861 Fixed supplier rebate issue.
  02/11/04 WMB  241135 Fixed code to check for default dimension of 00X00X00.
  02/12/04 WMB  258859 Added code to set message button icon depending on the existence of messages.
  02/15/04 MDB  258861 Fixed supplier rebate issue.
  02/24/04 WMB  241135 Fixed code to calculate PC price correctly.
  02/25/04 MDB  258861 Added input parameter in call to getothchgcst.p.
  03/11/04 WMB  278289 Changed code to recost order following commit update in internal procedure, update_details.
  03/15/04 BKK  266164 Added assignment of temp-commit-info.force_bo to handle forced backorders.
  04/01/04 MDB  258861 Added input parameter in call to getsprbext.p.
  04/01/04 WMB  261697 Replaced load report with Pick Ticket and added Delivery.
  04/02/04 WMB  261697 Changed code to count the num of print_transaction records to figure
                       out the number of times a form has been printed vs. reading shipments header.
  04/02/04 WMB  261697 Modified code to handle new parameter from sostat.p.
  04/08/04 WMB  281626 Fixed timing of when we empty temp table passed into autocomm.p.
  04/21/04 KJH  271283 Changed icons to new standards.
  04/19/04 MDB  279598 Added output parameter in call to getsuppreb.p.
  05/06/04 WMB  261697 Added input parameter for PICK ID to manucomm.w, comitree.p,
                       gnumcomm.p, dlsugtly.p & sospecifystorage.p.
  05/12/04 WMB  261697 Removed totals button and call to shipamts.w.  Added new button
                       to allow user to access shipments detail information(shipddsp.w).
                       Changed delete code to allow user to select if they wish to ship later.
  05/13/04 BKK  285503 Changed font of estimated profit and ADF fields to match sototals.w, and widened fields so decimals won't get cut off.
  05/14/04 MAS  261697 Passing pick id as a parameter on calling sotallylst.p.
  05/18/04 WMB  285809 Remove explicit positioning setting.
  05/18/04 DAD  267527 Changed to use new tally calculator functionality. Removed proc tally_msg_add as it's
                       not being used anywhere.
  05/26/04 DAD  267527 Removed run of load_tally_qty. Also replaced variable to return bf quantity with tally breakdown string.
  05/28/04 MAS  261697 Passing pick id and pickseq as a parameter when calling numprints.p.
  06/02/04 WMB  261697 Fixed mismatch parameter errors for gnumcomm.p.
  06/04/04 DAD  267527 Added parameter to manucomm.w. Added getting tally calc breakdown prior
                       to running manucomm.w.
  06/15/04 DAD  289056 Round tally quantity for comparison with shipment quantity.
  06/22/04 MAS  261697 corrected - Missed passing pickid to sotallylst.p.
  06/22/04 BTH  289613 Changed window size
  07/23/04 DAD  267527 Changed to only delete tally if user removed all tallies from tally
                       breakdown string.
  07/29/04 BKK  285739 Changed fill-in for SO ID to hold 8 digits.
  08/06/04 DAD  267527 Delete tally break down for item when shipment deleted and/or quantity goes to zero on SO.
  08/09/04 BKK  285739 Added new branch ID logic.
  08/16/04 BTH  292497 Added code to display the correct buttons when there are 3 or more items with
                       or without messages.  Program was getting the current row when single clicked and
                       the program was automatically returning to the 1st line in the browse when leaving the last line.
  08/26/04 BTH  277769 Moved Dispatch Icon to existing toolbar.
  09/10/04 WMB  298339 Modified window to handle zeroing direct detail qty and then adding qty back.
  09/16/04 BTH  299247 Changed program to allow committing to default locations.
  10/11/04 WMB  301520 Changed qty compares to check threshold allowance vs. straight compare.
                       Found an additional spot to change.
  10/11/04 WMB  285332 Changed window to handle delete of detail on direct order correctly when user selects to not ship later.
  10/28/04 WMB  299556 Modified inputs into msg.w.
  11/08/04 DAD  276853 Assign temp table market cost fields. Add parameter to run of shiptally.w. Assign market cost for commit process.
  11/11/04 WMB  276853 Added new output parameters to get_twl.p.
  11/29/04 WMB  307241 Fixed window so entry trigger only fires once on initial window display.  Also changed call to recost.p to call in all details mode vs. calling for each detail individually.
  11/30/04 BTH  305886 Updates to calendar triggers.
  12/01/04 WMB  307696 Correct code for checking qty change on leave of qty cell in browse.
  12/02/04 WMB  307696 Fixed parameter order in xdelete_new_tally.  Prior code defect found.
  12/27/04 BKK  305886 Changed to use include file when clearing out date widgets.
  12/30/04 BKK  310124 Added parameter to selectloc.w for where called from.
  01/07/05 BTH  311874 Changed compare of suggested tallies to not warn if difference is less than .001.
  01/13/05 WMB  311941 Added code to pass new input parameter into manucomm.w for update mode.
  01/24/05 WMB  280894 Removed reference to freeze_exit.  No longer used.
  02/03/05 MCO  272092 Add parameter in call to getothchgcost.p
  03/01/05 BTH  226550 Added code to run manucomm.w as a dialog box.
  03/09/05 WMB  317938 Added code to allow user to move shipment details for direct from one shipment to another(New or Existing).
  03/10/05 WMB  317938 Modified rules for starting a new search vs. refresh.  User must have changed route id and searched by route id in previous screen.
                       Modified code to call standard routine, adjshipdt.p, for adjusting expect ship date on linked trans vs. hard coding logic.
  03/14/05 TAM  279076 Changed to call procedure to recalc the shipment total.
  03/14/05 WMB  280894 Fixed code to adjust item_bo records correctly when user deletes detail or adjust qty to zero for direct orders.
  03/17/05 BKK  313155 Added parameter to custinfo.w to default to ship-to view.
  03/21/05 TAM  279076 added new parameters to shiptotal.p
  03/21/05 WMB  318340 Fixed code to initialize variable prior to use.
                       Items following lumber items were being flagged as
                       order by tally items.
  03/30/05 TAM  279076 added code to display Shipment Credit status, & If shipment is adjusted added code to display credit message
  04/07/05 BKK  304774 Changed to run shipddsp.w persistently, so when this window is closed by another process, that window will be closed properly.
  04/12/05 MCO  272418 Adjust call to dp_maint.w.
  04/13/05 WMB  292556 Modified code to default picking UOM vs. ordered UOM similar to pick review.
  04/20/05 BTH  226550 Changed window to insensitive when calling Specify Commits.
  04/29/05 WMB  323680 Modified code to auto adjust SO tally calc msg if adjusting
                       shipment tally calc msg and full qty on SO is on shipment
                       being updated.
  05/02/05 SMB  291118 replaced chkpgmsec.p call with check token security include
  05/04/05 SMB  325194 Changed to use new check token security include logic to determine user security values.
  05/12/05 TAM  279076 Added new parameter for pickblds
  05/19/05 MCO  272418 Adjust initialization of lKeepTranInfo variable before calling dp_maint.w.
  05/24/05 WMB  323680 Fixed fields phrase error.
  06/02/05 WMB  280894 Fixed window so delete of lumber item with a tally would be updated properly.
  06/06/05 WMB  280894 Modified input parameters to movshpdtl.p.
  06/06/05 BKK  279076 Added input-output parameter to shiptotal.p. Changed to not run credit check when deleting a line or increasing qty.
  06/09/05 BKK  279076 Changed to run credit check when increasing qty or deleting item.
  06/10/05 BKK  279076 Added parameter to ordtotal.p to determine if programs should run on appserver.
  06/13/05 WMB  323680 Added code to update SO tally calc message if user changed tally calc message without changing overall quantity.
  06/16/05 WMB  306574 Modified code to handle CM detail from SO entry.
  06/17/05 TAM  279076 Changed to check credit when leaving window, instead with each detail change.  If the SO Order total didn't change
                       don't run Credit check, the user was  move qty to new shipment.
  06/20/05 BTH  317348 Changed to read so_detail.pick_uom instead of item_branch.picking_uom.
  10/02/11 WMB  US21319 Added new transfer input parameter to existing call to msg.w
*/
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE modifications2 wn-ship_details
PROCEDURE modifications2 :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------
  Date     Dvlp ITR    Description
  -------- ---- ------ ----------------------------------------------------------
  06/21/05 TAM  279076 Changed to display message when credit has changed on shipment
  06/22/05 WMB  306574 Modified code to auto change negative qty to positive qty for SO type details.
  06/22/05 WMB  306574 Added new input parameters to sospecifystorage.p for piece price flag & price uom sysid/ptr.
  06/24/05 WMB  333524 Added save button to remove confusion of when updates are applied.  Changed exit to give standard message if changes have been made.
  06/30/05 TAM  279076 Fixed where it wasn't running credit check when deleting a line on a shipment.
  06/22/05 WMB  306574 Added new input parameters to sospecifystorage.p for cost/market cost.
                       Added logic to handle adjusting pre-receipt records when user modifies commits for CM details.
  07/07/05 WMB  306574 Modified running of sospecifystorage.p based on detail type vs. qty.
  07/14/05 SPB  272422 Adden input parameter to call to dp_maint.w.
  07/28/05 WMB  337291 Modified call to sotallylst.p to pass prof name vs. sys-ids.
  07/28/05 WMB  306574 Added new field to temp-ship-details table for price only adjustment flag.
                       Added new input parameter for price only adjustment to call to sospecifystorage.p
  08/08/05 BKK  330956 Added logic to update tally calc items on PO detail for SO that DNAI.
  08/11/05 BTH  337133 Added input parameter to msg.w.  Not used here.
  08/15/05 BTH  317348 Fixed so Picking UOM is displayed in browser.  I missed this with the initial change of displaying the values in the picking UOM.
  08/25/05 WMB  341357 Added code to auto delete shipments header on close if no shipment details exist.
  09/01/05 WMB  328655 Added code to handle adding detail lines to SO/Shipment for orders that affect inventory.
                       Added code to pass new input parameter into manucomm.w.
  09/08/05 WMB  341474 Added new button for header messages.
  09/13/05 WMB  343531 Added new input-output parameter in call to bo_mgr.p.
  09/22/05 WMB  344429 Replaced dp_entmenu.p reference with mn_dp_entmenu.p.
  09/22/05 SMB  344344 Fixed fields phrase issue.
  10/14/05 SPB  321095 GUI changes.  Added Expected Delivery date.
  10/27/05 WMB  349563 Added code to recost SO/shipment detail following location change.
  11/09/05 WMB  343921 Added code to pass billto sequence as input parameter in calls to custinfo.w.
  11/10/05 WMB  351272 Added code to manage default group for detail entry.
  11/16/05 WMB  328655 Added credit checking logic following return from adding an item to the shipment.
  11/18/05 WMB  343921 Fix fields phrase error.
  11/22/05 TAM  351856 Changed to run credit check when leaving window.
  12/01/05 WMB  281167 Modified code so so_detail.po_cost is assigned equal to po_detail cost vs. so_detail cost.
  12/02/05 BTH  344091 Added security for allowing user to see Order Desktop.
  12/07/05 WMB  328655 Added code following run of another_detail in usodetal.w to check if window was parented correctly and stop process if it wasn't.
  12/16/05 BTH  355601 Added logic to keep the conversion if the ord uom = picking uom.
  12/19/05 BTH  355904 Fixed fields phrase error.
  01/03/06 WMB  353108 Fixed code so correct record would be selected following return from specify commit via choose of the update button.
  01/11/06 MCO  355582 Add logic to synch auto-created dispatch if staging record is reduced but the so_detail is not.
  02/01/06 SPB  282442 Added new parameters to pickblds.p - not used here.
  02/16/06 BKK  325229 Added code to handle using default group for new items added.
  02/22/06 MCO  355582 Add parameter in call to dp_autocreate.p
  03/02/06 WMB  349457 Added code to validate exp delivery date with date exceptions.
  03/21/06 WMB  367396 Add shipto recid to call to another_detail in usodetal.w.
  04/05/06 WMB  349457 Added new input parameter in call to bo_mgr.p.
  04/06/06 BTH  274125 Added new fields for qty conversions.
  04/11/06 WMB  349457 Added code to pass long lead flag into manucomm.w.
  04/17/06 BTH  274125 Added input parameter to pickblds.p for including sheet goods to be cut.
  04/17/06 WMB  349457 Added code to run dellnglead.p to release long lead backorders if user increased qty and
                       we needed to attempt to select unstaged qty.
  04/19/06 SPB  350183 Added code to check for load_type, load_timeframe, load_priority to see if there is any shipment_info defined
                       before opening up dispatch maintenence.
  04/24/06 WMB  370727 Modified code to use chkcmtonhand.p to check if commit is necessary.
  04/25/06 MCO  367813 Add calls to dp_cxlstaging.p for case when dispatched shipment is canceled due to no remaining shipment_details.
  04/26/06 WMB  352647 Added new input parameter to call to another_detail in usodetal.w.
  04/28/06 MCO  367813 Take soentry.p and dp_cxlstaging.o calls off of appserver to avoid locking issue and fix temp-ship-detail not available error.
  05/11/06 WMB  349457 Correct timing of checking if exp delv date and ship date should be cleared.
  05/13/06 MCO  376764 Add checks for holds before allowing dispatch.
  05/16/06 BTH  377059 Added code to display Sheet Goods in Tally UOM.
  05/16/06 WMB  377115 Modified code to run shipment build process after shipments_detail quantity has been updated.
  05/16/06 BTH  377059 Fixed code that wasn't assigning temp-table qty value when changing qty.
  05/25/06 WMB  379412 Added code to run BO manager process if user deletes shipment detail.
  06/02/06 TAM  379770 Added the created of temp-table so the credit will be checked for Shipment.
  06/14/06 BTH  274125 Fixed code that was displaying items in tally uom.
  06/28/06 WMB  377565 Added code to allow shipment credit check to process if shipment total changed regardless
                       of order total changing for orders that affect inventory.
  07/16/06 WMB  367121 Added ttlocation as input in call to pickblds.p.
  08/17/06 BKK  377873 Widened route widget.
  09/01/06 BKK  390927 Removed call to chkrlitm.p and unused procedure.
  09/06/06 BTH  383847 Added 2 new columns for Group ID and Group Header.
  09/06/06 WMB  391248 Added new input parameters to call to get_twl.p.
  10/05/06 WMB  395417 Removed reference to attresvd.i and corresponding temp table (temp-detail-reserved).
  10/06/06 WMB  396297 Added new input parameter to call to pickblds.p.
  10/06/06 MCO  396968 Disallow add of new item to transfer order.
  10/23/06 MCO  396968 Ignore global variable when checking for transfer order.
  11/06/06 WMB  387576 Added code to allow user to select which UOM to display quantity in (Picking, Delivery, Ordered or Invoice).
  11/20/06 BKK  402885 Added logic to create history record when shipments header record is deleted.
  11/27/06 BKK  402885 Removed extra read on so header table.
  11/28/06 WMB  399093 Changed save button label from save to save header.  Modified code to only check ADF change if ADF was overridden.
  01/08/07 WMB  406671 Replaced call to soentry.p with call to salesordp.p.  Code functions the same.
  01/17/07 BKK  397982 Changed to use different include file for ttBranch table.
  02/01/07 WMB  390733 Added code to allow user to specify tally for direct order
                       regardless if detail was originally ordered by tally.
                       Added code to adjust default dimension record when
                       dimension specific records added.
  02/05/07 WMB  407989 Added code to call dialog to allow user more options on how to handle deletion of shipment qty.
  02/06/07 WMB  406671 Removed run of so/salesordp.p from appserver to remove scoping issues.
  02/26/07 SMB  397374 Added logic to update the associated parent/balance PO's when the quantity/on order records are updated on the child PO.
                       Also added logic to reallocate cost packets in this situation if the PO parameter is setup to do so.
  02/28/07 SMB  397374 Added logic to update the landed cost on the associated split PO's when a quantity change is made.
  03/06/07 MAS  407857 Display appropriate cost based on the security setting.
  03/09/07 WMB  419210 Added code to by-pass item types that DNAI within logic for commit to specific location.
                       Added code to not allow specify commit for item types that DNAI.
  03/26/07 WMB  381743 Modified input parameters to existing calls to usodetal.w & another_detail(usodetal.w).
  04/03/07 MCO  407857 Hide cost designator column if cost column is being hidden.
  04/20/07 SPB  423077 Allow window resizing.
  05/30/07 WMB  381743 Added code to internal procedure, get_screen_value, to handle request for glUsodetalRegisterPOSMode from usodetal.w.
  06/27/07 MCO  434013 Added route validation.
  07/03/07 WMB  407989 Replaced progress message with call to shiplater.w for consistency.
  07/13/07 SPB  429793 Added navigation, update status, and invoice year/period widgets to window as well as logic for widgets.
                       Most logic comes from the same widgets in comtstat.w.
  07/16/07 BKK  393703 Added check for sighting_info record before adding a dispatch.
  07/17/07 WMB  437537 Add code to calculate percentage of remaining rebate that applies when
                       calculating amount for non-invoiced shipment.
  07/24/07 WMB  428149 Added additional validation to validate qty can be changed on shipping SO.
  08/01/07 BKK  438804 Changed cancel staging message.
  08/10/07 WMB  430926 Added new input parameter to existing call to comitree.p.
  08/17/07 WMB  422211 Added code to allow user to re-allocate or commit from on hand if user enters qty that exceeds available.
  08/20/07 SPB  423077 Fixed min-height and min-width to be based on window-hieght and window-width.
  08/23/07 WMB  422211 Fix fields phrase error.
  08/24/07 SPB  423077 Fixed to assign default frame width/height to window width/height and set scrollable to no.
  09/06/07 BTH  445069 Changed call to be on appserver for so header order total
                       update so record can be used when calculating shipment
                       total which was already on the appserver.
  09/11/07 WMB  422211 Fix code so hour glass gets shut off correctly after call to manucomm.w.
  09/12/07 WMB  431677 Added new input parameter to existing call to pickblds.p.
  10/09/07 WMB  430926 Removed input parameter added to existing call to comitree.p on 08/10/07.
  10/12/07 WMB  450235 Removed calls to RUN updsplitpo.p from appserver.  Open transaction was causing locking on appserver.
  10/17/07 WMB  449276 Added buffer for po_detail in internal procedure, UpdateBoOnOrder, to remove potential for share lock following update.
  10/26/07 WMB  452068 Added code to internal procedure, build_screen, to auto close screen if shipments_header.status_flag is "I" along with shipments_header not being available.
  11/06/07 SMB  427058 Added new input parameter to tallycal.w.
  11/21/07 WMB  427058 Replaced menu security check with action security.
  12/03/07 BTH  453382 Added code to process items carried at content and content/tag when tag type is Mult Unit...
  12/14/07 MCO  458614 Add Specify Location mode to cmt_auto.p to let it commit commit-all items
                       at the location level instead of the branch level when the location is specified.
  12/16/07 BKK  329619 Added parameter to salesordp.p for ttPassThruDetails. Added parameter to recost.p to determine if pass-thrus should be recosted.
  01/04/08 WMB  460658 Modified code to update so_detail tally_uom based on user selection.
  01/03/08 WMB  427058 Modified input parameters to existing call to pickblds.p.
  01/10/08 WMB  440309 Added new entry (AddSensitive) into internal procedure, get_screen_value, called from usodetal.w.
  01/10/08 SPB  425780 Changed message title from Question to Warning for Available-Reallocate message.
  01/29/08 BTH  274461 Added code to not allow the user to increase quantites on direct b/t.
  01/29/08 BTH  274461 Added code to not allow a req so item to be deleted if ship so has been at least partially staged, picked, or invoiced.
  01/31/08 BKK  462573 Added new case statements for setting Create RM & Create Cut File on save checkboxes.
  02/20/08 BTH  274461 Added code to not allow a req so item to be deleted if ship so has been at least partially staged, picked, or invoiced.
  02/26/08 BTH  468154 Added security for cancel staging button.
  02/26/08 BTH  274461 Added code to check if deleting a detail on the req direct b/t order is allowed.
  02/26/08 BTH  274461 Added code so when reducing quantity on req direct b/t the remaining quantity is not shipped later.
  02/27/08 SPB  465912 Added code to not allow window to be closed when AP invoice Entry is ran for invoicing direct orders.
  02/28/08 BTH  468297 Added code to adjust b/o quantity after reallocating to check that order quantity does not have to be increased.
  02/29/08 BTH  274461 Added code so req shipments are updated when deleting items from shipment.
  03/19/08 WMB  462730 Added code to prompt user with warning if they choose to add an item to a shipment with a printed delivery ticket.
  03/25/08 BTH  465855 Added code so the quantity is correctly assigned when changing the quantity on a direct order.
  04/03/08 BTH  473615 Changed calls to calculate order totals to not be on
                       server.  A transaction is started when specifying storage
                       for a CM line which will cause locking issues.
  04/04/08 WMB  418864 Removed logic associated with "SHIP" tran type on charge_packet/cost_packet records.
  04/11/08 WMB  418864 Added code to disable window when calling ordchrgcstdtl.w and added code to calculate order total when returning from ordchrgcstdtl.w.
  04/16/08 WMB  418864 Add additional parameters to existing call to getothchgcst.p.
  04/21/08 BTH  408624 Added code to allow an item to be added to a ship direct transfer order.
  04/22/08 BKK  466414 Added logic to assign previous completed qty to ttso_detail table when deleting detail.
  04/28/08 WMB  475855 Added code to adjust suggested_tally along with item_reserved when user decreases qty, chooses to not ship later and a single item_reserved/suggested_tally exists.
  04/29/08 WMB  475855 Fixed code so adjustment to detail line and choosing to ship later will adjust qty correctly on suggested tally vs. moving entire tally to zero shipment.
  04/29/08 WMB  470889 Added new output parameter to existing call to manucomm.w.  Has no impact to functionality.
  04/29/08 BKK  467259 Added parameter to chgbtdet.p
  05/01/08 BTH  476588 Added code so tally change is passed correctly to chg bt detail.
  05/02/08 WMB  477277 Fixed code so delivery tickets would not be allowed for direct orders.
  05/05/08 BTH  474648 Added message to update the expect date/route on the so header.
  05/05/08 WMB  473386 Added internal procedure, GetLocalProfile, to be available to usodetali.i.
  05/29/08 BTH  473592 Added include file and parameter for copy hdr info to new ship-to.
  06/05/08 WMB  418864 Added code to re-calc shipment charges/costs prior to shipment total being updated.
  06/17/08 BTH  448119 Added code to check credit before changing status.
  06/20/08 BKK  457678 Added parameter to pickblds.p
  06/27/08 WMB  468374 Fixed entry trigger so screen would not perform a full refresh when it was not needed.
                       Modified refresh so order would not be re-costed (process that changed the commits should handle) or customer info retrieved unless customer changed.
  07/11/08 WMB  472615 Added new input parameter, add_on_applies from cust_shipto, to existing call to ordchrgcstdtl.w.
  07/29/08 WMB  445620 Replaced reference to accepts_bo from customer shipto with so_header.
                       Added new button for displaying unit_data associated with shipment detail.
  08/07/08 BTH  488629 Added code to populate tally change temp-table so transfer on order records are correctly reduced for lumber items.
  08/08/08 WMB  437734 Added assignment of new field, override_price_uom, on tttraninfo temp table.
  08/14/08 BTH  488843 Moved call to BO manager outside transaction to reduce locking issues.
  08/25/08 WMB  445620 Added new input parameters to existing call to fUseWMS function.
  09/08/08 WMB  494280 Added new widget and logic to allow user to calculate header charges being applied to details for display in other charge/cost columns in browse.
  09/29/08 BTH  476092 Added new button for specify tags.
  10/06/08 BTH  498496 Fixed code that was reverting whether the order affected inventory when the window was refereshed.
  10/09/08 BKK  476007 Added logic to uncomplete work orders set to be auto-completed when the shipment is deleted.
  10/15/08 BKK  476007 Added logic to uncomplete & recomplete WO's when qty is decreased on a shipment.
  10/28/08 WMB  491120 Added code to prompt user with options to adjust stop number based on route change.
  10/28/08 BKK  476007 Added error msg if staging more than remaining ordered qty on auto complete WO's.
                       Added logic to complete qty difference if increasing shipped qty.
  11/01/08 SPB  482287 Added logic for serial number entry.
  11/10/08 WMB  482229 Adjust code so status update process can handle being called in persistent pieces.
  11/14/08 SPB  482287 Added window handle input parameter to UpdateStatus procedure.
  11/17/08 WMB  477310 Added output parameter for ttTimeTracker temp table to existing call to salesordp.p.
  11/25/08 WMB  504727 Added commit_all to list of available fields with prmindef.i.
  12/08/08 WMB  503114 Modified code to allow user to add detail to shipping SO regardless of shipping rule.
  12/11/08 SPB  482287 Fixed logic to delete serial_numbers when deleting shipments_detail.
  01/08/09 MAS  473997 Expanded the size column to fit 22 characters.
  02/09/09 BTH  473997 Expanded the size column a little more.
  02/23/09 SPB  515907 Added logic to run prcqtychg.p after running shiptally.w.
  02/27/09 SPB  515907 Fixed fields phrase error.
  03/05/09 WMB  US339  Moved cancel button to header button section, reduced size and added icon images.
  03/16/09 WMB  US339  Removed code that was adjusting cancel button position due to resize of window.
  04/13/09 BKK  US327  Assigned new po_cost display fields to so_detail record.
  05/04/09 WMB  DE453  Modified code in internal procedure, modify_sodetail, to remove rounding issues caused by defining variable like so_detail.qty_ordered.
  05/06/09 SPB  DE493  Fixed code to run recalculate stop charges when ship_date is changed.
  05/20/09 BKK  US521  Moved logic finding shipment info to reusable procedure.
  05/27/09 BKK  US605  Added input parameter to dp_stat.p
  06/04/09 WMB  US633  Added code to handle allocating contract billing based on qty changes.
                       Added message to prompt user that qty cannot be changed.
  06/11/09 SPB  US357  Added logic to validate whether or not to remove reason code based charges when cm details are deleted
                       from a shipment.
  07/13/09 WMB  US755  Forced default for modified message to NO.
  08/14/09 SPB  DE1033 Added input parameter to somodifr.p for forcing a qty change - not used here.
  10/05/09 BKK  US968  Added parameter to dp_maint.w
  10/16/09 BKK  US972  Replaced call to qtycnv programs to use new standard procedure.
  10/20/09 SMB  US1040 Added new input parameter to realloc.w.
  10/20/09 BKK  US1040 Added new parameter to realloc.w
  10/29/09 SPB  US1361 Added input-output parameter to autocomm.p for Commit to BO notification and logic
                       to process notification.
  11/09/09 BKK  DE1502 Moved messages outside of transaction when deleting a detail. Added additional code to ensure records are released at the end of the transaction.
  11/03/09 BKK  DE1328 Added parameters to dp_autocreate.p
  12/03/09 BKK  US1416 Lock down window when calling sospecifystorage.p since recvstok.w may be displayed.
  12/10/09 SPB  US1369 Added context sensitive Help ID.
  12/15/09 SMB  US1512 Added new input parameter to realloc.w.
  12/17/09 DLF  US1369 Updated context sensitive Help ID.
  12/24/09 WMB  US1441 Added new input parameter to creddlg.w for calling program procedure handle.
  12/28/09 SPB  DE1695 Moved call to BO manager outide transaction in Delete button trigger to reduce locking issues.
  12/30/09 BTH  US1441 Added parameter to cancel so.
  01/12/09 SMB  US1513 Added logic to handle updating the quantity on a shipment for a credit memo line that has on hold or to be returned
                       quantity specified.
  01/14/10 SMB  US1687 Added new input parameter to dp_autocreate.p for the shipment number that was changed that caused the dispatch to need to be created.
  01/22/10 JRQ  US1738 Don't run serial number entry persistent
  01/26/10 BTH  US1747 Changed calculator image.
  01/27/10 BTH  US1529 Standardized delete button.
  01/27/10 BTH  DE1970 Added code to verify the current query result and browse record are in sync.
  02/02/10 BKK  DE2006 Fixed logic from US972 to only give messages where they were given before.
  02/04/10 BTH  US1527 Updated image names.
  02/04/10 SPB  DE2003 Added parameters to calcstopchrg.p for current SO credit check and total.
  02/09/10 JRQ  DE1904 Added parameter to custinfo.w.
  04/05/10 SPB  DE2284 Changed code to run SetParentWindow inside GUI Manager.
  04/06/10 BKK  US2022 Added parameter to updsplitpo.p - not used here.
  04/09/10 WMB  US1949 Modified parameter signature to existing call to UpdateStatus.
  04/14/10 WMB  US2065 Added new input parameter to existing call to pickblds.p
  06/03/10 BKK  US2087 Added logic to recalculate cost packets after PO detail is updated.
  06/10/10 BKK  US1667 Added parameter to updsplitpo.p. Changed to run costpktcalcamt instead of poldcost.p since it will be ran inside of there.
  06/14/10 SPB  US1930 Added new security action to not allow quantity to be reduced or deleted if delv ticket is printed.
  06/23/10 SMB  DE2649 Added logic to reset gdDetailTallyQty variable in temp-ship-details.dDisplayQty leave trigger when qty is actually changed.
  06/24/10 SPB  US2365 Modified quantity leave trigger event to run sishipdetailupd.p.  Also moved
                       procedures common to both to explshipi.i.
  07/13/10 DJH  DE1604 Added output temp table to cxlbttran for use in cancelso.p.
  07/19/10 BTH  DE2713 Removed process events.
  08/19/10 BTH  US2638 Changed call to order windows to use new manager.
  08/20/10 SMB  US2315 Changed expect date validation logic to call expectdateval rather than valdtwexc.p.
  08/23/10 BTH  US2639 Added security check for cust info.
  10/27/10 WMB  DE3107 Added code to block entry trigger when returning from moveshipdtl.
  10/28/10 BKK  DE3092 Added logic to update hw_tally table when deleting shipment.
  01/12/11 BTH  US3298 Removing shared price info handle and added include for handling price info.
  04/26/11 SPB  US17933 Added parameter to create_so_window for auto starting a new order
  08/01/11 BKK  US17139 Modified parameters to movshpdtl.p. Moved temp-invoiced temp-table definition to include file.
  08/05/11 WMB  DE20750 Added new input parameter to existing call to internal procedure, CallSpecifyCommit (explshipi.i)
  08/29/11 SPB  US21702 Removed ttpayments.i reference.
  09/27/11 SPB  US21925 Added error message output to sostat/p_sostat.
  10/19/11 WMB  DE22483 Added new input parameter to existing call to sotallylst.p
  11/28/11 WMB  US23056 Misc changes for new item branch setting to not track lot/tag/content in warehouse
  02/10/12 WMB  US23195 Added new input parameter to existing call to cmt_auto.p
  02/27/12 DJH  US24442 Added currency to window.
  04/03/12 BEH  US24128 Moved delete procedure to an include file.
  04/03/12 BEH  US24128 Added shipment hold from invoicing to window.
  04/04/12 BEH  US27456 Made adf override ui marginally better.
  05/09/12 BEH  DE28252 Corrected OCX calendar display error
  05/09/12 WMB  DE27899 Fix issue with CM lines showing incorrect quantity
  06/11/12 BKK  DE30883 Changed to run ordchrgcstdtl.w persistently.
  09/04/12 MAS  US31423 Added staging status display field to show the current status.
  09/07/12 WMB  US27736 Added new input parameter to existing call to cmt_auto.p
  11/19/12 BKK  US32254 Fixed alignment of cust info button.
  11/29/12 WMB  US32096 Added code to support tracking original price &  price UOM for detail/tally
  12/04/12 WMB  US32098 Added assignment of original price & price uom fields on temp table
  05/02/13 BEH  DE37722 Call serial number entry with header type, not detail.
*/
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE modifications3 wn-ship_details
PROCEDURE modifications3 :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------
  Date     Dvlp ITR     Description
  -------- ---- ------  ----------------------------------------------------------
  01/09/13 JRQ  US34139 Minor GUI changes
  02/18/13 SPB  DE35219 Added class to call creddlg.w.
  03/04/13 BKK  US35355 Added parameters to shipdetailbuildtemp.p
  03/07/13 BKK  US35355 Added output parameter to UpdateStatus, not used here.
  05/14/13 SMB  US37720 Added logic to call new routine to update the first ship/pickup date on any related dispatches when the ship date changes
                        on a shipment.
  07/16/13 WMB  US40623 Added new input parameters to existing call to tallycal.w
  07/18/13 WMB  DE41865 Made adjustments to handle direct branch transfer validation
  08/13/13 SPB  DE44367 Added avalara mode parameter to ship total procedure.
  08/19/13 SPB  DE44369 Added parameter to calcchgcst.p for clearing fixed charges at the shipment level - not used here
  09/17/13 BKK  DE47620 Fixed reference to record out of scope.
  09/17/13 BKK  DE46997 Added logic to check if 'hold from invoicing' field changed when exiting window.
  10/28/13 BKK  US39122 Added parameters to woautocompl.p
  11/21/13 SPB  US54375 Added detail sequence parameter to delchrgpk.p.
  12/17/13 SPB  US57982 Added parameters to cancelso.p.
  02/27/14 SPB  US62325 Added tran type parameter to pickrvw2.p
  03/12/14 SMB  US63864 Added definition of temp table that is needed by logic in include file referenced in delete trigger.
  04/21/14 JRQ  US64490 Added parameter to sstatd.p
  10/01/14 BEH  91440   Break link between WO and SO needs to send update to WMS.
  01/09/15 BKK  92634   Added parameters to chgreqso.p - not used here.
  03/25/15 SPB  94007   Refactored SO/Quote window open to use class.
  04/02/15 BKK  94098   Added logic to run specify commit persistently.
  04/09/15 BKK  93939   Updated labels to match standards.
  04/14/15 SPB  94183   Added ship via parameter to calcchgcst.p.
  05/15/15 WMB  94507   Modified code to support new status options for shipments
  06/04/15 BKK  94508   Added logic for new status options; added parameters to bldttstgd.p. Modernized window.
  06/08/15 BKK  94508   Changed to always enable print delv ticket checkbox.
  06/10/15 SPB  96074   Added logic to delete shipment messages when shipment is deleted.
  06/17/15 SPB  96071   Added sub id input to msg.w
  07/20/15 WMB  96527   Added missing ship via parameter to existing call to UpdateTotal
  12/04/15 BKK  98458   Added parameter to woautocompl.p - not used here
  12/09/15 WMB  98575   Added input parameters to existing call to specifytag.w
  01/11/16 SPB  92843   Added input to updatestatus procedure.
  02/11/16 JRQ  94045   Changed when to enable/disable the dispatch button
  03/02/16 SMB  98373   When deleting a shipment that is dispatched, changed how we handle updating the related dispatch. Instead of a yes/no question tracked
                        in error message table they will now get a window with multiple options.
  07/01/16 BKK  101441  Added column for WO ID
  08/10/16 WMB  101808  Modified code to support unloading sequence
  09/12/16 SPB  102200  Refactored call to msg.w to use class.
  09/29/16 BEH  102684  Added hold reserved temp table parameter to auto commit.
  12/21/16 WMB  103352  Swapped out calendar control.
  03/14/17 WMB  105519  Modified code to support placing shipment in a needs review state from POD
  03/29/17 WMB  105548  Modified code to support shipment refusal and detail messages in POD
  04/04/17 WMB  105577  Modified code to allow header review status to be displayed regardless of parameter settings if license to POD granted
                        Modified message given to user if shipment is set to hold from invoicing
  11/15/17 WMB  109267  Modified code to support font change
  12/12/17 WMB  109313  Added code to support new option to view images from POD
  12/15/17 SMB  109892  Added new input parameter to auto commit procedure to determine if commit quantities should be rounded up to a full piece if there is quantity
                        available to do so.
  12/26/17 WMB  109739  Modified code to support new field, driver
  01/09/18 WMB  110059  Modified existing input parameter to existing call to luser-ct.w
  02/23/18 SMB  110795  Fixed so window entry isn't applied in the middle of shutdown logic.
  04/03/18 SPB  110985  Added parameter to woautocompl to determine if we need to auto commit commit all items.
  04/26/18 WMB  111195  Modified code to handle over payments with rewards
  10/15/18 WMB  114311  Replaced reference to param_systm with param_mobileapps
  10/29/18 BKK  114408  Removed use of prmin files
  11/05/18 JMM  114409  Replace getvalue2.p with query.
  02/08/19 WMB  115301  Added new input parameter to existing call to recost.p
  04/24/19 WMB  116599  Added missing entries inside get_screen_value
  06/07/19 SPB  116857  Added logic to remove on hold qty before committing.
  07/19/19 SPB  117770  Added input to calcchgcst for recalculating tax cost in tax interface branch.
  08/09/19 WMB  117918  Make other charge/cost display formats consistent
  09/25/19 WMB  117988  Added code to support tracking shipment changes(Add/Delete/Qty Updates/Price Updates)
  09/26/19 JJF  114292  Added new editable field for the pro number which is on the shipments_header record
  10/25/19 SMB  119144  Removed use of flag is what.
  10/25/19 SPB  119077  Modified code to not allow re-use of a detail window for a different tran if there are pending changes.
  04/13/20 WMB  119597  Modified code to support increasing tran ID from 8 digits to 10
  05/06/20 WMB  120916  Modified code to support adjusting transaction numbers to 10 digits
  05/14/20 SPB  112403  Added logic to allow cancel staging from so entry.
  06/16/20 WMB  108806  Modified code to support new active flag on delv_route
  10/01/20 WMB  123336  Modified code to run recost on the appserver during initial display of shipment
  10/05/20 DJH  123333  Added parameters to loadhist.p
  10/15/20 CRL  123337  Added parameters to cancelso.p
  06/22/21 JRQ  126787  Added persitent default detail group id
  08/02/21 KAE  127428  Added new parameters to cancel sales order
  08/12/21 JRQ  127712  Added support for defaulting shipping group ID
  10/06/21 KAE  128390  Added code to factor currency into gross margin calculations
  04/14/22 SMB  131308  Added new input parameters to select location window for consignment SO values.
  05/04/22 SPB  131157  Fixed queries to handle 12.5 upgrade.
  06/16/22 SPB  130760  Added inputs to expect date validation routine for printed work orders.
  01/24/23 SMB  135439  Added ability to get state, zip, and country values. 
  02/27/23 KAE  135708  Implemented org security
  03/10/23 BEH  134837  Added tran type to pick queries.
  06/20/23 KAE  138136  Removed old security comments
  10/10/23 KAE  139712  Added inputs to support view only
  11/08/23 NAD  140069  Added input to shipddsp.w for view only
*/
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE modify-temp wn-ship_details
PROCEDURE modify-temp :
/* -----------------------------------------------------------
  Purpose:  Open query associated with shipments/item_reserved browser
  Parameters:  <none>
  Notes:  If you modify this open query statement then you need to make
          the corresponding changes to the code in bt-all.
-------------------------------------------------------------*/
DEFINE INPUT PARAMETER ip-rec            AS RECID                    NO-UNDO.
DEFINE INPUT PARAMETER iplReadReserved   AS LOGICAL                  NO-UNDO.

DEFINE VARIABLE        l-qty             LIKE shipments_detail.qty   NO-UNDO INIT 0.

DEFINE VARIABLE        l-loccode         LIKE param_item.loccode     NO-UNDO.
DEFINE VARIABLE        l-lotcode         LIKE param_item.lotcode     NO-UNDO.
DEFINE VARIABLE        l-tagcode         LIKE param_item.tagcode     NO-UNDO.
DEFINE VARIABLE        l-contentcode     LIKE param_item.contentcode NO-UNDO.
DEFINE VARIABLE        l-costcode        LIKE param_item.costcode    NO-UNDO.
DEFINE VARIABLE        l-error-message   AS   CHARACTER              NO-UNDO.
DEFINE VARIABLE        l-cost            AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        l-ext_price       AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        l-save-adf        AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        l-tally-found     AS   LOGICAL                NO-UNDO.
DEFINE VARIABLE        l-track-item      LIKE ITEM.item_ptr          NO-UNDO.

DEFINE VARIABLE        lLumberItem       AS   LOGICAL                NO-UNDO.
DEFINE VARIABLE        iDummy            AS   INTEGER                NO-UNDO.
DEFINE VARIABLE        dTotQty           AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        dAvgPrice         AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        dExtPrice         AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        dRemainExtPrice   AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        cDimension        AS   CHARACTER              NO-UNDO.
DEFINE VARIABLE        lDiffPrice        AS   LOGICAL                NO-UNDO.
DEFINE VARIABLE        cErrorMsg         AS   CHARACTER              NO-UNDO.
DEFINE VARIABLE        lTallyQtyDefined  AS   LOGICAL                NO-UNDO.
DEFINE VARIABLE        dAccumExtPrice    AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        lFullTree         AS   LOGICAL                NO-UNDO.
DEFINE VARIABLE        dDummy            AS   DECIMAL                NO-UNDO.
DEFINE VARIABLE        dSuppRebate          AS   DECIMAL             NO-UNDO.
DEFINE VARIABLE        lOverrideSuppRebate  AS   LOGICAL             NO-UNDO.

DEFINE BUFFER          bl-so_detail      FOR  so_detail.
DEFINE BUFFER          bl-item_tally     FOR  item_tally.
DEFINE BUFFER          temp-ship-details FOR  temp-ship-details.


  DO WITH FRAME {&FRAME-NAME}:

    /* get the temp-ship-details record whose RECID is passed in */
    FIND FIRST temp-ship-details WHERE
               RECID(temp-ship-details) = ip-rec
               EXCLUSIVE-LOCK NO-ERROR.

    /* get all the item reserved and item records associated with this shipments detail */
    IF AVAILABLE temp-ship-details THEN
    DO:
      ASSIGN
        l-need      = NO
        lLumberItem = {invitemtype.i &cItemType       = temp-ship-details.item_type
                                     &cProcessContext = "LumberItem" }.

      IF glAffectInv THEN
      DO:
        ASSIGN
          l-loccode     = temp-ship-details.lLocCode
          l-lotcode     = temp-ship-details.lLotCode
          l-tagcode     = temp-ship-details.lTagCode
          l-contentcode = temp-ship-details.lContentCode.

        IF NOT {invitemtype.i &cItemType       = temp-ship-details.item_type
                              &cProcessContext = "DNAI" } THEN
          RUN so/chkcmtonhand.p ON SERVER g-AppSrvr
            ( INPUT  temp-ship-details.so_id_sysid,
              INPUT  "SO",
              INPUT  temp-ship-details.so_id,
              INPUT  temp-ship-details.sequence,
              INPUT  temp-ship-details.ship-num,
              INPUT  0,
              INPUT  temp-ship-details.item_ptr_sysid,
              INPUT  temp-ship-details.item_ptr,
              INPUT  YES,
              INPUT  l-loccode,
              INPUT  l-lotcode,
              INPUT  l-tagcode,
              INPUT  l-contentcode,
              INPUT  "",
              INPUT  -1,
              INPUT  "",
              INPUT  "",
              INPUT  "",
              INPUT  0,
              INPUT  0,
              INPUT  0,
              INPUT  0,
              INPUT  0,
              OUTPUT l-need ).

        FOR EACH item_reserved WHERE
                 item_reserved.system_id      = gcCategoryList[{&item_reserved-sys-id}] AND
                 item_reserved.type           = "SO"                                    AND
                 item_reserved.tran_sysid     = temp-ship-details.so_id_sysid           AND
                 item_reserved.tran_id        = temp-ship-details.so_id                 AND
                 item_reserved.tran_seq       = temp-ship-details.sequence              AND
                 item_reserved.sub_id         = temp-ship-details.ship-num              AND
                 item_reserved.item_ptr       = temp-ship-details.item_ptr              AND
                 item_reserved.item_ptr_sysid = temp-ship-details.item_ptr_sysid
                 NO-LOCK:
          ASSIGN
            l-qty = l-qty + item_reserved.qty.
        END. /* for each item_reserved */

        IF temp-ship-details.type = "CM" AND
           iplReadReserved        = NO   AND
           l-qty                  = 0    THEN
        DO:
          ASSIGN
            l-qty = (temp-ship-details.qty * temp-ship-details.disp_qty_conv).

          IF l-qty <> 0 THEN
            ASSIGN
              l-need = YES.
        END. /* IF temp-ship-details.type = "CM" AND... */

        IF l-need                            = YES  AND
           temp-ship-details.type            = "CM" AND
           temp-ship-details.return_to_stock = NO   AND
           temp-ship-details.lDWLocCode      = NO   AND
           temp-ship-details.lDWLotCode      = NO   AND
           temp-ship-details.lDWDimension    = NO   AND
           temp-ship-details.lDWPcCnt        = NO   THEN
          ASSIGN
            l-need = NO.

        /* update the cost and g/m based on potentially new commit records */
        RUN get_new_cost
          ( OUTPUT l-cost ).

      END. /* IF glAffectInv THEN */
      ELSE
        ASSIGN
          l-qty  = (temp-ship-details.qty * temp-ship-details.disp_qty_conv)
          l-cost = temp-ship-details.cost.

      IF lLumberItem = YES THEN
      DO:
        RUN sotallylst.p
          ( INPUT  (IF glAffectInv = TRUE THEN "item_reserved,suggested_tally" ELSE "item_bo"),
            INPUT  TRUE,                       /* determines whether to include price in tally string */
            INPUT  YES,                        /* determines whether to return extended price */
            INPUT  YES,                        /* determines whether to return Qty table */
            INPUT  NO,                         /* determines whether to return String table */
            INPUT  "SO",                       /* Type of the transaction we're working with */
            INPUT  temp-ship-details.so_id_sysid,  /* system ID of the transaction we're working with */
            INPUT  temp-ship-details.so_id,        /* ID of the transaction we're working with */
            INPUT  temp-ship-details.sequence,     /* sequence of the transaction detail record we're working with */
            INPUT  temp-ship-details.ship-num,     /* shipment number for which to get tally information */
            INPUT  -1,
            INPUT  "",                         /* form for which the tally string is being prepared */
            INPUT  {getagilprop.i &PropList="'currentBranch'":U},
            OUTPUT dTotQty,                    /* total tally qty in the stocking UOM */
            OUTPUT dAvgPrice,                  /* average price */
            OUTPUT dExtPrice,                  /* extended price */
            OUTPUT dRemainExtPrice,            /* Remaining Extended Price */
            OUTPUT cDimension,                 /* Returns dimension if single dimension ordered */
            OUTPUT TABLE ttTallyString,        /* Tally string carried in ttTallyString.tallyString */
            OUTPUT lDiffPrice,                 /* Indicates if price is different by TxWxL */
            OUTPUT TABLE ttTallyQty,           /* Table carries qty and price by TxWxL */
            OUTPUT cErrorMsg ).                /* return any error messages to the calling program */

        FOR FIRST ttTallyQty NO-LOCK:
          ASSIGN lTallyQtyDefined = YES.
        END.
      END. /* IF lLumberItem = YES THEN */

      ASSIGN
        temp-ship-details.need-spec = l-need
        temp-ship-details.qty       = (l-qty / temp-ship-details.disp_qty_conv).

      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "SheetGoodOnly"} THEN
        RUN gettlyqty.p ON SERVER g-AppSrvr
          ( INPUT  {getagilprop.i &PropList="'currentBranch'":U},
            INPUT  temp-ship-details.type,
            INPUT  temp-ship-details.so_id_sysid,
            INPUT  temp-ship-details.so_id,
            INPUT  temp-ship-details.sequence,
            INPUT  temp-ship-details.ship-num,
            INPUT  l-qty,
            INPUT  temp-ship-details.cStockingUom,
            INPUT  temp-ship-details.tally_uom,
            INPUT  "From Stocking",
            OUTPUT temp-ship-details.dDisplayQty,
            OUTPUT dDummy,
            OUTPUT dDummy,
            OUTPUT dDummy ).
      ELSE
        temp-ship-details.dDisplayQty = temp-ship-details.qty.

      FIND FIRST tt-ship-details-original WHERE
                 tt-ship-details-original.rShipDetRecid = temp-ship-details.rec
                 EXCLUSIVE-LOCK NO-ERROR.

      IF AVAILABLE tt-ship-details-original THEN
        tt-ship-details-original.orig-stock-qty = (temp-ship-details.qty * temp-ship-details.disp_qty_conv).

      ASSIGN
        temp-ship-details.cost = l-cost.

      FOR FIRST bl-so_detail WHERE
                bl-so_detail.system_id = temp-ship-details.so_id_sysid AND
                bl-so_detail.so_id     = temp-ship-details.so_id AND
                bl-so_detail.sequence  = temp-ship-details.sequence
                NO-LOCK:

        RUN getsuppreb.p ON SERVER g-AppSrvr
          ( INPUT "SO",
            INPUT temp-ship-details.so_id_sysid,
            INPUT temp-ship-details.so_id,
            INPUT temp-ship-details.sequence,
            INPUT 0,
            OUTPUT dSuppRebate,
            OUTPUT lOverrideSuppRebate ).

        IF lLumberItem = YES AND lTallyQtyDefined = YES THEN
        DO:
          ASSIGN dAccumExtPrice = 0.

          /* calculating and accumulating extending price for each temp table record. Because we calculated
             total quantity above (l-qty) in stocking UOM technically we could use this value to calculate
             extended price rather than calculating using each temp-table record... However we need each
             individual price from the tally table so this is not feasible for lumber items.*/
          FOR EACH ttTallyQty NO-LOCK:
            RUN extprice.p
              ( INPUT  ttTallyQty.price,
                INPUT  bl-so_detail.disp_price_conv,
                INPUT  ttTallyQty.stocking-qty,
                INPUT  1,
                INPUT  bl-so_detail.discount_1,
                INPUT  bl-so_detail.discount_2,
                INPUT  bl-so_detail.discount_3,
                INPUT  bl-so_detail.extra_discount_1,
                INPUT  bl-so_detail.extra_discount_2,
                INPUT  bl-so_detail.extra_discount_3,
                OUTPUT l-ext_price ).

            ASSIGN
              dAccumExtPrice = dAccumExtPrice + l-ext_price.
          END.

          ASSIGN
            l-ext_price = dAccumExtPrice.
        END.
        ELSE
        DO:
          RUN extprice.p
            ( INPUT  bl-so_detail.price,
              INPUT  bl-so_detail.disp_price_conv,
              INPUT  temp-ship-details.qty,
              INPUT  temp-ship-details.disp_qty_conv,
              INPUT  bl-so_detail.discount_1,
              INPUT  bl-so_detail.discount_2,
              INPUT  bl-so_detail.discount_3,
              INPUT  bl-so_detail.extra_discount_1,
              INPUT  bl-so_detail.extra_discount_2,
              INPUT  bl-so_detail.extra_discount_3,
              OUTPUT l-ext_price ).
        END.

        ASSIGN
          temp-ship-details.ext_price    = l-ext_price
          temp-ship-details.price        = bl-so_detail.price
          temp-ship-details.supp_rebate  = dSuppRebate
          temp-ship-details.market_cost  = bl-so_detail.market_cost
          temp-ship-details.average_cost = bl-so_detail.cost.

      END. /* FOR FIRST bl-so_detail... */

    END. /* if available temp-ship-details */

    RUN CalcDetailChargesAndGM.

  END. /* do with frame */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE msg_attach wn-ship_details
PROCEDURE msg_attach :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/

  RUN UpdateMessagesInBrowser.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE open-query wn-ship_details
PROCEDURE open-query :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
  DEFINE VARIABLE dItemColWidth        AS  DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dMaxItemColWidth     AS  DECIMAL                  NO-UNDO.
  DEFINE VARIABLE dRvwColWidth         AS  DECIMAL                  NO-UNDO INIT 0.
  DEFINE VARIABLE dMaxRvwColWidth      AS  DECIMAL                  NO-UNDO INIT 17.
  DEFINE VARIABLE dAdjColWidth         AS  DECIMAL                  NO-UNDO INIT 0.
  DEFINE VARIABLE dMaxAdjColWidth      AS  DECIMAL                  NO-UNDO INIT 17.
  DEFINE VARIABLE lUpdate              AS  LOGICAL                  NO-UNDO INIT NO.
  DEFINE VARIABLE iAdd2Length          AS  INTEGER                  NO-UNDO INIT 1.

  DEFINE BUFFER   bl-temp-ship-details FOR temp-ship-details.


  FOR EACH bl-temp-ship-details NO-LOCK:

    ASSIGN
      dItemColWidth = FONT-TABLE:GET-TEXT-WIDTH-CHARS(TRIM(bl-temp-ship-details.item),temp-ship-details.item:FONT IN BROWSE {&BROWSE-NAME}) + iAdd2Length.

    IF dItemColWidth > dMaxItemColWidth THEN
      ASSIGN
        dMaxItemColWidth = dItemColWidth
        lUpdate          = YES.

    ASSIGN
      dAdjColWidth = FONT-TABLE:GET-TEXT-WIDTH-CHARS(TRIM(bl-temp-ship-details.pod_qty_adjustments),temp-ship-details.pod_qty_adjustments:FONT IN BROWSE {&BROWSE-NAME}) + iAdd2Length.

    IF dAdjColWidth > dMaxAdjColWidth THEN
      ASSIGN
        dMaxAdjColWidth = dAdjColWidth
        lUpdate         = YES.

    ASSIGN
      dRvwColWidth = FONT-TABLE:GET-TEXT-WIDTH-CHARS(TRIM(bl-temp-ship-details.review_status),temp-ship-details.review_status:FONT IN BROWSE {&BROWSE-NAME}) + iAdd2Length.

    IF dRvwColWidth > dMaxRvwColWidth THEN
      ASSIGN
        dMaxRvwColWidth = dRvwColWidth
        lUpdate         = YES.

  END.

  ASSIGN
    temp-ship-details.review_status      :WIDTH IN BROWSE br-shipdetails = dMaxRvwColWidth
    temp-ship-details.pod_qty_adjustments:WIDTH IN BROWSE br-shipdetails = dMaxAdjColWidth.

  IF lUpdate THEN
    ASSIGN
      temp-ship-details.item:WIDTH IN BROWSE br-shipdetails = dMaxItemColWidth.

  OPEN QUERY br-shipdetails
    FOR EACH temp-ship-details
             NO-LOCK
             BY temp-ship-details.disp_seq.

  GET FIRST br-shipdetails.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE pos_tally_calc_bt wn-ship_details
PROCEDURE pos_tally_calc_bt :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
DEFINE VARIABLE l-widget_hdl AS WIDGET-HANDLE NO-UNDO.
DEFINE VARIABLE l-width      AS INTEGER       NO-UNDO.

/* handle of location cell in browser */
  DO WITH FRAME {&FRAME-NAME}:

    ASSIGN l-widget_hdl               = temp-ship-details.dDisplayQty:HANDLE IN BROWSE br-shipdetails
           l-width                    = br-shipdetails:WIDTH-PIXELS
           bt-tallycalc:HEIGHT-PIXELS = temp-ship-details.dDisplayQty:HEIGHT-PIXELS - 2.

    ASSIGN bt-tallycalc:VISIBLE   = TRUE
           bt-tallycalc:SENSITIVE = TRUE.

    IF l-widget_hdl:X < 0 OR l-widget_hdl:X > l-width THEN
    DO:
      ASSIGN bt-tallycalc:VISIBLE   = FALSE
             bt-tallycalc:SENSITIVE = FALSE.
      RETURN.
    END.
    ELSE
    DO:
      ASSIGN bt-tallycalc:X = l-widget_hdl:X  + br-shipdetails:X NO-ERROR.
      IF ERROR-STATUS:ERROR THEN
      DO:
      ASSIGN bt-tallycalc:VISIBLE   = FALSE
             bt-tallycalc:SENSITIVE = FALSE.
        RETURN.
      END.
    END.
    IF l-widget_hdl:Y < 0 THEN
    DO:
      ASSIGN bt-tallycalc:VISIBLE   = FALSE
             bt-tallycalc:SENSITIVE = FALSE.
        RETURN.
    END.
    ELSE
    DO:
        ASSIGN bt-tallycalc:Y = l-widget_hdl:Y + br-shipdetails:Y + 1 NO-ERROR.
        IF ERROR-STATUS:ERROR THEN
        DO:
          ASSIGN bt-tallycalc:VISIBLE   = FALSE
                 bt-tallycalc:SENSITIVE = FALSE.
          RETURN.
        END.
    END.
  END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE printOptions wn-ship_details
PROCEDURE printOptions :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER ipcAction AS CHARACTER NO-UNDO INIT "".
  DEFINE OUTPUT PARAMETER oplCancel AS LOGICAL   NO-UNDO INIT NO.


  {waiton.i}

  /* This include brings the pick criteria/printer option window */
  {printeropt.i}

  {waitoff.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ProcessPodAccept wn-ship_details
PROCEDURE ProcessPodAccept :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplFound AS LOGICAL NO-UNDO.

  DEFINE VARIABLE rNextRowRecid        AS RECID       NO-UNDO.
  DEFINE VARIABLE lLastRow             AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE rCurrentRecid        AS RECID       NO-UNDO.

  DEFINE VARIABLE dFactor              AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dAdjQty              AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE cErrorMsg            AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE cTallyMsg            AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE dTallyQty            AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dTallyConv           AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE cTallyUom            AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE cTallyUomSysid       AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE iTallyUomPtr         AS INTEGER     NO-UNDO.

  DEFINE VARIABLE iAdjRow              AS INTEGER     NO-UNDO.
  DEFINE VARIABLE dAdjThickness        AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dAdjWidth            AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dAdjLength           AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE iAdjPieceCount       AS INTEGER     NO-UNDO.

  DEFINE BUFFER   bfTempShip           FOR temp-ship-details.


  FIND FIRST ttprocessshipments_detail_adj EXCLUSIVE-LOCK NO-ERROR.

  IF AVAILABLE ttprocessshipments_detail_adj THEN
  DO:
    {waiton.i}

    FIND FIRST temp-ship-details WHERE
               temp-ship-details.sequence = ttprocessshipments_detail_adj.tran_seq
               NO-LOCK NO-ERROR.

    IF NOT AVAILABLE temp-ship-details THEN
    DO:
      DELETE ttprocessshipments_detail_adj.

      RUN ProcessPodAccept
        ( OUTPUT oplFound ).

      RETURN.
    END.

    ASSIGN
      oplFound = YES.

    ASSIGN
      dAdjQty = ttprocessshipments_detail_adj.qty.

    IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                      &cProcessContext = "TallyCalc" } THEN
    DO:
      RUN GetTally /*in explship.i*/
        ( INPUT  temp-ship-details.so_id_sysid,  /*tran_sysid  */
          INPUT  temp-ship-details.so_id,        /*tran_id     */
          INPUT  temp-ship-details.sequence,     /*tran_seq    */
          INPUT  temp-ship-details.ship-num,     /*shipment num*/
          INPUT  YES,                            /*requires BF qty ?*/
          OUTPUT cTallyMsg,                     /*tally string*/
          OUTPUT dTallyQty ).                  /*tally quantity*/

      ASSIGN
        cTallyUom  = temp-ship-details.tally_calc_uom
        dTallyConv = ?.

      IF  temp-ship-details.cStockingUom = cTallyUom THEN
      DO:
        ASSIGN
          dTallyConv = 1.
      END.
      ELSE
        RUN FindUomBasedOnCodeNFactor
          ( INPUT        YES,
            INPUT        temp-ship-details.item_ptr_sysid,
            INPUT        temp-ship-details.item_ptr,
            INPUT        temp-ship-details.cStockingUom,
            INPUT-OUTPUT dTallyConv,
            INPUT-OUTPUT cTallyUom,
                  OUTPUT cTallyUomSysid,
                  OUTPUT iTallyUomPtr ).

      ASSIGN
        dAdjQty = dAdjQty / dTallyConv.
    END.
    ELSE
      IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                        &cProcessContext = "LumberItem" } THEN
      DO:
        ASSIGN
          dFactor = ?.

        RUN p_convertqty
          ( INPUT        gcCategoryList[{&item_uomconv-sys-id}],
            INPUT        gcCategoryList[{&item_supplier-sys-id}],
            INPUT        temp-ship-details.item_type,
            INPUT        temp-ship-details.item_ptr_sysid,
            INPUT        temp-ship-details.item_ptr,
            INPUT        temp-ship-details.item,
            INPUT        temp-ship-details.cStockingUom,
            INPUT        temp-ship-details.cPieceRef,
            INPUT        temp-ship-details.cStockToPCCalc,
            INPUT        ttprocessshipments_detail_adj.thickness,
            INPUT        temp-ship-details.cThicknessUOM,
            INPUT        ttprocessshipments_detail_adj.width,
            INPUT        temp-ship-details.cWidthUOM,
            INPUT        ttprocessshipments_detail_adj.length,
            INPUT        temp-ship-details.cLengthUOM,
            INPUT        dAdjQty,
            INPUT        temp-ship-details.cStockingUom,
            INPUT        temp-ship-details.tally_uom,
            INPUT        ttprocessshipments_detail_adj.piece_count,
            INPUT        temp-ship-details.tally_uom-sysid,
            INPUT        temp-ship-details.tally_uom_ptr,
            INPUT        "From Stocking",
            INPUT-OUTPUT dFactor,
                  OUTPUT dAdjQty,
                  OUTPUT cErrorMsg ).
      END.
      ELSE
      DO:
        ASSIGN
          dAdjQty = dAdjQty / temp-ship-details.disp_qty_conv.
      END.

    ASSIGN
      gcPodAdjustmentGUID   = ttprocessshipments_detail_adj.shipments_detail_adj_guid
      glByPassEntryTrigger2 = YES
      rCurrentRecid         = temp-ship-details.rec.

    /* if we only have 1 rec, then no need setting next row */
    IF NUM-RESULTS("br-shipdetails") < 2 THEN
      rNextRowRecid = ?.
    ELSE
    DO:
      /* set up the next row to display here before we process anything */
      FIND bfTempShip WHERE
           bfTempShip.rec = rCurrentRecid NO-LOCK NO-ERROR.

      FIND NEXT bfTempShip NO-LOCK NO-ERROR.

      /* if we find the next rec, then assign it */
      IF AVAILABLE bfTempShip THEN
        rNextRowRecid = bfTempShip.rec.
      ELSE
        /* but if it wasn't found, it means the rec was for the last row so let's set the last flag to true */
        ASSIGN
          rNextRowRecid = rCurrentRecid
          lLastRow      = TRUE.
    END.

    ASSIGN
      iAdjRow        = ttprocessshipments_detail_adj.iRow
      dAdjThickness  = ttprocessshipments_detail_adj.thickness
      dAdjWidth      = ttprocessshipments_detail_adj.width
      dAdjLength     = ttprocessshipments_detail_adj.length
      iAdjPieceCount = ttprocessshipments_detail_adj.piece_count.

    DELETE ttprocessshipments_detail_adj.

    /*DO NOT run on appserver as this displays windows/messages*/
    RUN so/sishipdetailupd.p PERSISTENT
      ( INPUT gscSessionContextID,
        INPUT CURRENT-WINDOW,
        INPUT THIS-PROCEDURE,
        INPUT ?,
        INPUT "POD_explship",
        INPUT YES, /*Allow UI*/
        INPUT temp-ship-details.so_id_sysid,
        INPUT temp-ship-details.so_id,
        INPUT temp-ship-details.sequence,
        INPUT temp-ship-details.ship-num,
        INPUT dTallyQty,
        INPUT temp-ship-details.dDisplayQty,
        INPUT dAdjQty,
        INPUT 0, /*WMS Seq*/
        INPUT rCurrentRecid,
        INPUT rNextRowRecid,
        INPUT iAdjRow,
        INPUT lLastRow,
        INPUT cTallyMsg,
        INPUT dAdjThickness,   /*Thickness */
        INPUT dAdjWidth,       /*Width     */
        INPUT dAdjLength,      /*Length    */
        INPUT iAdjPieceCount,  /*PieceCount*/
        INPUT DATASET dsOrigDetailTallyDummy,
        INPUT DATASET dsTempShipDet ).

    /* make sure the current record stays in scope, to let the leave trigger
       finish without errors */
    FIND FIRST temp-ship-details WHERE
               temp-ship-details.rec = rCurrentRecid
               NO-LOCK NO-ERROR.

  END. /* IF AVAILABLE ttprocessshipments_detail_adj THEN */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE RefreshLineUpdate wn-ship_details
PROCEDURE RefreshLineUpdate:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/

  DEFINE VARIABLE dDisplayPrice       AS DECIMAL    NO-UNDO.
  DEFINE VARIABLE cPriceUOM           AS CHARACTER  NO-UNDO.
  DEFINE VARIABLE dExtendedPrice      AS DECIMAL    NO-UNDO.
  
  goSODetailPresenter:GetDetailFields
    ( OUTPUT dDisplayPrice,
      OUTPUT cPriceUOM,
      OUTPUT dExtendedPrice ).
  
  /* TODO - change to fill ins, buttons, combo box etc. in line edit section */
  ASSIGN 
    temp-ship-details.price      = dDisplayPrice
    temp-ship-details.price-uom  = cPriceUOM
    temp-ship-details.ext_price  = dExtendedPrice.
     
  DO WITH FRAME {&FRAME-NAME}:
    RUN open-query.
  END.
  
  EMPTY TEMP-TABLE ttErrorMsg.

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ResizeWindow wn-ship_details
PROCEDURE ResizeWindow :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DO WITH FRAME {&FRAME-NAME}:

  DEFINE VARIABLE dFrameHeight AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dFrameWidth  AS DECIMAL     NO-UNDO.

  ASSIGN
    FRAME {&FRAME-NAME}:HIDDEN = YES.

  ASSIGN
    dFrameHeight = FRAME {&FRAME-NAME}:HEIGHT
    dFrameWidth  = FRAME {&FRAME-NAME}:WIDTH.

  /* for some reason this has to be done on a separate assign block
     or else the OCX will not resize properly */
  ASSIGN
    FRAME {&FRAME-NAME}:WIDTH          = {&WINDOW-NAME}:WIDTH
    FRAME {&FRAME-NAME}:VIRTUAL-WIDTH  = {&WINDOW-NAME}:WIDTH
    br-shipdetails     :WIDTH          = br-shipdetails  :WIDTH   + FRAME {&FRAME-NAME}:WIDTH - dFrameWidth
    NO-ERROR.

  ASSIGN
    FRAME {&FRAME-NAME}:HEIGHT         = {&WINDOW-NAME}:HEIGHT
    FRAME {&FRAME-NAME}:VIRTUAL-HEIGHT = {&WINDOW-NAME}:HEIGHT
    br-shipdetails     :HEIGHT         = br-shipdetails  :HEIGHT + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    bt-prev            :ROW            = bt-prev         :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    bt-next            :ROW            = bt-next         :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    cbStatus           :ROW            = cbStatus        :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    fiStatusLabel      :ROW            = fiStatusLabel   :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    fiStatusText       :ROW            = fiStatusText    :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    RECT-82            :ROW            = RECT-82         :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    tbPrintDelvTick    :ROW            = tbPrintDelvTick :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    cbInvoiceYear      :ROW            = cbInvoiceYear   :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    fiInvPeriodText    :ROW            = fiInvPeriodText :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    cbInvoicePeriod    :ROW            = cbInvoicePeriod :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    fiInvoiceDateLabel :ROW            = fiInvoiceDateLabel:ROW  + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    fiInvoiceDate      :ROW            = fiInvoiceDate   :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    RECT-54            :ROW            = RECT-54         :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    btCalendarInvDt    :ROW            = btCalendarInvDt :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    btDefault          :ROW            = btDefault       :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight
    btUpdateStatus     :ROW            = btUpdateStatus  :ROW    + FRAME {&FRAME-NAME}:HEIGHT - dFrameHeight

    NO-ERROR.

  ASSIGN
    FRAME {&FRAME-NAME}:HIDDEN = NO.

  RUN SaveWindowSize
    ( INPUT "Staging Details",
      INPUT "",
      INPUT "",
      INPUT "",
      INPUT {&WINDOW-NAME} ).
END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE return-order-num wn-ship_details
PROCEDURE return-order-num :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE OUTPUT PARAMETER op-order-num   AS   INTEGER                 NO-UNDO.
DO WITH FRAME {&FRAME-NAME}:
    ASSIGN op-order-num = INTEGER(fi-soid:SCREEN-VALUE).
END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ReturnFocus wn-ship_details
PROCEDURE ReturnFocus :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ipcWhereFrom  AS CHARACTER   NO-UNDO.
DEFINE INPUT  PARAMETER iplCancel     AS LOGICAL     NO-UNDO.
DEFINE INPUT  PARAMETER iplDelHighLvl AS LOGICAL     NO-UNDO.
DEFINE INPUT  PARAMETER TABLE FOR ttTags.

CURRENT-WINDOW = {&WINDOW-NAME}.
CURRENT-WINDOW:SENSITIVE = YES.
APPLY "ENTRY" TO CURRENT-WINDOW.

IF iplCancel = YES THEN
  RETURN.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ReturnFromOrdChrgCstDtl wn-ship_details
PROCEDURE ReturnFromOrdChrgCstDtl :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE VARIABLE lContinue    AS LOGICAL     NO-UNDO INIT FALSE.

  RUN UpdateTotal /*in explshipi.i*/
    ( INPUT  gcSOSysid,
      INPUT  giSOID,
      INPUT  giShipNum,
      INPUT  gcSaleType,
      INPUT  gcShipVia,
      INPUT  gcTaxCode,
      INPUT  NO,
      INPUT  YES, /*allow UI*/
      INPUT  "explship",
      OUTPUT lContinue ).

  CURRENT-WINDOW           = {&WINDOW-NAME}.
  CURRENT-WINDOW:SENSITIVE = YES.

  APPLY "ENTRY" TO CURRENT-WINDOW.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE returnfromsishipdetailupd wn-ship_details
PROCEDURE returnfromsishipdetailupd :
/* -----------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
-------------------------------------------------------------*/
DEFINE INPUT PARAMETER iprCurrentRecid          AS  RECID      NO-UNDO.
DEFINE INPUT PARAMETER iprNextRowRecid          AS  RECID      NO-UNDO.
DEFINE INPUT PARAMETER ipiRow                   AS  INTEGER    NO-UNDO.
DEFINE INPUT PARAMETER iplLastRow               AS  LOGICAL    NO-UNDO.
DEFINE INPUT PARAMETER ipcTallyMsg              AS  CHARACTER  NO-UNDO.
DEFINE INPUT PARAMETER ipdNewQty                AS  DECIMAL    NO-UNDO.
DEFINE INPUT PARAMETER iplCompleted             AS  LOGICAL    NO-UNDO.
DEFINE INPUT PARAMETER DATASET                  FOR dsTempShipDet.
DEFINE INPUT PARAMETER DATASET                  FOR dsErrorMsg.

DEFINE VARIABLE lContinue                       AS LOGICAL     NO-UNDO.
DEFINE VARIABLE dDummy                          AS DECIMAL     NO-UNDO.
DEFINE VARIABLE cNextStep                       AS CHARACTER   NO-UNDO.
DEFINE VARIABLE lFound                          AS LOGICAL     NO-UNDO.
DEFINE VARIABLE cItemSysid                      AS CHARACTER   NO-UNDO.
DEFINE VARIABLE iItemPtr                        AS INTEGER     NO-UNDO.
DEFINE VARIABLE rRecid                          AS RECID       NO-UNDO.
DEFINE VARIABLE cHdrRvwStatus                   AS CHARACTER   NO-UNDO.
DEFINE VARIABLE cOrigTallyMsg                   AS CHARACTER   NO-UNDO.
DEFINE VARIABLE dOrigQty                        AS DECIMAL     NO-UNDO.
DEFINE VARIABLE lForceAutoHndl                  AS LOGICAL     NO-UNDO.

DEFINE BUFFER   bl-temp-ship-details FOR temp-ship-details.
DEFINE BUFFER   bfTempShip           FOR temp-ship-details.

DO WITH FRAME frExplShip:

  FIND FIRST temp-ship-details WHERE
             temp-ship-details.rec = iprCurrentRecid
             NO-LOCK NO-ERROR.

  ASSIGN
    lForceAutoHndl = glForceAutoHndl
    cOrigTallyMsg  = gcTallyMsg
    dOrigQty       = temp-ship-details.qty.

  ASSIGN
    gcTallyMsg            = ipcTallyMsg
    glForceAutoHndl       = NO
    glByPassEntryTrigger2 = NO.

  {waitoff.i}

  IF iplCompleted THEN
  DO:
    IF glSaveLineUpdateChanges THEN 
    DO:
      RUN SaveSODetail
        ( INPUT gcNextSaveStep,
         OUTPUT cNextStep,
         OUTPUT lContinue ).    
             
      ASSIGN 
        glSaveLineUpdateChanges = FALSE
        gcNextSaveStep          = "".
    END.
      
    RUN sostat.p ON SERVER g-AppSrvr
      (INPUT  temp-ship-details.so_id_sysid,
       INPUT  temp-ship-details.so_id,
       INPUT  ?,
       OUTPUT gcSOHeaderStatus,
       OUTPUT gcDummy,
       OUTPUT gcDummy /*Overpayment error message - not used here*/ ).

     /* The user may have changed the actual commits so we should just change the
        qty to whatever was committed -- all warnings take place in qty_change
        so we don't need to inform the user if this qty is different. */
    ASSIGN
      l-need                                     = NO
      l-prev-ptr                                 = ?
      l-comitree-called                          = NO
      temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING(ipdNewQty)
      gdDetailTallyQty                           = ipdNewQty.

    ASSIGN INPUT BROWSE br-shipdetails temp-ship-details.dDisplayQty.

    IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                      &cProcessContext = "SheetGoodOnly"} THEN
      RUN gettlyqty.p ON SERVER g-AppSrvr
        ( INPUT  {getagilprop.i &PropList="'currentBranch'":U},
          INPUT  temp-ship-details.type,
          INPUT  temp-ship-details.so_id_sysid,
          INPUT  temp-ship-details.so_id,
          INPUT  temp-ship-details.sequence,
          INPUT  temp-ship-details.ship-num,
          INPUT  ipdNewQty,
          INPUT  temp-ship-details.tally_uom,
          INPUT  temp-ship-details.uom,
          INPUT  "To Stocking",
          OUTPUT temp-ship-details.qty,
          OUTPUT dDummy,
          OUTPUT dDummy,
          OUTPUT dDummy ).
    ELSE
      temp-ship-details.qty = ipdNewQty.

    {waiton.i}

    IF TRIM(gcPodAdjustmentGUID) = "" THEN
    DO:
      IF cOrigTallyMsg  <> gcTallyMsg            OR
         dOrigQty       <> temp-ship-details.qty OR
         lForceAutoHndl  = YES                   THEN
        RUN so/podautohndldriverchgs.p ON SERVER g-Appsrvr
          ( INPUT  temp-ship-details.so_id_sysid,
            INPUT  temp-ship-details.so_id,
            INPUT  temp-ship-details.sequence,
            INPUT  temp-ship-details.ship-num,
            OUTPUT cHdrRvwStatus ).
    END. /* IF TRIM(gcPodAdjustmentGUID) = "" THEN */
    ELSE
    DO:
      RUN so/podacceptdriverchgs.p ON SERVER g-Appsrvr
        ( INPUT  "Update",
          INPUT  "",
          INPUT  0,
          INPUT  0,
          INPUT  0,
          INPUT  gcPodAdjustmentGUID,
          OUTPUT TABLE ttemptyshipments_detail_adj,
          OUTPUT cHdrRvwStatus ).
    END. /* IF TRIM(gcPodAdjustmentGUID) = "" THEN...ELSE */

    IF cHdrRvwStatus = "Reviewed" THEN
      ASSIGN
        fiReviewStatus:SCREEN-VALUE = cHdrRvwStatus
        tbHold        :CHECKED      = NO
        tbHold        :SENSITIVE    = glHoldAllowed
        glOrigHold                  = NO.

    ASSIGN
      gcPodAdjustmentGUID = "".

    ASSIGN
      cItemSysid = temp-ship-details.item_ptr_sysid
      iItemPtr   = temp-ship-details.item_ptr
      rRecid     = temp-ship-details.rec.

    RUN so/shipdetailbuildtemp.p ON SERVER g-Appsrvr
      (INPUT gscSessionContextID,
       INPUT temp-ship-details.so_id_sysid,
       INPUT temp-ship-details.so_id,
       INPUT temp-ship-details.sequence, /*tran seq (-1 returns all)*/
       INPUT temp-ship-details.ship-num,
       INPUT tbDispAllocChgCost:CHECKED,
       INPUT cbDisplayUOM:SCREEN-VALUE,
       INPUT "Staging Details",
       INPUT gcSaleTypeSysid,
       INPUT gcSaleType,
       INPUT-OUTPUT DATASET dsTempShipDet).

    /* See if commit changes affected any other details with same item */
    FOR EACH bl-temp-ship-details WHERE
             bl-temp-ship-details.item_ptr_sysid  = cItemSysid AND
             bl-temp-ship-details.item_ptr        = iItemPtr   AND
             bl-temp-ship-details.rec            <> rRecid
             NO-LOCK:
      RUN modify-temp
        ( INPUT RECID(bl-temp-ship-details),
          INPUT NO ).
    END.

    {waitoff.i}

    RUN ProcessPodAccept
      ( OUTPUT lFound ).

    IF lFound = NO THEN
    DO:
      RUN open-query.

      IF CAN-FIND( FIRST ttTrackSelected NO-LOCK ) THEN
        RUN SetSelectedRows.
      ELSE
      DO:
        IF NUM-RESULTS("br-shipdetails") > 0 THEN
        DO:
          IF br-shipdetails:DESELECT-ROWS() THEN.

          FIND FIRST bfTempShip WHERE
                     bfTempShip.rec = iprNextRowRecid
                     NO-LOCK NO-ERROR.

          IF AVAILABLE bfTempShip THEN
          DO:
            IF iplLastRow = NO THEN
              ipiRow = ipiRow + 1.

            br-shipdetails:SET-REPOSITIONED-ROW(ipiRow, "ALWAYS") IN FRAME {&FRAME-NAME}.
            REPOSITION br-shipdetails TO ROWID ROWID(bfTempShip).
            IF br-shipdetails:SELECT-FOCUSED-ROW() THEN.
          END.

          APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
          APPLY "ROW-ENTRY" TO br-shipdetails.
        END.
      END. /* IF CAN-FIND( FIRST ttTrackSelected NO-LOCK ) THEN...ELSE */

    END.  /* IF lFound = NO THEN */

    RETURN NO-APPLY.
  END.
  ELSE
  DO:
    IF glSaveLineUpdateChanges THEN 
    DO:
      goSODetailPresenter:ProcessOrigTables( INPUT "DUMP" ).
      
      ASSIGN 
        glSaveLineUpdateChanges = FALSE
        gcNextSaveStep            = "".
    END.
    
    IF TRIM(gcPodAdjustmentGUID) = "" THEN
    DO:
      ASSIGN
        temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails = STRING(gdDetailTallyQty)
        temp-ship-details.dDisplayQty              = gdDetailTallyQty
        temp-ship-details.qty                      = g-detail_qty.

      RUN xdelete_new_tally
        ( INPUT  "SO",
          INPUT  temp-ship-details.so_id_sysid,
          INPUT  temp-ship-details.so_id,
          INPUT  temp-ship-details.sequence,
          INPUT  g-orig_tallymsg,
          INPUT  temp-ship-details.ship-num ).
    END.
    ELSE
      ASSIGN
        gcPodAdjustmentGUID = "".

    IF NUM-RESULTS("br-shipdetails") > 0 THEN
    DO:
      RUN open-query.

      FIND FIRST bfTempShip WHERE
                 bfTempShip.rec = iprCurrentRecid
                 NO-LOCK NO-ERROR.

      IF AVAILABLE bfTempShip THEN
      DO:
        br-shipdetails:SET-REPOSITIONED-ROW(ipiRow, "ALWAYS") IN FRAME {&FRAME-NAME}.
        REPOSITION br-shipdetails TO ROWID ROWID(bfTempShip).
        IF br-shipdetails:SELECT-FOCUSED-ROW() THEN.
      END.

      APPLY "ENTRY" TO temp-ship-details.dDisplayQty IN BROWSE br-shipdetails.
      APPLY "ROW-ENTRY" TO br-shipdetails.
    END.

    EMPTY TEMP-TABLE ttprocessshipments_detail_adj.

    RETURN NO-APPLY.
  END.

END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ReturnFromUsodetal wn-ship_details
PROCEDURE ReturnFromUsodetal :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipiTranSeq AS INTEGER NO-UNDO.

  DEFINE VARIABLE cMessage             AS  CHARACTER            NO-UNDO.

  DEFINE BUFFER   bl-temp-ship-details FOR temp-ship-details.


  DO WITH FRAME {&FRAME-NAME}:

    CURRENT-WINDOW           = {&WINDOW-NAME}.
    CURRENT-WINDOW:SENSITIVE = YES.

    APPLY "ENTRY" TO CURRENT-WINDOW.

    IF {&WINDOW-NAME}:MOVE-TO-TOP() THEN.

    DELETE PROCEDURE ghLinentryProc NO-ERROR.

    ASSIGN
      ghLinentryProc = ?
      glEnabled      = YES.

    IF ipiTranSeq <= 0 OR
       ipiTranSeq  = ? THEN
      RETURN.

    RUN build_screen
      ( INPUT ip-shiphead_rec,
        INPUT g-calling_module,
        INPUT g-context ).

    FOR FIRST bl-temp-ship-details WHERE
              bl-temp-ship-details.sequence    = ipiTranSeq                        AND
              bl-temp-ship-details.ship-num    = INTEGER(fi-ship_num:SCREEN-VALUE) AND
              bl-temp-ship-details.so_id       = giSOID                            AND
              bl-temp-ship-details.so_id_sysid = gcCategoryList[{&so_header-sys-id}]
              NO-LOCK:
      IF br-shipdetails:DESELECT-ROWS() THEN.
      REPOSITION br-shipdetails TO ROWID ROWID(bl-temp-ship-details).
      br-shipdetails:SELECT-FOCUSED-ROW().

      APPLY "ROW-ENTRY":U TO br-shipdetails.

      APPLY "ENTRY":U TO temp-ship-details.dDisplayQty IN BROWSE {&BROWSE-NAME}.
    END.

    RUN calcchgcst.p
      ( INPUT "ProcessSingleShipment",
        INPUT gcCategoryList[{&so_header-sys-id}],
        INPUT giSOID,
        INPUT "SO",
        INPUT INTEGER(fi-ship_num:SCREEN-VALUE),
        INPUT gcTaxCode,
        INPUT gcSaleType,
        INPUT gcShipVia,
        INPUT "",
        INPUT "",
        INPUT NO,
        INPUT NO /*iplRecalcTCTaxInterface*/ ).

    RUN ClearttCreditCheck. /* ttcreditcheck.i */

    RUN shiptotal.p ON SERVER g-AppSrvr
      ( INPUT        giSOID,
        INPUT        gcCategoryList[{&so_header-sys-id}],
        INPUT        INTEGER(fi-ship_num:SCREEN-VALUE),
        INPUT        ?,
        INPUT        YES,
        INPUT        NO,  /* run cr Check */
        INPUT        NO,
        INPUT        "",
              OUTPUT glCrChanged,
              OUTPUT cMessage,
        INPUT-OUTPUT TABLE ttCreditCheck ).

    RUN ttReCalcShip_Shipment
      ( INPUT gcCategoryList[{&so_header-sys-id}],
        INPUT giSOID,
        INPUT INTEGER(fi-ship_num:SCREEN-VALUE) ).

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE runBtDispatch wn-ship_details
PROCEDURE runBtDispatch :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE cCurrentBranch AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE lKeepTranInfo  AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE lTranInfoFound AS LOGICAL     NO-UNDO.


  RUN so/siexplshipdispatch.p ON SERVER g-AppSrvr
    ( INPUT  INTEGER(fi-soid:SCREEN-VALUE IN FRAME frExplship),     /* ipiTranID        */
      INPUT  INTEGER(fi-ship_num:SCREEN-VALUE IN FRAME frExplship), /* ipiShipmentNum   */
      OUTPUT gcCurrentDriverOnHeader ).

  RUN dp/dp_chkship.p ON SERVER g-AppSrvr
    ( INPUT "SO",
      INPUT INTEGER(fi-soid:SCREEN-VALUE IN FRAME frExplship),
      INPUT gcCategoryList[{&so_header-sys-id}],
      INPUT 0,
      OUTPUT lTranInfoFound ).

  IF lTranInfoFound THEN
  DO:
    lKeepTranInfo = YES.

    RUN sysinfo.p
      ( INPUT "dp_chkship",
        INPUT "",
        INPUT-OUTPUT lKeepTranInfo ).

    IF lKeepTranInfo = NO THEN
      RETURN.
  END.

  cCurrentBranch = {getagilprop.i &PropList='currentBranch':U}.

  /* Note that dp_maint.w is not a dialog-box. Because we want it to act like one,
     we will de-sensitize the PO entry windows until we are done with it */
  RUN window_sensitive
    ( INPUT NO ).

  RUN dp_maint.w PERSISTENT
    ( INPUT "SO",                                                  /* ipcTranType      */
      INPUT cCurrentBranch,                                        /* ipcTranProfName  */
      INPUT gcCategoryList[{&so_header-sys-id}],                   /* ipcTranSysid     */
      INPUT INTEGER(fi-soid:SCREEN-VALUE IN FRAME frExplship),     /* ipiTranID        */
      INPUT INTEGER(fi-ship_num:SCREEN-VALUE IN FRAME frExplship), /* ipiShipmentNum   */
      INPUT lKeepTranInfo,                                         /* iplKeepTranInfo  */
      INPUT TABLE ttTranSeq,
      INPUT TABLE ttTranToDispatch,
      INPUT THIS-PROCEDURE ).                                      /* iphCalledFrom    */

  APPLY "ENTRY" TO CURRENT-WINDOW.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE runSave wn-ship_details
PROCEDURE runSave :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE OUTPUT PARAMETER oplContinue AS LOGICAL NO-UNDO INIT YES.

  DEFINE VARIABLE cTallyMsg             AS  CHARACTER  NO-UNDO INIT "".
  DEFINE VARIABLE dTallyQty             AS  DECIMAL    NO-UNDO.
  DEFINE VARIABLE cSelectionCriteria    AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE cErrorMsg             AS  CHARACTER  NO-UNDO.
  DEFINE VARIABLE lDummy                AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE dDummy                AS  DECIMAL    NO-UNDO INIT 0.
  DEFINE VARIABLE lAllowSOUpdate        AS  LOGICAL    NO-UNDO.
  DEFINE VARIABLE dtOrigShipDate        AS  DATE       NO-UNDO.

  DEFINE BUFFER   bl-shipments_header-2 FOR shipments_header.
  DEFINE BUFFER   bl-so_header-2        FOR so_header.
  DEFINE BUFFER   bfSoHeader            FOR so_header.
  DEFINE BUFFER   bl-item_bo            FOR item_bo.
  DEFINE BUFFER   bl-po_header          FOR po_header.

  DO WITH FRAME {&FRAME-NAME}:

    IF DATE(fi-ship_date:SCREEN-VALUE) = ?   AND
       fi-ship_date:SENSITIVE          = YES THEN
    DO:
      RUN sysinfok.p(INPUT "required_fld",
                     INPUT "Expected ship date").
   
      ASSIGN
        oplContinue = NO.
      APPLY "ENTRY" TO fi-ship_date.
      RETURN.
    END.
    IF DATE(fiExpDate:SCREEN-VALUE) = ?   AND
       fiExpDate:SENSITIVE          = YES THEN
    DO:
      RUN sysinfok.p(INPUT "required_fld",
                     INPUT "Expected devl date").
      ASSIGN
        oplContinue = NO.
      APPLY "ENTRY" TO fiExpDate.
      RETURN.
    END.
  END.
  
  RUN SaveLineUpdateChanges( INPUT TRUE ).

  /* give warning that tally doesn't match quantity specified to ship */
  FOR EACH temp-ship-details NO-LOCK:
    /* give warning that tally doesn't match quantity specified to ship */
    IF {invitemtype.i &cItemType       = temp-ship-details.item_type
                      &cProcessContext = "TallyCalc" } THEN
    DO:

      RUN GetTally /*in explship.i*/
        ( INPUT  temp-ship-details.so_id_sysid,  /*tran_sysid  */
          INPUT  temp-ship-details.so_id,        /*tran_id     */
          INPUT  temp-ship-details.sequence,     /*tran_seq    */
          INPUT  temp-ship-details.ship-num,     /*shipment num*/
          INPUT  YES,                            /*requires BF qty ?*/
          OUTPUT cTallyMsg,                      /*tally string*/
          OUTPUT dTallyQty ).                    /*tally quantity*/

      IF dTallyQty <> 0 AND
         ABS(dTallyQty - ABS(temp-ship-details.qty * temp-ship-details.disp_qty_conv)) > giQtyDeleteThreshold THEN
        RUN sysinfok.p(INPUT "quantity_tally_not_equal",
                       INPUT STRING(temp-ship-details.ITEM + "|" + 
                             STRING((dTallyQty / temp-ship-details.disp_qty_conv),"-ZZZ,ZZZ,ZZ9.9999") + "|" + 
                             STRING(temp-ship-details.qty,"-ZZZ,ZZZ,ZZ9.9999"))).
    END.
  END.

  IF TRIM(g-orig-route) <> TRIM(fi-route:SCREEN-VALUE) THEN
  DO:
    IF LOOKUP("GetSelectionCriteria",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
      RUN GetSelectionCriteria IN g-calling_module
        ( OUTPUT cSelectionCriteria ).

    IF cSelectionCriteria = "Route ID" THEN
      glNeedRestart = YES.
  END.

  /* note - we allow user to change fi-stop and/or fi-route even in Display mode */
  IF ( g-orig-stop     <> INTEGER(fi-stop:SCREEN-VALUE) OR
       g-orig-route    <> TRIM(fi-route:SCREEN-VALUE)   OR
       gcOrigDriver    <> TRIM(fiDriver:SCREEN-VALUE)   OR
       gcOrigProNumber <> TRIM(fiProNumber:SCREEN-VALUE)) OR
     (g-context <> "Display" AND
       (gdtOrigShipDate  <> DATE(fi-ship_date:SCREEN-VALUE) OR
        gdtOrigExpDate   <> DATE(fiExpDate:SCREEN-VALUE) OR
        gdOrigADF        <> DECIMAL(fi-adf:SCREEN-VALUE) OR
        glOrigHold       <> tbHold:CHECKED OR
        (bl-shipments_header.override_adf = YES AND fi-asterisk:SCREEN-VALUE <> "*") OR
        (bl-shipments_header.override_adf = NO AND fi-asterisk:SCREEN-VALUE = "*")))   THEN
  DO:
    ASSIGN
      lAllowSOUpdate = NO.

    IF g-orig-route   <> TRIM(fi-route :SCREEN-VALUE) OR
       gdtOrigExpDate <> DATE(fiExpDate:SCREEN-VALUE) THEN
    DO:
      EMPTY TEMP-TABLE ttShipmentRow.
      CREATE ttShipmentRow.
      ASSIGN
        ttShipmentRow.cProfName    = {getagilprop.i &PropList="'currentBranch'":U}.
        ttShipmentRow.iSOID        = bl-shipments_header.so_id.
        ttShipmentRow.iShipmentNum = bl-shipments_header.shipment_num.
      RELEASE ttShipmentRow.

      RUN shipinfop.p ON SERVER g-AppSrvr
        ( INPUT-OUTPUT TABLE ttShipmentRow,
                OUTPUT lDummy,
                OUTPUT lAllowSOUpdate ).

      IF lAllowSOUpdate = YES THEN DO:
        RUN sysinfo.p (INPUT "update_so_route_delv_date",
                       INPUT "",
                       INPUT-OUTPUT lAllowSOUpdate).
      END.
    END. /* IF g-orig-route   <> TRIM(fi-route :SCREEN-VALUE) OR */

    IF gdtOrigShipDate  <> DATE(fi-ship_date:SCREEN-VALUE) AND
       glAffectInv      = NO                              THEN
    DO:
      RUN adjshipdt.p
        ( INPUT  "SHIP",
          INPUT  bl-shipments_header.so_id_sysid,
          INPUT  bl-shipments_header.so_id,
          INPUT  bl-shipments_header.shipment_num,
          INPUT  YES,
          INPUT  DATE(fi-ship_date:SCREEN-VALUE),
          INPUT  NO,
          INPUT  ?,
          OUTPUT cErrorMsg ).

      IF cErrorMsg <> "" THEN
        MESSAGE cErrorMsg VIEW-AS ALERT-BOX WARNING BUTTONS OK.
    END.

    FOR FIRST bl-shipments_header-2 WHERE
              RECID( bl-shipments_header-2 ) = ip-shiphead_rec
              EXCLUSIVE-LOCK:

      ASSIGN
        bl-shipments_header.hold_from_invoicing = tbHold:CHECKED
        dtOrigShipDate                          = bl-shipments_header-2.ship_date
        bl-shipments_header-2.ship_date         = DATE(fi-ship_date:SCREEN-VALUE)
        bl-shipments_header-2.expect_date       = DATE(fiExpDate:SCREEN-VALUE)
        bl-shipments_header-2.route_id_char     = fi-route:SCREEN-VALUE
        bl-shipments_header-2.STOP              = INTEGER(fi-stop:SCREEN-VALUE)
        bl-shipments_header-2.driver            = fiDriver:SCREEN-VALUE
        bl-shipments_header-2.pro_number        = fiProNumber:SCREEN-VALUE.

      IF fi-asterisk:SCREEN-VALUE = "*" THEN
      DO:
        ASSIGN fi-adf.
        ASSIGN bl-shipments_header-2.adf          = fi-adf
               bl-shipments_header-2.override_adf = YES.
      END.
      ELSE
        ASSIGN bl-shipments_header-2.adf          = 0
               bl-shipments_header-2.override_adf = NO.

      &SCOP LTABLE bl-shipments_header-2
      {uwhodate.i}
      &UNDEF LTABLE

      IF glSOHeaderUpdateADF = TRUE OR
         lAllowSOUpdate      = YES  THEN
      DO:
        FOR FIRST bfSoHeader WHERE
                  bfSoHeader.system_id = bl-shipments_header.so_id_sysid AND
                  bfSoHeader.so_id     = bl-shipments_header.so_id
                  NO-LOCK:

          FOR FIRST bl-so_header-2 WHERE
                    ROWID(bl-so_header-2) = ROWID(bfSoHeader)
                    EXCLUSIVE-LOCK:

            IF glSOHeaderUpdateADF = TRUE THEN
              /* Change the so_header adf amount by the amount changed in this window */
              ASSIGN bl-so_header-2.adf = bl-so_header-2.adf + (fi-adf - gdOrigADF).

            IF lAllowSOUpdate = YES THEN
              ASSIGN
                bl-so_header-2.expect_date          = DATE(fiExpDate:SCREEN-VALUE)
                bl-so_header-2.expect_date_override = YES
                bl-so_header-2.route_id_char        = fi-route:SCREEN-VALUE.

            &SCOPED-DEFINE LTABLE bl-so_header-2
            {uwhodate.i}
            &UNDEFINE LTABLE

          END.

          /* Revisit Dual Read For Lock */
          FOR FIRST bl-so_header-2 WHERE
                    ROWID(bl-so_header-2) = ROWID(bfSoHeader)
                    NO-LOCK:
            /* STUB */
          END.
          END.
      END. /* do if we need to update adf */

      VALIDATE bl-shipments_header-2.
    END. /* do if available bl-shipments_header-2 */

    IF dtOrigShipDate <> DATE(fi-ship_date:SCREEN-VALUE) THEN
    DO:
      IF NOT CAN-FIND (FIRST bl-shipments_header-2 WHERE
                             bl-shipments_header-2.system_id    = bl-shipments_header.so_id_sysid  AND
                             bl-shipments_header-2.so_id        = bl-shipments_header.so_id        AND
                             bl-shipments_header-2.so_id_sysid  = bl-shipments_header.so_id_sysid  AND
                             bl-shipments_header-2.shipment_num < bl-shipments_header.shipment_num NO-LOCK) THEN
        FOR FIRST bfSoHeader WHERE
                  bfSoHeader.system_id = bl-shipments_header.so_id_sysid AND
                  bfSoHeader.so_id     = bl-shipments_header.so_id       NO-LOCK:

          /*Apply per stop charges/costs for new ship_date*/
          RUN calcstopchrg.p
            (INPUT "SO",
             INPUT bfSoHeader.system_id,
             INPUT bfSoHeader.so_id,
             INPUT bl-shipments_header.shipment_num,
             INPUT bfSoHeader.sale_type,
             INPUT bfSoHeader.cust_key_sysid,
             INPUT bfSoHeader.cust_key,
             INPUT bfSoHeader.shipto_seq_num,
             INPUT DATE(fi-ship_date:SCREEN-VALUE),
             INPUT YES,   /*Calc totals for current SO*/
             INPUT NO,    /*run credit check for current SO - done below*/
             INPUT NO,    /*Being invoiced*/
             INPUT-OUTPUT dDummy). /*Current SO total*/

          /*Apply per stop charges/costs for old ship_date*/
          RUN calcstopchrg.p
            (INPUT "SO",
             INPUT bfSoHeader.system_id,
             INPUT bfSoHeader.so_id,
             INPUT bl-shipments_header.shipment_num,
             INPUT bfSoHeader.sale_type,
             INPUT bfSoHeader.cust_key_sysid,
             INPUT bfSoHeader.cust_key,
             INPUT bfSoHeader.shipto_seq_num,
             INPUT dtOrigShipDate,
             INPUT YES,   /*Calc totals for current SO*/
             INPUT NO,    /*run credit check for current SO - done below*/
             INPUT NO,    /*Being invoiced*/
             INPUT-OUTPUT dDummy). /*Current SO total*/
        END.

      /* Need to recalculate the first ship/pickup date on any related dispatches */
      RUN dp/dp_setshipdate.p
        (INPUT gscSessionContextId,
         INPUT "",
         INPUT 0,
         INPUT "SO",
         INPUT bl-shipments_header.system_id,
         INPUT bl-shipments_header.so_id,
         INPUT bl-shipments_header.shipment_num).
    END.

    ASSIGN
      gdtOrigShipDate = DATE(fi-ship_date:SCREEN-VALUE)
      gdtOrigExpDate  = DATE(fiExpDate   :SCREEN-VALUE)
      g-orig-route    = fi-route         :SCREEN-VALUE
      g-orig-stop     = INTEGER(fi-stop  :SCREEN-VALUE)
      gcOrigDriver    = fiDriver         :SCREEN-VALUE
      gcOrigProNumber = fiProNumber      :SCREEN-VALUE
      glOrigHold      = tbHold           :CHECKED
      gdOrigADF       = DECIMAL(fi-adf   :SCREEN-VALUE).


  END. /* do if something changed */

  /* check credit */
  RUN ttReCalcShip_Shipment
    ( INPUT gcCategoryList[{&so_header-sys-id}],
      INPUT giSOID,
      INPUT INTEGER(fi-ship_num:SCREEN-VALUE) ).


END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE RunUpdateStatus wn-ship_details
PROCEDURE RunUpdateStatus :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE iDummy           AS INTEGER     NO-UNDO.
  DEFINE VARIABLE cErrorMsg        AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE lContinue        AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE iCtr             AS INTEGER     NO-UNDO.
  DEFINE VARIABLE cWhereApplyEntry AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE cStatusChange    AS CHARACTER   NO-UNDO.
  DEFINE VARIABLE hHandle          AS HANDLE      NO-UNDO.
  DEFINE VARIABLE lDummy           AS LOGICAL     NO-UNDO.

  DEFINE BUFFER bfShipmentsDetail FOR shipments_detail.
  DEFINE BUFFER bfSODetail        FOR so_detail.

  /*******        IMPORTANT
   Any changes to this procedure may need to be made to run_btUpdate in comtstat.w*/

  DO WITH FRAME {&FRAME-NAME}:

    RUN runSave
      (OUTPUT lContinue).

    IF lContinue = NO THEN
      RETURN.

    RUN CreditCheck.

    IF tbHold:CHECKED AND
       CAN-FIND( FIRST ttShipStatus WHERE
                       ttShipStatus.cStatus_code = cbStatus:SCREEN-VALUE AND
                       ttShipStatus.lIn_process  = NO
                       NO-LOCK ) THEN
    DO:
      RUN sysinfok.p
        ( INPUT "onholdstopinv2",
          INPUT "" ).

      RETURN NO-APPLY.
    END.

    cStatusChange = GetStatusFlag(cbStatus:SCREEN-VALUE).

    RUN ChecksForUpdateStatus /*updstagingstat.i*/
      ( INPUT  cStatusChange,
        INPUT  DATE(fiInvoiceDate:SCREEN-VALUE),
        INPUT  INTEGER(cbInvoiceYear:SCREEN-VALUE),
        INPUT  INTEGER(SUBSTRING(cbInvoicePeriod:SCREEN-VALUE, 1 ,2)),
        OUTPUT cWhereApplyEntry,
        OUTPUT lContinue ).

    IF NOT lContinue THEN
    DO:
      IF cWhereApplyEntry = "Invoice Date" THEN
        APPLY "ENTRY":U TO fiInvoiceDate.
      ELSE IF cWhereApplyEntry = "Invoice Period" THEN
        APPLY "ENTRY":U TO cbInvoicePeriod.

      RETURN.
    END.

    EMPTY TEMP-TABLE ttPickTrn NO-ERROR.
    EMPTY TEMP-TABLE ttCopyStagedHeader NO-ERROR.

    /*Get a ttCopyStagedHeader record for the current tran/shipment*/
    RUN bldttstgd.p ON SERVER g-AppSrvr
      ( INPUT        "NewSearch",
        INPUT        "SO ID",
        INPUT        STRING(bl-shipments_header.so_id),
        INPUT        1, /* EC Type */
        INPUT        bl-shipments_header.prof_name,
        INPUT        IF glAffectInv = NO THEN YES ELSE NO, /* include directs */
        INPUT        STRING(bl-shipments_header.shipment_num),
        INPUT        NO,  /* set Specify Commit field */
        INPUT        YES, /* add staged records    */
        INPUT        YES, /* add loaded records    */
        INPUT        YES, /* add en route records  */
        INPUT        YES, /* add delivered records */
        INPUT        NO,
        INPUT        TABLE ttPickTrn,
        INPUT-OUTPUT TABLE ttCopyStagedHeader,
              OUTPUT iDummy,
              OUTPUT iDummy,
              OUTPUT iDummy,
              OUTPUT iDummy,
              OUTPUT cErrorMsg ).

    DO iCtr = 1 TO NUM-ENTRIES(cErrorMsg, CHR(3)):
      MESSAGE ENTRY(iCtr,cErrorMsg,CHR(3)) VIEW-AS ALERT-BOX ERROR BUTTONS OK.
    END.

    RUN UpdateStatus /*updstagingstat.i*/
      ( INPUT        "explship.w",
        INPUT        {&WINDOW-NAME}:HANDLE,
        INPUT        NO, /*iplSkipTransWithErrors*/
        INPUT        cStatusChange,
        INPUT        bl-shipments_header.status_flag,
        INPUT        DATE(fiInvoiceDate:SCREEN-VALUE),
        INPUT        INTEGER(cbInvoiceYear:SCREEN-VALUE),
        INPUT        INTEGER(SUBSTRING(cbInvoicePeriod:SCREEN-VALUE, 1 ,2)),
        INPUT        glAffectInv,
        INPUT        tbPrintDelvTick:CHECKED,
        INPUT        glCrCheckShipments,
        INPUT        glPrintOnHold,
        INPUT        gcPickProcess2Use,
        INPUT        gcUpdateTaxFields,
        INPUT        TABLE ttCopyStagedHeader,
        INPUT-OUTPUT hHandle,
              OUTPUT lDummy ).

  END. /* DO WITH FRAME {&FRAME-NAME}: */


END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SaveLineUpdateChanges wn-ship_details
PROCEDURE SaveLineUpdateChanges:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER iplHeaderSave      AS LOGICAL    NO-UNDO.
  
  DEFINE VARIABLE dShipmentQty    AS DECIMAL    NO-UNDO.
  DEFINE VARIABLE lContinue       AS LOGICAL    NO-UNDO.
  
  IF NOT glLineUpdateMode THEN
    RETURN.
    
  IF giLineUpdateSequence = 0 THEN 
  DO:
    IF NOT iplHeaderSave THEN
      RUN sysinfok.p
        ( INPUT "select_rows",
          INPUT "update" ).
    RETURN NO-APPLY.
  END.
  
  glSaveLineUpdateChanges = UnsavedLineUpdateChanges
                              ( INPUT gcSOSysid,
                                INPUT giSOID,
                                INPUT giShipNum,
                                INPUT giLineUpdateSequence ).
  
  dShipmentQty = DECIMAL(temp-ship-details.dDisplayQty:SCREEN-VALUE IN BROWSE br-shipdetails). // kem - need to change to fill in
  
  IF NOT glSaveLineUpdateChanges AND 
     ROUND(dShipmentQty,4) = ROUND(gdDetailTallyQty,4) THEN 
    RETURN.
                                                      
  goSODetailPresenter:ProcessOrigTables( INPUT "LOAD" ).
  
  RUN SaveSODetail
    ( INPUT "",
     OUTPUT gcNextSaveStep,
     OUTPUT lContinue ).
   
  /* from staging should stop at step 12 so quantity update can complete first */        
  IF NOT lContinue              OR 
     gcNextSaveStep <> "Step12" THEN 
    RETURN. 
    
  RUN UpdateShipmentQty
    ( INPUT grLineUpdateRECID,
      INPUT giLineUpdateRow,
      INPUT FALSE,
      INPUT TRUE,
      INPUT-OUTPUT dShipmentQty ).   
        
  RUN ClearLineUpdate.
    
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SaveSODetail wn-ship_details
PROCEDURE SaveSODetail:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER ipcCurrentStep      AS CHARACTER    NO-UNDO.
  DEFINE OUTPUT PARAMETER opcNextStep         AS CHARACTER    NO-UNDO.
  DEFINE OUTPUT PARAMETER oplContinue         AS LOGICAL      NO-UNDO INIT TRUE.
 
  goSODetailPresenter:SaveDetail
    ( INPUT "Staging",
      INPUT ipcCurrentStep,
      INPUT giShipNum,
     OUTPUT opcNextStep,
     OUTPUT oplContinue ).
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetDriverFillIn wn-ship_details
PROCEDURE SetDriverFillIn :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE cNewDriver AS CHARACTER   NO-UNDO.


  {waiton.i}

  RUN so/siexplshipdispatch.p ON SERVER g-AppSrvr
    ( INPUT  INTEGER(fi-soid:SCREEN-VALUE IN FRAME frExplship),     /* ipiTranID        */
      INPUT  INTEGER(fi-ship_num:SCREEN-VALUE IN FRAME frExplship), /* ipiShipmentNum   */
      OUTPUT cNewDriver ).

  {waitoff.i}

  IF cNewDriver <> gcCurrentDriverOnHeader THEN
    ASSIGN
      fiDriver:SCREEN-VALUE IN FRAME {&FRAME-NAME} = cNewDriver
      gcPriorDriver                                = cNewDriver
      gcOrigDriver                                 = cNewDriver.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetGridAndDetailView wn-ship_details
PROCEDURE SetGridAndDetailView:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER  ipcMode      AS CHARACTER  NO-UNDO.
  
  
  DO WITH FRAME {&FRAME-NAME}:
    
    IF ipcMode = "Display" THEN 
      ASSIGN
        temp-ship-details.dDisplayQty:READ-ONLY      IN BROWSE br-shipdetails = TRUE
        temp-ship-details.dDisplayQty:COLUMN-BGCOLOR IN BROWSE br-shipdetails = ?.
    ELSE 
    DO:
      /* check new so parameter to enable line edit 
      RUN LoadSOParameters. */
            
      ASSIGN 
        temp-ship-details.dDisplayQty   :READ-ONLY IN BROWSE br-shipdetails = FALSE.
      
    END. 
    
  END. 
  

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetOrigLineUpdateValues wn-ship_details
PROCEDURE SetOrigLineUpdateValues:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER ipiItemPtr         AS INTEGER    NO-UNDO.
DEFINE INPUT PARAMETER ipdOrderQty        AS DECIMAL    NO-UNDO.
DEFINE INPUT PARAMETER ipcOrderQtyUOM     AS CHARACTER  NO-UNDO.
DEFINE INPUT PARAMETER ipcDimension       AS CHARACTER  NO-UNDO.
DEFINE INPUT PARAMETER ipdPrice           AS DECIMAL    NO-UNDO.
DEFINE INPUT PARAMETER ipcPriceUOM        AS CHARACTER  NO-UNDO.
DEFINE INPUT PARAMETER ipdExtPrice        AS DECIMAL    NO-UNDO.

  
ASSIGN
  giOrigLineUpdateItemPtr   = ipiItemPtr
  gdOrigLineUpdateQty       = ipdOrderQty
  gcOrigLineUpdateUOM       = ipcOrderQtyUOM
  gcOrigLineUpdateDimension = ipcDimension
  gdOrigLineUpdatePrice     = ipdPrice
  gcOrigLineUpdatePriceUOM  = ipcPriceUOM
  gdOrigLineUpdateExtPrice  = ipdExtPrice.
  
END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetSelectedRows wn-ship_details
PROCEDURE SetSelectedRows :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE iLastSelection AS INTEGER NO-UNDO INIT 0.

  DO WITH FRAME {&FRAME-NAME}:

    FOR EACH ttTrackSelected NO-LOCK BY ttTrackSelected.sel_number DESC WHILE iLastSelection = 0:
      iLastSelection = ttTrackSelected.sel_number.
    END.

    IF br-shipdetails:DESELECT-ROWS() THEN.

    IF br-shipdetails:SET-REPOSITIONED-ROW(1, "CONDITIONAL") THEN.

    FOR EACH ttTrackSelected NO-LOCK,
       FIRST temp-ship-details WHERE
             temp-ship-details.sequence = ttTrackSelected.sequence
             NO-LOCK:

      IF ttTrackSelected.sel_number = iLastSelection THEN
      DO:
        IF br-shipdetails:SET-REPOSITIONED-ROW(ttTrackSelected.row_number, "ALWAYS") THEN.
      END.

      REPOSITION br-shipdetails TO ROWID ROWID(temp-ship-details) NO-ERROR.

      IF br-shipdetails:SELECT-FOCUSED-ROW() THEN.
    END. /* FOR EACH ttTempTranInfo NO-LOCK, */

    EMPTY TEMP-TABLE ttTrackSelected.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SetSensitivity wn-ship_details
PROCEDURE SetSensitivity :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ipcOnOff AS CHARACTER  NO-UNDO.

IF ipcOnOff = "Yes" THEN
  ASSIGN
    {&WINDOW-NAME}:SENSITIVE = YES.
ELSE
  ASSIGN
    {&WINDOW-NAME}:SENSITIVE = NO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE set_message_bmp wn-ship_details
PROCEDURE set_message_bmp :
/*------------------------------------------------------------------------------
  Purpose: Set the bitmap on message button if there is a message
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipiSOSeq   AS INTEGER  NO-UNDO.

  DEFINE VARIABLE        lMsgsExist AS LOGICAL  NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    RUN ismsg.p
      ( INPUT  g-so-sysid,
        INPUT  "SO",
        INPUT  INT(fi-soid:SCREEN-VALUE IN FRAME {&FRAME-NAME}),
        INPUT  ipiSOSeq,
        INPUT  gcCategoryList[{&trans_message-sys-id}],
        OUTPUT lMsgsExist ).

    IF ipiSOSeq = -1 THEN
    DO:
      IF lMsgsExist THEN
      DO:
        IF btHdrMsgs:LOAD-IMAGE-UP("images/msg_y.ico") THEN.
        ASSIGN btHdrMsgs:TOOLTIP = "Display messages".
      END.
      ELSE
      DO:
        IF btHdrMsgs:LOAD-IMAGE-UP("images/msg_n.ico") THEN.
        ASSIGN btHdrMsgs:TOOLTIP = "Create message".
      END.
    END. /* IF ipiSOSeq = -1 THEN */
    ELSE
    DO:
      IF lMsgsExist THEN
      DO:
        IF btViewMsgs:LOAD-IMAGE-UP("images/msg_y.ico") THEN.
        ASSIGN btViewMsgs:TOOLTIP = "Display messages".
      END.
      ELSE
      DO:
        IF btViewMsgs:LOAD-IMAGE-UP("images/msg_n.ico") THEN.
        ASSIGN btViewMsgs:TOOLTIP = "Create message".
      END.
    END.

  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE set_screen_value wn-ship_details
PROCEDURE set_screen_value :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT PARAMETER ipcField AS CHARACTER FORMAT "X(20)"   NO-UNDO.
  DEFINE INPUT PARAMETER ipcValue AS CHARACTER FORMAT "X(200)"  NO-UNDO.


  CASE ipcField:

    WHEN "DefaultGroup" THEN
      ASSIGN
        gcDefaultGroup = ipcValue.

    WHEN "UseGroupAsDefault" THEN
      glUseGroupAsDefault = IF ipcValue = "YES" THEN YES ELSE NO.

    WHEN "DefaultShipGroup" THEN
      ASSIGN
        gcDefaultShipGroup = ipcValue.

    WHEN "UseShipGroupAsDefault" THEN
      glUseShipGroupAsDefault = IF ipcValue = "YES" THEN YES ELSE NO.

    OTHERWISE
      RUN sysinfok.p(INPUT "field_not_registered",
                     INPUT STRING( ipcField )).

  END CASE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE set_window_profile wn-ship_details
PROCEDURE set_window_profile :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE VARIABLE cBranchId    AS CHARACTER  NO-UNDO.

DEFINE BUFFER bl-shipments_header-2 FOR shipments_header.

  FOR FIRST bl-shipments_header-2 WHERE
            RECID(bl-shipments_header-2) = ip-shiphead_rec
            NO-LOCK:

    RUN getBranchId
      ( INPUT  bl-shipments_header-2.prof_name,
        OUTPUT cBranchId ).

    IF g-allwin-local-profile <> cBranchId THEN
      RUN allwmainSetBranch ( INPUT cBranchId ).
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ShutDownWindow wn-ship_details
PROCEDURE ShutDownWindow :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER iplClose                  AS  LOGICAL       NO-UNDO.
  DEFINE OUTPUT PARAMETER oplContinue               AS  LOGICAL       NO-UNDO INIT TRUE.

  DEFINE VARIABLE         lPacketDeleted            AS  LOGICAL       NO-UNDO INIT NO.
  DEFINE VARIABLE         cErrorMsg                 AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cOldCredQStatus           AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cNewCredQStatus           AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cFailLevel                AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cCheckText                AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         iDummy                    AS  INTEGER       NO-UNDO.
  DEFINE VARIABLE         cDummy                    AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         lDummy                    AS  LOGICAL       NO-UNDO.
  DEFINE VARIABLE         lContinue                 AS  LOGICAL       NO-UNDO.

  DEFINE VARIABLE         cDpSelection              AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cDpList                   AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         iDpZeroShipDispatchID     AS  INTEGER       NO-UNDO.
  DEFINE VARIABLE         cDpShipList               AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         iDpSoID                   AS  INTEGER       NO-UNDO.
  DEFINE VARIABLE         cDpSoSysid                AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         cDpSoProfName             AS  CHARACTER     NO-UNDO.
  DEFINE VARIABLE         iDpSoShipNum              AS  INTEGER       NO-UNDO.
  DEFINE VARIABLE         iNumPrints                AS  INTEGER       NO-UNDO.
  DEFINE VARIABLE         cSaleType                 AS  CHARACTER     NO-UNDO.

  DEFINE VARIABLE         oDpCancelStagingSel       AS dp.DpCancelStagingSel   NO-UNDO.
  DEFINE VARIABLE         oCreditHoldArgs           AS so.CreditHoldArgs       NO-UNDO.
  DEFINE VARIABLE         oSalesChangeHistoryBE     AS so.SalesChangeHistoryBE NO-UNDO.

  DEFINE BUFFER           bl-shipments_header       FOR shipments_header.
  DEFINE BUFFER           bl-so_header              FOR so_header.


  IF glSkipShutdown = YES THEN
    RETURN.

  /* close detail window before invoicing. After invoicing, user can't
     add extra details to the credit memo*/
  IF VALID-HANDLE(ghUsodetalHdl) THEN
  DO:
    RUN ValidateCloseShipmentMode IN ghUsodetalHdl
      ( INPUT  {&WINDOW-NAME},
        OUTPUT oplContinue ).

    IF oplContinue = YES THEN
      RUN close_me IN ghUsodetalHdl
        ( INPUT {&WINDOW-NAME} ).
    ELSE
    DO:
      RETURN.
    END.
  END.

  IF giSOID    > 0 AND
     giShipNum > 0 AND
     NOT CAN-FIND( FIRST shipments_detail WHERE
                         shipments_detail.system_id    = gcCategoryList[{&shipments_detail-sys-id}] AND
                         shipments_detail.so_id_sysid  = gcSOSysid AND
                         shipments_detail.so_id        = giSOID    AND
                         shipments_detail.shipment_num = giShipNum
                         NO-LOCK ) THEN
  DO:
    RUN dp_cxlstaging.p ON g-AppSrvr
      (INPUT  "CHECK",
       INPUT  "SO",
       INPUT  giSOID,
       INPUT  gcSOSysid,
       INPUT  gcCategoryList[{&branch-specific-sys-id}], /* prof name */
       INPUT  giShipNum,
       INPUT  "",
       OUTPUT cDpList,
       OUTPUT iDpZeroShipDispatchID,
       OUTPUT cDpShipList,
       OUTPUT iDpSoID,
       OUTPUT cDpSoSysid,
       OUTPUT cDpSoProfName,
       OUTPUT iDpSoShipNum).

    ASSIGN
      lContinue = YES.

    TranLoop:
    DO TRANSACTION ON STOP  UNDO, RETRY
                   ON ERROR UNDO, RETRY
                   WHILE lContinue = YES:

      IF RETRY THEN
      DO:
        RUN sysinfo.p
          ( INPUT        "record_lock",
            INPUT        "",
            INPUT-OUTPUT lContinue ).

        IF lContinue = NO THEN
          NEXT TranLoop.
      END.

      EMPTY TEMP-TABLE ttso_header.

      FOR FIRST bl-shipments_header WHERE
                bl-shipments_header.system_id    = gcCategoryList[{&shipments_header-sys-id}] AND
                bl-shipments_header.so_id_sysid  = gcSOSysid                                  AND
                bl-shipments_header.so_id        = giSOID                                     AND
                bl-shipments_header.shipment_num = giShipNum
                EXCLUSIVE-LOCK:

        IF CAN-FIND( FIRST charge_packet WHERE
                           charge_packet.tran_sysid   = gcSOSysid AND
                           charge_packet.tran_type    = "SO"      AND
                           charge_packet.tran_id      = giSOID    AND
                           charge_packet.shipment_num = giShipNum
                           NO-LOCK ) OR
           CAN-FIND( FIRST so_cost_packet WHERE
                           so_cost_packet.tran_id_sysid = gcSOSysid AND
                           so_cost_packet.tran_type     = "SO"      AND
                           so_cost_packet.tran_id       = giSOID    AND
                           so_cost_packet.shipment_num  = giShipNum
                           NO-LOCK ) THEN
          ASSIGN
            lPacketDeleted = YES.

        RUN delchrgpk.p
          ( INPUT  gcSOSysid,
            INPUT  giSOID,
            INPUT  "SO",
            INPUT  "SO",
            INPUT  0,
            INPUT  giShipNum,
            INPUT  "",
            OUTPUT cErrorMsg ).

        ASSIGN
          glNeedRestart = YES.

        RUN numprints.p ON SERVER g-AppSrvr
          ( INPUT  bl-shipments_header.prof_name,
            INPUT  "Pick Ticket",
            INPUT  STRING(giSOID, "{&gcFullTranID}") + "-" + STRING(bl-shipments_header.shipment_num, "999"),
            INPUT  0,
            INPUT  0,
            OUTPUT iNumPrints ).

        FOR FIRST bl-so_header WHERE
                  bl-so_header.system_id = bl-shipments_header.so_id_sysid AND
                  bl-so_header.so_id     = bl-shipments_header.so_id
                  NO-LOCK:
           ASSIGN
             cSaleType       = bl-so_header.sale_type
             cOldCredQStatus = bl-so_header.credit_queue_status.

          CREATE ttso_header.
          BUFFER-COPY so_header TO ttso_header.
          RELEASE ttso_header.
        END.

        RUN loadhist.p ON SERVER g-AppSrvr
          ( INPUT gcCategoryList[{&shipments_detail-sys-id}],
            INPUT "SO",
            INPUT giSOID,
            INPUT "Staging",
            INPUT ?,
            INPUT "",
            INPUT "Canceled",
            INPUT "Staging Record Canceled",
            INPUT gcCurrentUser,
            INPUT TODAY ,
            INPUT "", /* item ptr */
            INPUT ?,
            INPUT cSaleType,
            INPUT bl-shipments_header.status_flag,
            INPUT bl-shipments_header.route_id_char,
            INPUT iNumPrints,
            INPUT 0,  /* detail qty */
            INPUT 0,  /* detail price */
            INPUT "", /* detail price uom */
            INPUT 0,  /* detail discount 1 */
            INPUT 0,  /* detail discount 2 */
            INPUT 0,  /* detail discount 3 */
            INPUT 0,  /* detail cost */
            INPUT "", /* costing uom */
            INPUT STRING(bl-shipments_header.shipment_num,"999"),
            INPUT bl-shipments_header.route_id_char,
            INPUT gcSOSysid,
            INPUT ?,    /* canceled_comment */
            INPUT ? ).  /* canceled_reason */

        RUN killmsg.p
          (INPUT gscSessionContextID,
           INPUT "SO",
           INPUT bl-shipments_header.so_id_sysid,
           INPUT bl-shipments_header.so_id,
           INPUT -1,
           INPUT bl-shipments_header.shipment_num,
           INPUT "all",
           INPUT NO, /*iplDeleteSpecificDims*/
           INPUT-OUTPUT TABLE ttAutoMessageDim).

        oSalesChangeHistoryBE = NEW so.SalesChangeHistoryBE().

        oSalesChangeHistoryBE:CreateChangeHistoryHdr( INPUT BUFFER bl-shipments_header:HANDLE,
                                                      INPUT "Cancel" ).

        DELETE OBJECT oSalesChangeHistoryBE.

        DELETE bl-shipments_header.
      END. /* FOR FIRST bl-shipments_header WHERE... */

      IF lPacketDeleted = YES THEN
      DO:
        /* Recalculate order total & check credit - Remaining(0) */
        EMPTY TEMP-TABLE ttSalesordParam.

        CREATE ttSalesordParam.
        ASSIGN
          ttSalesordParam.cProcess          = "RecalcChargesNCheckCredit":U
          ttSalesordParam.cSoIdSysid        = gcSOSysid
          ttSalesordParam.iSoId             = giSOID
          ttSalesordParam.cForceCreditCheck = "NO".
        RELEASE ttSalesordParam.

        EMPTY TEMP-TABLE ttErrorMsg.

        RUN so/salesordp.p
          ( INPUT-OUTPUT TABLE ttSalesordParam,
            INPUT-OUTPUT TABLE ttso_header,
            INPUT-OUTPUT TABLE ttso_detail,
            INPUT-OUTPUT TABLE ttMiscFields,
            INPUT-OUTPUT TABLE ttCustInfo,
            INPUT-OUTPUT TABLE ttCutFileWindow,
            INPUT-OUTPUT TABLE ttMinQty,
            INPUT-OUTPUT TABLE ttErrorMsg,
            INPUT-OUTPUT TABLE ttPassThruDetails,
            INPUT-OUTPUT TABLE ttCopy2Shipto,
                  OUTPUT TABLE ttTimeTracker,
                  OUTPUT lContinue ).

        ProcessMessages( INPUT "DisplayOnly" ).

        FOR FIRST ttSalesordParam NO-LOCK:

          ASSIGN
            cFailLevel = ttSalesordParam.cFailLevel
            cCheckText = ttSalesordParam.cFailText.

        END.

        IF cFailLevel <> "" THEN
        DO:
          FOR FIRST so_header WHERE
                    so_header.system_id = gcSOSysid AND
                    so_header.so_id     = giSOID
                    NO-LOCK:
            ASSIGN
              cNewCredQStatus = so_header.credit_queue_status.
          END.

          /* If credit queue status hasn't changed don't display credit window */
          IF cOldCredQStatus = cNewCredQStatus THEN
          DO:
            ASSIGN
              cFailLevel = ""
              cCheckText = "".
          END.
        END. /* IF cFailLevel <> "" THEN */

      END. /* IF lPacketDeleted = YES THEN */

      ASSIGN
        lContinue = NO.
    END. /* transaction */

    ASSIGN glByPassEntryTrigger2 = YES.

    /* If there is a dispatch we'll be doing something with it based on user selection */
    IF cDpList <> "" THEN
    DO:
      /* Call new window and update cDpSelection*/
      oDpCancelStagingSel = NEW dp.DpCancelStagingSel( INPUT  giSOID,
                                                       INPUT  cDpList,
                                                       INPUT  cDPShipList,
                                                       INPUT  iDpZeroShipDispatchID ).

      oDpCancelStagingSel:ShowModalDialog().

      ASSIGN cDpSelection = oDpCancelStagingSel:DpSelection NO-ERROR.

      DELETE OBJECT oDpCancelStagingSel NO-ERROR.
      oDpCancelStagingSel = ?.

      RUN dp_cxlstaging.p
        (INPUT  "Change",
         INPUT  "SO",
         INPUT  giSOID,
         INPUT  gcSOSysid,
         INPUT  gcCategoryList[{&branch-specific-sys-id}], /* prof name */
         INPUT  giShipNum,
         INPUT  cDpSelection,
         OUTPUT cDpList,
         OUTPUT iDpZeroShipDispatchID,
         OUTPUT cDPShipList,
         OUTPUT iDpSoID,
         OUTPUT cDpSoSysid,
         OUTPUT cDpSoProfName,
         OUTPUT iDpSoShipNum).
    END.

    IF cFailLevel <> ""     AND
       cFailLevel <> "SKIP" THEN
    DO:
      oCreditHoldArgs = NEW so.CreditHoldArgs(
                          INPUT THIS-PROCEDURE,
                          INPUT {&WINDOW-NAME}:HANDLE,
                          INPUT gcSOSysid,
                          INPUT giSOID,
                          INPUT "Error",
                          INPUT cFailLevel,
                          INPUT cCheckText,
                          INPUT "",
                          INPUT NO).

      oCreditHoldArgs:CallCreditHold().

      DELETE OBJECT oCreditHoldArgs.
    END. /* IF cFailLevel <> "" AND... */

  END. /* IF giSOID > 0 AND... */
  ELSE
    RUN creditcheck.

  /* delete all the persistently run procedures */
  oplContinue = DYNAMIC-FUNCTION('agilguimgrDeletePersistent':U IN gshAgilInterfacemgr,
                  INPUT {&WINDOW-NAME} ) NO-ERROR.

  ASSIGN glByPassEntryTrigger2 = NO.

  IF oplContinue = YES THEN
  DO:
    {custinfohdl.i}

    RUN CloseMessageWindow.

    IF glNeedRestart AND
       LOOKUP("restart_search",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
      RUN restart_search IN g-calling_module.

    IF iplClose = YES THEN
    DO:
      IF VALID-HANDLE(g-calling_module) AND
         LOOKUP("init_pers_hdl",g-calling_module:INTERNAL-ENTRIES,",") > 0 THEN
        RUN init_pers_hdl IN g-calling_module.

      ASSIGN
        glSkipShutdown = YES.

      APPLY "CLOSE":U TO THIS-PROCEDURE.

      ASSIGN
        glSkipShutdown = NO.
    END. /* IF iplClose = YES THEN */
  END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE SpecifyTags wn-ship_details
PROCEDURE SpecifyTags :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lDummy   AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE iShipNum AS INTEGER     NO-UNDO.

  DEFINE BUFFER bftemp-ship-details FOR temp-ship-details.

  FOR FIRST bftemp-ship-details NO-LOCK:
    ASSIGN
      iShipNum = bftemp-ship-details.ship-num.
  END. /* FOR FIRST bftemp-ship-details NO-LOCK: */

  IF iShipNum = 0 THEN
    RETURN.

  EMPTY TEMP-TABLE ttPickTrn NO-ERROR.
  EMPTY TEMP-TABLE ttPickDtl NO-ERROR.

  {&WINDOW-NAME}:SENSITIVE = NO.

  RUN common/specifytag.w PERSISTENT
    ( INPUT  THIS-PROCEDURE,
      INPUT  YES,
      INPUT  YES,
      INPUT  "SO",
      INPUT  gcCategoryList[{&so_header-sys-id}],
      INPUT  giSOID,     /* Tran ID  */
      INPUT  -1,         /* Tran Seq */
      INPUT  iShipNum,   /* Shipment */
      INPUT  0,          /* Pick ID  */
      INPUT  "",
      INPUT  -1,
      INPUT  NO,
      INPUT  NO,
      INPUT  NO,
      INPUT  "",
      INPUT  "",
      INPUT  "",
      INPUT  0,
      INPUT  0,
      INPUT  NO,
      INPUT  "",
      INPUT  NO,
      INPUT  "",
      INPUT  NO,
      INPUT  "", /* Reman Type Sysid */
      INPUT  "", /* Reman Type       */
      INPUT  TABLE ttPickTrn,
      INPUT  TABLE ttPickDtl,
      INPUT  TABLE temp-qtydist,
      OUTPUT TABLE ttTags,
      OUTPUT lDummy ).
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE toggle_cost_visible wn-ship_details
PROCEDURE toggle_cost_visible :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE VARIABLE vhCOLUMN  AS WIDGET-HANDLE NO-UNDO.
DEFINE VARIABLE lViewCost AS LOGICAL       NO-UNDO.

/* get the toggle parameter */
RUN get_cost_toggle IN gshAgilMenuMgr (OUTPUT g-cost_toggle).

 IF goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_average_cost") OR
    goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_market_cost")  THEN
   lViewCost = YES.
 ELSE
   lViewCost = NO.

/* only want to open or refresh the browser once, but the query is opened
when the window is enabled, so this will keep it from refreshing twice in
that instance */
IF g-first_run = FALSE THEN
DO:
  RUN open-query.
END.

DO WITH FRAME {&FRAME-NAME}:

/* trigger the browser to its first field */
  ASSIGN vhCOLUMN = {&BROWSE-NAME}:FIRST-COLUMN.

  /* search through all the column names looking for the target column*/
  DO WHILE VALID-HANDLE(vhCOLUMN):

    /* if we're supposed to show costs */
    IF g-cost_toggle = 3 THEN
    DO:
      IF vhCOLUMN:LABEL = "Cost" THEN
        ASSIGN vhCOLUMN:VISIBLE = lViewCost.
      IF vhCOLUMN:LABEL = "GM %" THEN
        ASSIGN vhCOLUMN:VISIBLE = lViewCost.
      IF TRIM(vhColumn:LABEL) = "" THEN
        ASSIGN vhCOLUMN:VISIBLE = lViewCost.
      IF vhCOLUMN:LABEL = "Oth Cost GM" THEN
        ASSIGN vhCOLUMN:VISIBLE = goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_other_cost").
      IF vhCOLUMN:LABEL = "Oth Cost No GM" THEN
        ASSIGN vhCOLUMN:VISIBLE = goSecurityManager:IsActionGranted("Sales Orders-Quotes","main","can_view_other_cost").
    END. /* IF g-cost_toggle */
    ELSE /* and if no costs to be shown */
    DO:
      IF vhCOLUMN:LABEL = "Cost" THEN
        ASSIGN vhCOLUMN:VISIBLE = NO.
      IF vhCOLUMN:LABEL = "GM %" THEN
        ASSIGN vhCOLUMN:VISIBLE = NO.
      IF TRIM(vhColumn:LABEL) = "" THEN
        ASSIGN vhCOLUMN:VISIBLE = NO.
      IF vhCOLUMN:LABEL = "Oth Cost GM" THEN
        ASSIGN vhCOLUMN:VISIBLE = NO.
      IF vhCOLUMN:LABEL = "Oth Cost No GM" THEN
        ASSIGN vhCOLUMN:VISIBLE = NO.
    END.
    ASSIGN vhCOLUMN  = vhCOLUMN:NEXT-COLUMN.
  END. /* DO WHILE */
END. /* DO WITH FRAME */
ASSIGN g-first_run = FALSE.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE UncompleteWo wn-ship_details
PROCEDURE UncompleteWo :
/*------------------------------------------------------------------------------
  Purpose:     Takes care of updating the actual shipment-detail record and
               so_header status. Also performs recosting and runs shortage.p.
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ipdNewQty        AS DECIMAL     NO-UNDO.
DEFINE INPUT  PARAMETER ipiWoId          AS INTEGER     NO-UNDO.
DEFINE OUTPUT PARAMETER oplUncompleted   AS LOGICAL     NO-UNDO INIT NO.

DEFINE VARIABLE lAutoCompleteWoFound     AS LOGICAL     NO-UNDO.
DEFINE VARIABLE dDummy                   AS DECIMAL     NO-UNDO.
DEFINE VARIABLE lDummy                   AS LOGICAL     NO-UNDO.
DEFINE VARIABLE cMessage                 AS CHARACTER   NO-UNDO.
DEFINE VARIABLE lContinue                AS LOGICAL     NO-UNDO.
DEFINE VARIABLE cContentList             AS CHARACTER   NO-UNDO.

DEFINE BUFFER   bl-item_reserved         FOR item_reserved.


  IF ipiWoId <= 0 THEN
    RETURN.

  /* uncomplete everything, and re-complete it as a single completion for the new qty */
  FOR EACH bl-item_reserved WHERE
           bl-item_reserved.system_id      = gcCategoryList[{&item_reserved-sys-id}] AND
           bl-item_reserved.type           = "SO"                                    AND
           bl-item_reserved.tran_sysid     = temp-ship-details.so_id_sysid           AND
           bl-item_reserved.tran_id        = temp-ship-details.so_id                 AND
           bl-item_reserved.tran_seq       = temp-ship-details.sequence              AND
           bl-item_reserved.sub_id         = temp-ship-details.ship-num              AND
           bl-item_reserved.pick_id        = 0                                       AND
           bl-item_reserved.tag            = STRING(ipiWoId)
           NO-LOCK:

    cContentList = cContentList + bl-item_reserved.content + CHR(3).
  END.

  DATASET dswoheader:EMPTY-DATASET().

  RUN so/woautocompl.p ON SERVER g-AppSrvr
    ( INPUT  gscSessionContextId,
      INPUT  NO,
      INPUT  "explship.w",
      INPUT  "UncompleteWO^CompleteWo",
      INPUT  temp-ship-details.so_id_sysid,
      INPUT  temp-ship-details.so_id,
      INPUT  temp-ship-details.sequence,
      INPUT  ipiWoId, /* wo id */
      INPUT  "", /* check lowest level */
      INPUT  0,
      INPUT  temp-ship-details.ship-num,
      INPUT  -1, /* parent loc ptr */
      INPUT  ipdNewQty,  /* qty completing */
      INPUT  cContentList,
      INPUT  temp-ship-details.item_ptr,
      INPUT  NO,
      INPUT  0,
      INPUT  NO, /* check exceed remain qty */
      INPUT  YES, /* auto commit commit alls - only ran when CheckCompleteQty*/
      INPUT  DATASET dswoheader,
      OUTPUT lAutoCompleteWoFound,
      OUTPUT dDummy,
      OUTPUT lDummy,
      OUTPUT cMessage,
      OUTPUT lContinue ).

  IF lAutoCompleteWoFound AND
     cMessage <> ""       THEN
  DO:
    MESSAGE cMessage VIEW-AS ALERT-BOX ERROR BUTTONS OK.
  END.

  IF lAutoCompleteWoFound = YES AND
     lContinue            = YES THEN
    oplUncompleted = YES.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE UpdateMessagesInBrowser wn-ship_details
PROCEDURE UpdateMessagesInBrowser :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE VARIABLE lMessage          AS   LOGICAL            NO-UNDO.
DEFINE VARIABLE lReOpenQuery      AS   LOGICAL            NO-UNDO.


FOR EACH temp-ship-details EXCLUSIVE-LOCK:

  ASSIGN lmessage = NO.

  FOR FIRST trans_message WHERE
            trans_message.system_id  = gcCategoryList[{&trans_message-sys-id}] AND
            trans_message.tran_type  = "SO" AND
            trans_message.tran_id    = temp-ship-details.so_id AND
            trans_message.tran_sysid = temp-ship-details.so_id_sysid AND
            trans_message.tran_seq   = temp-ship-details.sequence
            NO-LOCK:
    ASSIGN lMessage = YES.
  END.

  IF lMessage = YES THEN
    ASSIGN temp-ship-details.haz-msg = "*".
  ELSE
    ASSIGN temp-ship-details.haz-msg = "".
END.

DO WITH FRAME {&FRAME-NAME}:
  RUN open-query.
END.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE UpdateShipmentQty wn-ship_details
PROCEDURE UpdateShipmentQty:
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT        PARAMETER  iprCurrentGridRecid     AS RECID      NO-UNDO.
  DEFINE INPUT        PARAMETER  ipiRow                  AS INTEGER    NO-UNDO.
  DEFINE INPUT        PARAMETER  iplSelectNextRow        AS LOGICAL    NO-UNDO.
  DEFINE INPUT        PARAMETER  iplLineUpdateMode       AS LOGICAL    NO-UNDO.
  DEFINE INPUT-OUTPUT PARAMETER  iopdNewShipmentQty      AS DECIMAL    NO-UNDO.
  
  DEFINE VARIABLE iRow                   AS INTEGER     NO-UNDO INIT 1.
  DEFINE VARIABLE rShipmentDetailRecid   AS RECID       NO-UNDO.
  DEFINE VARIABLE rNextRowRecid          AS RECID       NO-UNDO.
  DEFINE VARIABLE lLastRow               AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE dPulledQty             AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE dDummy                 AS DECIMAL     NO-UNDO.
  DEFINE VARIABLE lCompleted             AS LOGICAL     NO-UNDO INIT FALSE.

  DEFINE BUFFER   bfTempShip           FOR temp-ship-details.
  DEFINE BUFFER   bltemp-ship-details  FOR temp-ship-details.
  
  FIND FIRST bltemp-ship-details WHERE 
             RECID(bltemp-ship-details) = iprCurrentGridRecid
             NO-LOCK NO-ERROR.
  
  IF NOT AVAILABLE(bltemp-ship-details) THEN 
    RETURN.
    
  rShipmentDetailRecid = bltemp-ship-details.rec.

  IF bltemp-ship-details.type = "CM" THEN
  DO:
    IF ROUND(DECIMAL(iopdNewShipmentQty),4) > 0    THEN
      iopdNewShipmentQty = ABS(iopdNewShipmentQty) * -1.
  END.
  ELSE
  DO:
    IF ROUND(DECIMAL(iopdNewShipmentQty),4) < 0 THEN
      iopdNewShipmentQty = ABS(iopdNewShipmentQty).
  END.
  
  /* kem
  IF iplLineUpdateMode THEN 
    temp-ship-details.disp_qty_conv? = . */
         
  IF NOT iplSelectNextRow               OR 
     NUM-RESULTS("br-shipdetails") < 2  THEN
    rNextRowRecid = ?.
  ELSE
  DO:
    /* set up the next row to display here before we process anything */
    FIND bfTempShip WHERE
         bfTempShip.rec = rShipmentDetailRecid
         NO-LOCK NO-ERROR.

    FIND NEXT bfTempShip NO-LOCK NO-ERROR.
    IF AVAILABLE bfTempShip THEN
      rNextRowRecid = bfTempShip.rec.
    ELSE
      ASSIGN
        rNextRowRecid = rShipmentDetailRecid
        lLastRow      = TRUE.
  END.

  IF LAST-EVENT:WIDGET-ENTER = bt-delete:HANDLE IN FRAME {&FRAME-NAME} THEN 
    RETURN.
  IF LAST-EVENT:WIDGET-ENTER = bt-update_detail:HANDLE IN FRAME {&FRAME-NAME} THEN 
    RETURN.

  IF ROUND(DECIMAL(iopdNewShipmentQty),4) = ROUND(gdDetailTallyQty,4) THEN        
  DO:
    IF iplLineUpdateMode THEN 
      RUN returnfromsishipdetailupd
        ( INPUT rShipmentDetailRecid,
          INPUT rNextRowRecid,
          INPUT ipiRow,
          INPUT lLastRow,
          INPUT gcTallyMsg,
          INPUT iopdNewShipmentQty,
          INPUT TRUE, /* treat like this was completed */
          INPUT DATASET dsTempShipDet,
          INPUT DATASET dsErrorMsg ).
        
    RETURN.
  END.
  
  IF NUM-RESULTS("br-shipdetails") > 0 AND
     br-shipdetails:NUM-SELECTED-ROWS IN FRAME {&FRAME-NAME} = 1 THEN
  DO:
    {waiton.i}

    IF NOT AVAILABLE bltemp-ship-details THEN
      FIND FIRST bltemp-ship-details WHERE
                 bltemp-ship-details.rec = rShipmentDetailRecid
                 NO-LOCK NO-ERROR.

    ASSIGN
      glByPassEntryTrigger2 = YES.

    EMPTY TEMP-TABLE ttTrackSelected NO-ERROR.

    /*DO NOT run on appserver as this displays windows/messages*/
    RUN so/sishipdetailupd.p PERSISTENT
      ( INPUT gscSessionContextID,
        INPUT CURRENT-WINDOW,
        INPUT THIS-PROCEDURE,
        INPUT ?,
        INPUT "explship",
        INPUT YES, /*Allow UI*/
        INPUT bltemp-ship-details.so_id_sysid,
        INPUT bltemp-ship-details.so_id,
        INPUT bltemp-ship-details.sequence,
        INPUT bltemp-ship-details.ship-num,
        INPUT g-tally_qty,
        INPUT gdDetailTallyQty,
        INPUT iopdNewShipmentQty,
        INPUT 0, /*WMS Seq*/
        INPUT rShipmentDetailRecid,
        INPUT rNextRowRecid,
        INPUT ipiRow,
        INPUT lLastRow,
        INPUT gcTallyMsg,
        INPUT 0, /*Thickness */
        INPUT 0, /*Width     */
        INPUT 0, /*Length    */
        INPUT 0, /*PieceCount*/
        INPUT DATASET dsOrigDetailTallyDummy,
        INPUT DATASET dsTempShipDet ).
    
    RETURN NO-APPLY.
  END. /* num-results */

END PROCEDURE.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE ValidateDriver wn-ship_details
PROCEDURE ValidateDriver :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
  DEFINE INPUT  PARAMETER iprDriverRecid AS RECID     NO-UNDO.
  DEFINE INPUT  PARAMETER ipcDriver      AS CHARACTER NO-UNDO.
  DEFINE INPUT  PARAMETER iplSilent      AS LOGICAL   NO-UNDO.
  DEFINE OUTPUT PARAMETER oplContinue    AS LOGICAL   NO-UNDO INIT NO.

  DEFINE VARIABLE lValid        AS LOGICAL     NO-UNDO.
  DEFINE VARIABLE lAcctDisabled AS LOGICAL     NO-UNDO.


  DO WITH FRAME {&FRAME-NAME}:

    RUN so/sivalidatedriver.p ON SERVER g-AppSrvr
      ( INPUT        iplSilent,
        INPUT        "SO",
        INPUT        gcSOSysid,
        INPUT        giSOID,
        INPUT        giShipNum,
        INPUT        YES,
        INPUT        iprDriverRecid,
        INPUT        gcPriorDriver,
        INPUT-OUTPUT ipcDriver,
              OUTPUT oplContinue,
              OUTPUT lValid,
              OUTPUT lAcctDisabled,
              OUTPUT DATASET dsErrorMsg ).

    IF TRIM(ipcDriver) <> "" THEN
      ASSIGN
        fiDriver:SCREEN-VALUE = ipcDriver.

    IF NOT ProcessMessages("DisplayOnly") OR
       NOT oplContinue                    THEN
    DO:
      ASSIGN
        fiDriver:SCREEN-VALUE = gcPriorDriver.

      APPLY "ENTRY":U TO fiDriver.
      RETURN.
    END.
    ELSE
      ASSIGN
        gcPriorDriver = fiDriver:SCREEN-VALUE.

  END. /* DO WITH FRAME {&FRAME-NAME}: */

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE window_sensitive wn-ship_details
PROCEDURE window_sensitive :
/*------------------------------------------------------------------------------
  Purpose:
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT PARAMETER iplSensitive AS LOGICAL NO-UNDO.

IF iplSensitive THEN
DO:

  {waitoff.i}

  {&WINDOW-NAME}:SENSITIVE = YES.

  APPLY "ENTRY" TO CURRENT-WINDOW.

END.
ELSE
  {&WINDOW-NAME}:SENSITIVE = NO.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE xdelete_new_tally wn-ship_details
PROCEDURE xdelete_new_tally :
/*------------------------------------------------------------------------------
  Purpose:     get the new/current tally break down for this detail and delete it
               if it isn't the original one, then restore the original one.
  Parameters:  <none>
  Notes:
------------------------------------------------------------------------------*/
DEFINE INPUT  PARAMETER ip-tran_type        AS   CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER ip-tran_sysid       AS   CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER ip-tran_id          AS   INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER ip-tran_seq         AS   INTEGER   NO-UNDO.
DEFINE INPUT  PARAMETER ipcOrigTallyString  AS   CHARACTER NO-UNDO.
DEFINE INPUT  PARAMETER ipiShipmentNum      AS   INTEGER   NO-UNDO.

DEFINE VARIABLE         cTallyString        AS   CHARACTER NO-UNDO.
DEFINE VARIABLE         dDummy              AS   DECIMAL   NO-UNDO.

/* get the newest tally record information */

RUN invtallycalc.p
  ( INPUT        YES,
    INPUT        "GET",                        /*function    */
    INPUT        NO,                           /*use tally string to save information, only useful on "CREATE"*/
    INPUT        NO,                           /*requires BF quantity as output */
    INPUT        ip-tran_sysid,                /*tran_sysid  */
    INPUT        ip-tran_type,                 /*tran_type   */
    INPUT        ip-tran_id,                   /*tran_id     */
    INPUT        ip-tran_seq,                  /*tran_seq    */
    INPUT        ipiShipmentNum,               /*shipment num*/
    INPUT        0,                            /*pick_id     */
    INPUT        0,                            /*thickness   */
    INPUT        0,                            /*width       */
    INPUT        0,                            /*length      */
    INPUT        0,                            /*piece count */
    INPUT        0,                            /*quantity    */
    INPUT-OUTPUT cTallyString,                 /*tally string*/
          OUTPUT dDummy ).                     /*tally quantity*/

/* in order to get this far, the user would have pressed the bt-quit button labelled
   "cancel". We then want to delete any new tally break downs that were created. But
   we don't want to delete it unless its new. */

IF cTallyString <> ipcOrigTallyString THEN
DO:
  /* delete the current tally breakdown for this detail */
  IF ipcOrigTallyString = "" THEN
    RUN invtallycalc.p
      ( INPUT        NO,
        INPUT        "DELETE",                     /*function    */
        INPUT        NO,                           /*use tally string to save information, only useful on "CREATE"*/
        INPUT        NO,                           /*requires BF quantity as output */
        INPUT        ip-tran_sysid,                /*tran_sysid  */
        INPUT        ip-tran_type,                 /*tran_type   */
        INPUT        ip-tran_id,                   /*tran_id     */
        INPUT        ip-tran_seq,                  /*tran_seq    */
        INPUT        ipiShipmentNum,               /*shipment num*/
        INPUT        0,                            /*pick_id     */
        INPUT        0,                            /*thickness   */
        INPUT        0,                            /*width       */
        INPUT        0,                            /*length      */
        INPUT        0,                            /*piece count */
        INPUT        0,                            /*quantity    */
        INPUT-OUTPUT cTallyString,                 /*tally string*/
              OUTPUT dDummy ).                     /*tally quantity*/
  ELSE
    RUN invtallycalc.p
      ( INPUT        NO,
        INPUT        "CREATE",                     /*function    */
        INPUT        YES,                          /*use tally string to save information, only useful on "CREATE"*/
        INPUT        NO,                           /*requires BF quantity as output */
        INPUT        ip-tran_sysid,                /*tran_sysid  */
        INPUT        ip-tran_type,                 /*tran_type   */
        INPUT        ip-tran_id,                   /*tran_id     */
        INPUT        ip-tran_seq,                  /*tran_seq    */
        INPUT        ipiShipmentNum,               /*shipment num*/
        INPUT        0,                            /*pick_id     */
        INPUT        0,                            /*thickness   */
        INPUT        0,                            /*width       */
        INPUT        0,                            /*length      */
        INPUT        0,                            /*piece count */
        INPUT        0,                            /*quantity    */
        INPUT-OUTPUT ipcOrigTallyString,           /*tally string*/
              OUTPUT dDummy ).                     /*tally quantity*/

END.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* ************************  Function Implementations ***************** */


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION CancelLineUpdateChanges wn-ship_details
FUNCTION CancelLineUpdateChanges RETURNS LOGICAL 
  (  ):
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lCancelChanges    AS LOGICAL    NO-UNDO.
  
  IF giLineUpdateSequence <> 0 AND 
     UnsavedLineUpdateChanges( gcSOSysid, giSOID, giShipNum, giLineUpdateSequence ) THEN 
    RUN sysinfo.p
      ( INPUT "modified",
        INPUT "",
        INPUT-OUTPUT lCancelChanges ).
  
  RETURN lCancelChanges.

END FUNCTION.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION PricingIsEditableForDetail wn-ship_details
FUNCTION PricingIsEditableForDetail RETURNS LOGICAL 
  (  ):
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lPriceFieldsEditable    AS LOGICAL  NO-UNDO INIT TRUE.
  
  IF temp-ship-details.type = "CM" THEN
    lPriceFieldsEditable = FALSE.   
  ELSE IF temp-ship-details.contract_prices_locked THEN
    lPriceFieldsEditable = FALSE.
  ELSE IF temp-ship-details.group_id <> "" THEN
  DO:
    IF temp-ship-details.cGroupHeaderPricing = "Price Header Item Only" AND 
       NOT temp-ship-details.group_header THEN 
      lPriceFieldsEditable = FALSE. 
    ELSE IF temp-ship-details.cGroupHeaderPricing = "Price Detail Items Only" AND 
            temp-ship-details.group_header THEN 
      lPriceFieldsEditable = FALSE. 
  END.    
    
  RETURN lPriceFieldsEditable.

END FUNCTION.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _FUNCTION UnsavedLineUpdateChanges wn-ship_details
FUNCTION UnsavedLineUpdateChanges RETURNS LOGICAL 
  ( INPUT ipcSOIDSysid    AS CHARACTER,
    INPUT ipiSOID         AS INTEGER,
    INPUT ipiSequence     AS INTEGER,
    INPUT ipiShipmentNum  AS INTEGER ):
/*------------------------------------------------------------------------------
 Purpose:
 Notes:
------------------------------------------------------------------------------*/
  DEFINE VARIABLE lUnsavedChanges   AS LOGICAL  NO-UNDO INIT TRUE. // kem  - change to false
  
  DEFINE BUFFER bltemp-ship-details FOR temp-ship-details.
  
  FOR FIRST bltemp-ship-details WHERE 
            bltemp-ship-details.so_id_sysid = ipcSOIDSysid    AND
            bltemp-ship-details.so_id       = ipiSOID         AND 
            bltemp-ship-details.sequence    = ipiSequence     AND 
            bltemp-ship-details.ship-num    = ipiShipmentNum  
            NO-LOCK:
    
    
    /*
    IF bltemp-ship-details.dDispPrice <> fiPrice
    
    */
  END. 
      
  RETURN lUnsavedChanges.

END FUNCTION.
  
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME



